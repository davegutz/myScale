
c:/Users/Dave/Documents/GitHub/myScale/myScaleNew/target/1.5.2/photon/myScaleNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000031b0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a31d0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  20000000  080a31d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001e8  20000070  20000070  00030070  2**3
                  ALLOC
  6 .module_info_suffix 00000028  080a3240  080a3240  00023240  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3268  080a3268  00023268  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000acae9  00000000  00000000  0002326c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fda1  00000000  00000000  000cfd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00011d86  00000000  00000000  000dfaf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001f98  00000000  00000000  000f187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000030b0  00000000  00000000  000f3814  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026cec  00000000  00000000  000f68c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025adb  00000000  00000000  0011d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a4e8a  00000000  00000000  0014308b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ba04  00000000  00000000  001e7f18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f002 feb1 	bl	80a2d98 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f002 feb6 	bl	80a2dae <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a31d4 	.word	0x080a31d4
 80a0050:	2000006c 	.word	0x2000006c
 80a0054:	20000070 	.word	0x20000070
 80a0058:	20000258 	.word	0x20000258
 80a005c:	20000258 	.word	0x20000258

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 f98f 	bl	80a1384 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a3194 	.word	0x080a3194
 80a0088:	080a31d0 	.word	0x080a31d0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 ba38 	b.w	80a0500 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 faf1 	bl	80a0678 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 b935 	b.w	80a1308 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f000 bf23 	b.w	80a0ee8 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f000 bf21 	b.w	80a0ee8 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f000 bf27 	b.w	80a0ef8 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN5Hx711D1Ev>:
}

Hx711::~Hx711()
{

}
 80a00ba:	4770      	bx	lr

080a00bc <_ZN5Hx711D0Ev>:
	averageValue();
	this->setOffset(averageValue());
	this->setScale();
}

Hx711::~Hx711()
 80a00bc:	b510      	push	{r4, lr}
 80a00be:	4604      	mov	r4, r0
{

}
 80a00c0:	2110      	movs	r1, #16
 80a00c2:	f001 fd3f 	bl	80a1b44 <_ZdlPvj>
 80a00c6:	4620      	mov	r0, r4
 80a00c8:	bd10      	pop	{r4, pc}

080a00ca <_ZN5Hx7118getValueEv>:

	return sum / times;
}

long Hx711::getValue()
{
 80a00ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a00ce:	4605      	mov	r5, r0
	byte data[3];

	while (digitalRead(_pin_dout))
 80a00d0:	7928      	ldrb	r0, [r5, #4]
 80a00d2:	f001 fcbd 	bl	80a1a50 <digitalRead>
 80a00d6:	2800      	cmp	r0, #0
 80a00d8:	d1fa      	bne.n	80a00d0 <_ZN5Hx7118getValueEv+0x6>
 80a00da:	f10d 0406 	add.w	r4, sp, #6
 80a00de:	f10d 0803 	add.w	r8, sp, #3

	for (byte j = 0; j < 3; j++)
	{
		for (byte i = 0; i < 8; i++)
		{
			digitalWrite(_pin_slk, HIGH);
 80a00e2:	2701      	movs	r7, #1

	return sum / times;
}

long Hx711::getValue()
{
 80a00e4:	2607      	movs	r6, #7

	for (byte j = 0; j < 3; j++)
	{
		for (byte i = 0; i < 8; i++)
		{
			digitalWrite(_pin_slk, HIGH);
 80a00e6:	2101      	movs	r1, #1
 80a00e8:	7968      	ldrb	r0, [r5, #5]
 80a00ea:	f001 fc98 	bl	80a1a1e <digitalWrite>
			bitWrite(data[2 - j], 7 - i, digitalRead(_pin_dout));
 80a00ee:	7928      	ldrb	r0, [r5, #4]
 80a00f0:	f001 fcae 	bl	80a1a50 <digitalRead>
 80a00f4:	fa07 f306 	lsl.w	r3, r7, r6
 80a00f8:	7822      	ldrb	r2, [r4, #0]
 80a00fa:	b108      	cbz	r0, 80a0100 <_ZN5Hx7118getValueEv+0x36>
 80a00fc:	4313      	orrs	r3, r2
 80a00fe:	e001      	b.n	80a0104 <_ZN5Hx7118getValueEv+0x3a>
 80a0100:	ea22 0303 	bic.w	r3, r2, r3
			digitalWrite(_pin_slk, LOW);
 80a0104:	2100      	movs	r1, #0
 80a0106:	7968      	ldrb	r0, [r5, #5]
	for (byte j = 0; j < 3; j++)
	{
		for (byte i = 0; i < 8; i++)
		{
			digitalWrite(_pin_slk, HIGH);
			bitWrite(data[2 - j], 7 - i, digitalRead(_pin_dout));
 80a0108:	7023      	strb	r3, [r4, #0]
			digitalWrite(_pin_slk, LOW);
 80a010a:	f001 fc88 	bl	80a1a1e <digitalWrite>
	while (digitalRead(_pin_dout))
		;

	for (byte j = 0; j < 3; j++)
	{
		for (byte i = 0; i < 8; i++)
 80a010e:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a0112:	d2e8      	bcs.n	80a00e6 <_ZN5Hx7118getValueEv+0x1c>
 80a0114:	3c01      	subs	r4, #1
	byte data[3];

	while (digitalRead(_pin_dout))
		;

	for (byte j = 0; j < 3; j++)
 80a0116:	45a0      	cmp	r8, r4
 80a0118:	d1e4      	bne.n	80a00e4 <_ZN5Hx7118getValueEv+0x1a>
			bitWrite(data[2 - j], 7 - i, digitalRead(_pin_dout));
			digitalWrite(_pin_slk, LOW);
		}
	}

	digitalWrite(_pin_slk, HIGH);
 80a011a:	7968      	ldrb	r0, [r5, #5]
 80a011c:	2101      	movs	r1, #1
 80a011e:	f001 fc7e 	bl	80a1a1e <digitalWrite>
	digitalWrite(_pin_slk, LOW);
 80a0122:	7968      	ldrb	r0, [r5, #5]
 80a0124:	2100      	movs	r1, #0
 80a0126:	f001 fc7a 	bl	80a1a1e <digitalWrite>

	return ((long) data[2] << 16) | ((long) data[1] << 8) | (long) data[0];
 80a012a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a012e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80a0132:	021b      	lsls	r3, r3, #8
 80a0134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80a0138:	f89d 0004 	ldrb.w	r0, [sp, #4]
}
 80a013c:	4318      	orrs	r0, r3
 80a013e:	b002      	add	sp, #8
 80a0140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0144 <_ZN5Hx71112averageValueEh>:
{

}

long Hx711::averageValue(byte times)
{
 80a0144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0146:	2400      	movs	r4, #0
 80a0148:	4606      	mov	r6, r0
 80a014a:	460f      	mov	r7, r1
	long sum = 0;
 80a014c:	4625      	mov	r5, r4
	for (byte i = 0; i < times; i++)
 80a014e:	42bc      	cmp	r4, r7
 80a0150:	d005      	beq.n	80a015e <_ZN5Hx71112averageValueEh+0x1a>
	{
		sum += getValue();
 80a0152:	4630      	mov	r0, r6
 80a0154:	f7ff ffb9 	bl	80a00ca <_ZN5Hx7118getValueEv>
 80a0158:	3401      	adds	r4, #1
 80a015a:	4405      	add	r5, r0
}

long Hx711::averageValue(byte times)
{
	long sum = 0;
	for (byte i = 0; i < times; i++)
 80a015c:	e7f7      	b.n	80a014e <_ZN5Hx71112averageValueEh+0xa>
	{
		sum += getValue();
	}

	return sum / times;
}
 80a015e:	fb95 f0f4 	sdiv	r0, r5, r4
 80a0162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0164 <_ZN5Hx711C1Ehh>:
 *      Author: agu
 */

#include "Hx711.h"

Hx711::Hx711(uint8_t pin_dout, uint8_t pin_slk) :
 80a0164:	b510      	push	{r4, lr}
 80a0166:	4604      	mov	r4, r0
		_pin_dout(pin_dout), _pin_slk(pin_slk)
 80a0168:	4b11      	ldr	r3, [pc, #68]	; (80a01b0 <_ZN5Hx711C1Ehh+0x4c>)
 80a016a:	7142      	strb	r2, [r0, #5]
 80a016c:	6003      	str	r3, [r0, #0]
 80a016e:	7101      	strb	r1, [r0, #4]
{
	pinMode(_pin_slk, OUTPUT);
 80a0170:	4610      	mov	r0, r2
 80a0172:	2101      	movs	r1, #1
 80a0174:	f001 fc42 	bl	80a19fc <pinMode>
	pinMode(_pin_dout, INPUT);
 80a0178:	7920      	ldrb	r0, [r4, #4]
 80a017a:	2100      	movs	r1, #0
 80a017c:	f001 fc3e 	bl	80a19fc <pinMode>

	digitalWrite(_pin_slk, HIGH);
 80a0180:	2101      	movs	r1, #1
 80a0182:	7960      	ldrb	r0, [r4, #5]
 80a0184:	f001 fc4b 	bl	80a1a1e <digitalWrite>
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0188:	2064      	movs	r0, #100	; 0x64
 80a018a:	f000 fd3f 	bl	80a0c0c <HAL_Delay_Microseconds>
	delayMicroseconds(100);
	digitalWrite(_pin_slk, LOW);
 80a018e:	7960      	ldrb	r0, [r4, #5]
 80a0190:	2100      	movs	r1, #0
 80a0192:	f001 fc44 	bl	80a1a1e <digitalWrite>

	averageValue();
 80a0196:	2119      	movs	r1, #25
 80a0198:	4620      	mov	r0, r4
 80a019a:	f7ff ffd3 	bl	80a0144 <_ZN5Hx71112averageValueEh>
	this->setOffset(averageValue());
 80a019e:	2119      	movs	r1, #25
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	f7ff ffcf 	bl	80a0144 <_ZN5Hx71112averageValueEh>
	_offset = offset;
}

void Hx711::setScale(float scale)
{
	_scale = scale;
 80a01a6:	4b03      	ldr	r3, [pc, #12]	; (80a01b4 <_ZN5Hx711C1Ehh+0x50>)
	return ((long) data[2] << 16) | ((long) data[1] << 8) | (long) data[0];
}

void Hx711::setOffset(long offset)
{
	_offset = offset;
 80a01a8:	60a0      	str	r0, [r4, #8]
}

void Hx711::setScale(float scale)
{
	_scale = scale;
 80a01aa:	60e3      	str	r3, [r4, #12]
	digitalWrite(_pin_slk, LOW);

	averageValue();
	this->setOffset(averageValue());
	this->setScale();
}
 80a01ac:	4620      	mov	r0, r4
 80a01ae:	bd10      	pop	{r4, pc}
 80a01b0:	080a2e3c 	.word	0x080a2e3c
 80a01b4:	44f8c000 	.word	0x44f8c000

080a01b8 <_ZN5Hx7118setScaleEf>:
	_offset = offset;
}

void Hx711::setScale(float scale)
{
	_scale = scale;
 80a01b8:	60c1      	str	r1, [r0, #12]
 80a01ba:	4770      	bx	lr

080a01bc <_ZN5Hx7117getGramEv>:
}

float Hx711::getGram()
{
 80a01bc:	b510      	push	{r4, lr}
 80a01be:	4604      	mov	r4, r0
	long val = (averageValue() - _offset);
 80a01c0:	2119      	movs	r1, #25
 80a01c2:	f7ff ffbf 	bl	80a0144 <_ZN5Hx71112averageValueEh>
	return (float) val / _scale;
 80a01c6:	68a3      	ldr	r3, [r4, #8]
 80a01c8:	1ac0      	subs	r0, r0, r3
 80a01ca:	f002 fc33 	bl	80a2a34 <__aeabi_i2f>
 80a01ce:	68e1      	ldr	r1, [r4, #12]
 80a01d0:	f002 fd38 	bl	80a2c44 <__aeabi_fdiv>
}
 80a01d4:	bd10      	pop	{r4, pc}

080a01d6 <_GLOBAL__sub_I__ZN5Hx711C2Ehh>:
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a01d6:	f000 bcd9 	b.w	80a0b8c <HAL_Pin_Map>

080a01da <_ZN14DiscreteFilter13rateStateCalcEd>:
    rate_ = 0.0;
  }
  return (rate_);
}
void DiscreteFilter::rateState(double in) {}
double DiscreteFilter::rateStateCalc(double in) { return (0); }
 80a01da:	2000      	movs	r0, #0
 80a01dc:	2100      	movs	r1, #0
 80a01de:	4770      	bx	lr

080a01e0 <_ZN14DiscreteFilter11assignCoeffEd>:
void DiscreteFilter::assignCoeff(double tau) {}
 80a01e0:	4770      	bx	lr

080a01e2 <_ZN9LagTustinD1Ev>:
{
  LagTustin::assignCoeff(tau);
}
//LagTustin::LagTustin(const LagTustin & RLT)
//: DiscreteFilter(RLT.T_, RLT.tau_, RLT.min_, RLT.max_){}
LagTustin::~LagTustin() {}
 80a01e2:	4770      	bx	lr

080a01e4 <_ZN9LagTustin9calcStateEdd>:
{
  rate_ = fmax(fmin(a_ * (in - state_), max_), min_);
  state_ = in * (1.0 - b_) + state_ * b_;
}
void LagTustin::calcState(double in, const double T)
{
 80a01e4:	b5d0      	push	{r4, r6, r7, lr}
 80a01e6:	4604      	mov	r4, r0
 80a01e8:	4616      	mov	r6, r2
 80a01ea:	461f      	mov	r7, r3
  T_ = T;
 80a01ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a01f0:	e9c0 2308 	strd	r2, r3, [r0, #32]
  assignCoeff(tau_);
 80a01f4:	6803      	ldr	r3, [r0, #0]
 80a01f6:	68d9      	ldr	r1, [r3, #12]
 80a01f8:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
 80a01fc:	4788      	blx	r1
  calcState(in);
 80a01fe:	6823      	ldr	r3, [r4, #0]
 80a0200:	4632      	mov	r2, r6
 80a0202:	6a19      	ldr	r1, [r3, #32]
 80a0204:	4620      	mov	r0, r4
 80a0206:	463b      	mov	r3, r7
}
 80a0208:	e8bd 40d0 	ldmia.w	sp!, {r4, r6, r7, lr}
}
void LagTustin::calcState(double in, const double T)
{
  T_ = T;
  assignCoeff(tau_);
  calcState(in);
 80a020c:	4708      	bx	r1

080a020e <_ZN9LagTustin9calculateEdid>:
  }
  LagTustin::calcState(in);
  return (state_);
}
double LagTustin::calculate(double in, int RESET, const double T)
{
 80a020e:	b513      	push	{r0, r1, r4, lr}
  if (RESET > 0)
 80a0210:	9904      	ldr	r1, [sp, #16]
  }
  LagTustin::calcState(in);
  return (state_);
}
double LagTustin::calculate(double in, int RESET, const double T)
{
 80a0212:	4604      	mov	r4, r0
  if (RESET > 0)
 80a0214:	2900      	cmp	r1, #0
 80a0216:	dd01      	ble.n	80a021c <_ZN9LagTustin9calculateEdid+0xe>
  {
    state_ = in;
 80a0218:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
  }
  LagTustin::calcState(in, T);
 80a021c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a0220:	e9cd 0100 	strd	r0, r1, [sp]
 80a0224:	4620      	mov	r0, r4
 80a0226:	f7ff ffdd 	bl	80a01e4 <_ZN9LagTustin9calcStateEdd>
  return (state_);
}
 80a022a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80a022e:	b002      	add	sp, #8
 80a0230:	bd10      	pop	{r4, pc}

080a0232 <_ZN9LagTustin11assignCoeffEd>:
  T_ = T;
  assignCoeff(tau_);
  calcState(in);
}
void LagTustin::assignCoeff(double tau)
{
 80a0232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0236:	4619      	mov	r1, r3
 80a0238:	4682      	mov	sl, r0
 80a023a:	4610      	mov	r0, r2
  tau_ = tau;
 80a023c:	e9ca 010a 	strd	r0, r1, [sl, #40]	; 0x28
  a_ = 2.0 / (2.0 * tau_ + T_);
 80a0240:	f001 fe94 	bl	80a1f6c <__adddf3>
 80a0244:	e9da 6708 	ldrd	r6, r7, [sl, #32]
 80a0248:	4632      	mov	r2, r6
 80a024a:	463b      	mov	r3, r7
 80a024c:	4680      	mov	r8, r0
 80a024e:	4689      	mov	r9, r1
 80a0250:	f001 fe8c 	bl	80a1f6c <__adddf3>
 80a0254:	4602      	mov	r2, r0
 80a0256:	460b      	mov	r3, r1
 80a0258:	4604      	mov	r4, r0
 80a025a:	460d      	mov	r5, r1
 80a025c:	2000      	movs	r0, #0
 80a025e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80a0262:	f002 f95f 	bl	80a2524 <__aeabi_ddiv>
  b_ = (2.0 * tau_ - T_) / (2.0 * tau_ + T_);
 80a0266:	4632      	mov	r2, r6
  calcState(in);
}
void LagTustin::assignCoeff(double tau)
{
  tau_ = tau;
  a_ = 2.0 / (2.0 * tau_ + T_);
 80a0268:	e9ca 010c 	strd	r0, r1, [sl, #48]	; 0x30
  b_ = (2.0 * tau_ - T_) / (2.0 * tau_ + T_);
 80a026c:	463b      	mov	r3, r7
 80a026e:	4640      	mov	r0, r8
 80a0270:	4649      	mov	r1, r9
 80a0272:	f001 fe79 	bl	80a1f68 <__aeabi_dsub>
 80a0276:	4622      	mov	r2, r4
 80a0278:	462b      	mov	r3, r5
 80a027a:	f002 f953 	bl	80a2524 <__aeabi_ddiv>
 80a027e:	e9ca 010e 	strd	r0, r1, [sl, #56]	; 0x38
 80a0282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0286 <_ZN9LagTustin5stateEv>:
}
double LagTustin::state(void) { return (state_); };
 80a0286:	f100 0148 	add.w	r1, r0, #72	; 0x48
 80a028a:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a028e:	4770      	bx	lr

080a0290 <_ZN9LagTustin9calcStateEd>:
  }
  LagTustin::calcState(in, T);
  return (state_);
}
void LagTustin::calcState(double in)
{
 80a0290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0294:	4690      	mov	r8, r2
  rate_ = fmax(fmin(a_ * (in - state_), max_), min_);
 80a0296:	e9d0 4512 	ldrd	r4, r5, [r0, #72]	; 0x48
 80a029a:	e9d0 6702 	ldrd	r6, r7, [r0, #8]
  }
  LagTustin::calcState(in, T);
  return (state_);
}
void LagTustin::calcState(double in)
{
 80a029e:	4699      	mov	r9, r3
 80a02a0:	4682      	mov	sl, r0
  rate_ = fmax(fmin(a_ * (in - state_), max_), min_);
 80a02a2:	4622      	mov	r2, r4
 80a02a4:	462b      	mov	r3, r5
 80a02a6:	4640      	mov	r0, r8
 80a02a8:	4649      	mov	r1, r9
 80a02aa:	f001 fe5d 	bl	80a1f68 <__aeabi_dsub>
 80a02ae:	e9da 230c 	ldrd	r2, r3, [sl, #48]	; 0x30
 80a02b2:	f002 f80d 	bl	80a22d0 <__aeabi_dmul>
 80a02b6:	4632      	mov	r2, r6
 80a02b8:	463b      	mov	r3, r7
 80a02ba:	f001 fdbb 	bl	80a1e34 <fmin>
 80a02be:	e9da 2304 	ldrd	r2, r3, [sl, #16]
 80a02c2:	f001 fd9b 	bl	80a1dfc <fmax>
  state_ = in * (1.0 - b_) + state_ * b_;
 80a02c6:	e9da 670e 	ldrd	r6, r7, [sl, #56]	; 0x38
  LagTustin::calcState(in, T);
  return (state_);
}
void LagTustin::calcState(double in)
{
  rate_ = fmax(fmin(a_ * (in - state_), max_), min_);
 80a02ca:	e9ca 0110 	strd	r0, r1, [sl, #64]	; 0x40
  state_ = in * (1.0 - b_) + state_ * b_;
 80a02ce:	4632      	mov	r2, r6
 80a02d0:	463b      	mov	r3, r7
 80a02d2:	2000      	movs	r0, #0
 80a02d4:	490c      	ldr	r1, [pc, #48]	; (80a0308 <_ZN9LagTustin9calcStateEd+0x78>)
 80a02d6:	f001 fe47 	bl	80a1f68 <__aeabi_dsub>
 80a02da:	4642      	mov	r2, r8
 80a02dc:	464b      	mov	r3, r9
 80a02de:	f001 fff7 	bl	80a22d0 <__aeabi_dmul>
 80a02e2:	4632      	mov	r2, r6
 80a02e4:	4680      	mov	r8, r0
 80a02e6:	4689      	mov	r9, r1
 80a02e8:	463b      	mov	r3, r7
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	4629      	mov	r1, r5
 80a02ee:	f001 ffef 	bl	80a22d0 <__aeabi_dmul>
 80a02f2:	4602      	mov	r2, r0
 80a02f4:	460b      	mov	r3, r1
 80a02f6:	4640      	mov	r0, r8
 80a02f8:	4649      	mov	r1, r9
 80a02fa:	f001 fe37 	bl	80a1f6c <__adddf3>
 80a02fe:	e9ca 0112 	strd	r0, r1, [sl, #72]	; 0x48
 80a0302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0306:	bf00      	nop
 80a0308:	3ff00000 	.word	0x3ff00000

080a030c <_ZN9LagTustin9calculateEdi>:
//: DiscreteFilter(RLT.T_, RLT.tau_, RLT.min_, RLT.max_){}
LagTustin::~LagTustin() {}
// operators
// functions
double LagTustin::calculate(double in, int RESET)
{
 80a030c:	b510      	push	{r4, lr}
  if (RESET > 0)
 80a030e:	9902      	ldr	r1, [sp, #8]
//: DiscreteFilter(RLT.T_, RLT.tau_, RLT.min_, RLT.max_){}
LagTustin::~LagTustin() {}
// operators
// functions
double LagTustin::calculate(double in, int RESET)
{
 80a0310:	4604      	mov	r4, r0
  if (RESET > 0)
 80a0312:	2900      	cmp	r1, #0
 80a0314:	dd01      	ble.n	80a031a <_ZN9LagTustin9calculateEdi+0xe>
  {
    state_ = in;
 80a0316:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
  }
  LagTustin::calcState(in);
 80a031a:	4620      	mov	r0, r4
 80a031c:	f7ff ffb8 	bl	80a0290 <_ZN9LagTustin9calcStateEd>
  return (state_);
}
 80a0320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80a0324:	bd10      	pop	{r4, pc}

080a0326 <_ZN9LagTustinD0Ev>:
{
  LagTustin::assignCoeff(tau);
}
//LagTustin::LagTustin(const LagTustin & RLT)
//: DiscreteFilter(RLT.T_, RLT.tau_, RLT.min_, RLT.max_){}
LagTustin::~LagTustin() {}
 80a0326:	b510      	push	{r4, lr}
 80a0328:	4604      	mov	r4, r0
 80a032a:	2150      	movs	r1, #80	; 0x50
 80a032c:	f001 fc0a 	bl	80a1b44 <_ZdlPvj>
 80a0330:	4620      	mov	r0, r4
 80a0332:	bd10      	pop	{r4, pc}

080a0334 <_ZN8DebounceC1Ebi>:

// class Debounce
// constructors
Debounce::Debounce()
    : nz_(1) {}
Debounce::  Debounce(const bool icValue, const int updates)
 80a0334:	b538      	push	{r3, r4, r5, lr}
 80a0336:	4604      	mov	r4, r0
    : nz_(fmax(updates-1, 1))
 80a0338:	1e50      	subs	r0, r2, #1

// class Debounce
// constructors
Debounce::Debounce()
    : nz_(1) {}
Debounce::  Debounce(const bool icValue, const int updates)
 80a033a:	460d      	mov	r5, r1
    : nz_(fmax(updates-1, 1))
 80a033c:	f001 ff62 	bl	80a2204 <__aeabi_i2d>
 80a0340:	4b09      	ldr	r3, [pc, #36]	; (80a0368 <_ZN8DebounceC1Ebi+0x34>)
 80a0342:	2200      	movs	r2, #0
 80a0344:	f001 fd5a 	bl	80a1dfc <fmax>
 80a0348:	f002 fa72 	bl	80a2830 <__aeabi_d2iz>
 80a034c:	6020      	str	r0, [r4, #0]
{
  past_ = new bool[nz_];
 80a034e:	f7ff fea8 	bl	80a00a2 <_Znaj>
  for (int i=0; i<nz_; i++) past_[i] = icValue;
 80a0352:	2300      	movs	r3, #0
Debounce::Debounce()
    : nz_(1) {}
Debounce::  Debounce(const bool icValue, const int updates)
    : nz_(fmax(updates-1, 1))
{
  past_ = new bool[nz_];
 80a0354:	6060      	str	r0, [r4, #4]
  for (int i=0; i<nz_; i++) past_[i] = icValue;
 80a0356:	6822      	ldr	r2, [r4, #0]
 80a0358:	4293      	cmp	r3, r2
 80a035a:	da03      	bge.n	80a0364 <_ZN8DebounceC1Ebi+0x30>
 80a035c:	6862      	ldr	r2, [r4, #4]
 80a035e:	54d5      	strb	r5, [r2, r3]
 80a0360:	3301      	adds	r3, #1
 80a0362:	e7f8      	b.n	80a0356 <_ZN8DebounceC1Ebi+0x22>
}
 80a0364:	4620      	mov	r0, r4
 80a0366:	bd38      	pop	{r3, r4, r5, pc}
 80a0368:	3ff00000 	.word	0x3ff00000

080a036c <_ZN8Debounce9calculateEb>:
Debounce::~Debounce() {}
// operators
// functions
bool Debounce::calculate(const bool in)
{
 80a036c:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool past = past_[nz_-1];
 80a036e:	e890 0028 	ldmia.w	r0, {r3, r5}
 80a0372:	462c      	mov	r4, r5
 80a0374:	18ea      	adds	r2, r5, r3
 80a0376:	f812 6c01 	ldrb.w	r6, [r2, #-1]
  bool fail = false;
 80a037a:	2200      	movs	r2, #0
  for ( int i=0; i<nz_; i++ ) if ( in!=past_[i] ) fail = true;
 80a037c:	1b67      	subs	r7, r4, r5
 80a037e:	42bb      	cmp	r3, r7
 80a0380:	dd05      	ble.n	80a038e <_ZN8Debounce9calculateEb+0x22>
 80a0382:	f814 7b01 	ldrb.w	r7, [r4], #1
 80a0386:	428f      	cmp	r7, r1
 80a0388:	bf18      	it	ne
 80a038a:	2201      	movne	r2, #1
 80a038c:	e7f6      	b.n	80a037c <_ZN8Debounce9calculateEb+0x10>
  for ( int i=nz_-1; i>0; i-- ) past_[i] = past_[i-1];
 80a038e:	3b01      	subs	r3, #1
 80a0390:	2b00      	cmp	r3, #0
 80a0392:	6844      	ldr	r4, [r0, #4]
 80a0394:	dd04      	ble.n	80a03a0 <_ZN8Debounce9calculateEb+0x34>
 80a0396:	18e5      	adds	r5, r4, r3
 80a0398:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80a039c:	54e5      	strb	r5, [r4, r3]
 80a039e:	e7f6      	b.n	80a038e <_ZN8Debounce9calculateEb+0x22>
  past_[0] = in;
 80a03a0:	7021      	strb	r1, [r4, #0]
  bool out = in;
  if ( fail ) out = past;
  return ( out );
}
 80a03a2:	2a00      	cmp	r2, #0
 80a03a4:	bf14      	ite	ne
 80a03a6:	4630      	movne	r0, r6
 80a03a8:	4608      	moveq	r0, r1
 80a03aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a03ac <_ZN10DetectRiseC1Ev>:


// class DetectRise
// constructors
DetectRise::DetectRise()
    : past_(0) {}
 80a03ac:	2200      	movs	r2, #0
 80a03ae:	2300      	movs	r3, #0
 80a03b0:	e9c0 2300 	strd	r2, r3, [r0]
 80a03b4:	4770      	bx	lr

080a03b6 <_ZN10DetectRise9calculateEi>:
bool DetectRise::calculate(const bool in)
{
  return ( DetectRise::calculate(double(in)) ); 
}
bool DetectRise::calculate(const int in)
{
 80a03b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a03b8:	4605      	mov	r5, r0
  return ( DetectRise::calculate(double(in)) ); 
 80a03ba:	4608      	mov	r0, r1
 80a03bc:	f001 ff22 	bl	80a2204 <__aeabi_i2d>
// operators
// functions
bool DetectRise::calculate(const double in)
{
  bool out = false;
  if ( in > past_ ) out = true;
 80a03c0:	e9d5 2300 	ldrd	r2, r3, [r5]
{
  return ( DetectRise::calculate(double(in)) ); 
}
bool DetectRise::calculate(const int in)
{
  return ( DetectRise::calculate(double(in)) ); 
 80a03c4:	4606      	mov	r6, r0
 80a03c6:	460f      	mov	r7, r1
// operators
// functions
bool DetectRise::calculate(const double in)
{
  bool out = false;
  if ( in > past_ ) out = true;
 80a03c8:	f04f 0401 	mov.w	r4, #1
 80a03cc:	f002 fa10 	bl	80a27f0 <__aeabi_dcmpgt>
 80a03d0:	b908      	cbnz	r0, 80a03d6 <_ZN10DetectRise9calculateEi+0x20>
 80a03d2:	f04f 0400 	mov.w	r4, #0
  past_ = in;
 80a03d6:	e9c5 6700 	strd	r6, r7, [r5]
  return ( DetectRise::calculate(double(in)) ); 
}
bool DetectRise::calculate(const int in)
{
  return ( DetectRise::calculate(double(in)) ); 
}
 80a03da:	f004 0001 	and.w	r0, r4, #1
 80a03de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a03e0 <_ZN7TFDelayC1Ebddd>:

// class TFDelay
// constructors
TFDelay::TFDelay()
    : timer_(0), nt_(0), nf_(0), T_(1) {}
TFDelay::TFDelay(const bool in, const double Tt, const double Tf, const double T)
 80a03e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a03e4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80a03e8:	4690      	mov	r8, r2
 80a03ea:	4699      	mov	r9, r3
    : timer_(0), nt_(int(fmax(round(Tt/T)+1,0))), nf_(int(fmax(round(Tf/T+1),0))), T_(T)
 80a03ec:	2500      	movs	r5, #0

// class TFDelay
// constructors
TFDelay::TFDelay()
    : timer_(0), nt_(0), nf_(0), T_(1) {}
TFDelay::TFDelay(const bool in, const double Tt, const double Tf, const double T)
 80a03ee:	4604      	mov	r4, r0
    : timer_(0), nt_(int(fmax(round(Tt/T)+1,0))), nf_(int(fmax(round(Tf/T+1),0))), T_(T)
 80a03f0:	4632      	mov	r2, r6
 80a03f2:	463b      	mov	r3, r7
 80a03f4:	6005      	str	r5, [r0, #0]

// class TFDelay
// constructors
TFDelay::TFDelay()
    : timer_(0), nt_(0), nf_(0), T_(1) {}
TFDelay::TFDelay(const bool in, const double Tt, const double Tf, const double T)
 80a03f6:	468a      	mov	sl, r1
    : timer_(0), nt_(int(fmax(round(Tt/T)+1,0))), nf_(int(fmax(round(Tf/T+1),0))), T_(T)
 80a03f8:	4640      	mov	r0, r8
 80a03fa:	4649      	mov	r1, r9
 80a03fc:	f002 f892 	bl	80a2524 <__aeabi_ddiv>
 80a0400:	f001 fd5e 	bl	80a1ec0 <round>
 80a0404:	2200      	movs	r2, #0
 80a0406:	4b1d      	ldr	r3, [pc, #116]	; (80a047c <_ZN7TFDelayC1Ebddd+0x9c>)
 80a0408:	f001 fdb0 	bl	80a1f6c <__adddf3>
 80a040c:	2200      	movs	r2, #0
 80a040e:	2300      	movs	r3, #0
 80a0410:	f001 fcf4 	bl	80a1dfc <fmax>
 80a0414:	f002 fa0c 	bl	80a2830 <__aeabi_d2iz>
 80a0418:	4632      	mov	r2, r6
 80a041a:	6060      	str	r0, [r4, #4]
 80a041c:	463b      	mov	r3, r7
 80a041e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a0422:	f002 f87f 	bl	80a2524 <__aeabi_ddiv>
 80a0426:	2200      	movs	r2, #0
 80a0428:	4b14      	ldr	r3, [pc, #80]	; (80a047c <_ZN7TFDelayC1Ebddd+0x9c>)
 80a042a:	f001 fd9f 	bl	80a1f6c <__adddf3>
 80a042e:	f001 fd47 	bl	80a1ec0 <round>
 80a0432:	2200      	movs	r2, #0
 80a0434:	2300      	movs	r3, #0
 80a0436:	f001 fce1 	bl	80a1dfc <fmax>
 80a043a:	f002 f9f9 	bl	80a2830 <__aeabi_d2iz>
 80a043e:	e9c4 6704 	strd	r6, r7, [r4, #16]
 80a0442:	60a0      	str	r0, [r4, #8]
{
  if ( Tt == 0 ) nt_ = 0;
 80a0444:	2200      	movs	r2, #0
 80a0446:	2300      	movs	r3, #0
 80a0448:	4640      	mov	r0, r8
 80a044a:	4649      	mov	r1, r9
 80a044c:	f002 f9a8 	bl	80a27a0 <__aeabi_dcmpeq>
 80a0450:	b100      	cbz	r0, 80a0454 <_ZN7TFDelayC1Ebddd+0x74>
 80a0452:	6065      	str	r5, [r4, #4]
  if ( Tf == 0 ) nf_ = 0;
 80a0454:	2200      	movs	r2, #0
 80a0456:	2300      	movs	r3, #0
 80a0458:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a045c:	f002 f9a0 	bl	80a27a0 <__aeabi_dcmpeq>
 80a0460:	b108      	cbz	r0, 80a0466 <_ZN7TFDelayC1Ebddd+0x86>
 80a0462:	2300      	movs	r3, #0
 80a0464:	60a3      	str	r3, [r4, #8]
  if ( in ) timer_ = nf_;
 80a0466:	f1ba 0f00 	cmp.w	sl, #0
 80a046a:	d001      	beq.n	80a0470 <_ZN7TFDelayC1Ebddd+0x90>
 80a046c:	68a3      	ldr	r3, [r4, #8]
 80a046e:	e001      	b.n	80a0474 <_ZN7TFDelayC1Ebddd+0x94>
  else timer_ = -nt_;
 80a0470:	6863      	ldr	r3, [r4, #4]
 80a0472:	425b      	negs	r3, r3
 80a0474:	6023      	str	r3, [r4, #0]
}
 80a0476:	4620      	mov	r0, r4
 80a0478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a047c:	3ff00000 	.word	0x3ff00000

080a0480 <_ZN7TFDelay9calculateEb>:
TFDelay::~TFDelay() {}
// operators
// functions
double TFDelay::calculate(const bool in)
{
  if ( timer_ >= 0 )
 80a0480:	6803      	ldr	r3, [r0, #0]
 80a0482:	2b00      	cmp	r3, #0
 80a0484:	db05      	blt.n	80a0492 <_ZN7TFDelay9calculateEb+0x12>
  {
    if ( in ) timer_ = nf_;
 80a0486:	b959      	cbnz	r1, 80a04a0 <_ZN7TFDelay9calculateEb+0x20>
    else
    {
      timer_--;
 80a0488:	3b01      	subs	r3, #1
 80a048a:	6003      	str	r3, [r0, #0]
      if ( timer_<0 ) timer_ = -nt_;
 80a048c:	3301      	adds	r3, #1
 80a048e:	d109      	bne.n	80a04a4 <_ZN7TFDelay9calculateEb+0x24>
 80a0490:	e000      	b.n	80a0494 <_ZN7TFDelay9calculateEb+0x14>
    }
  }
  else
  {
    if ( !in ) timer_ = -nt_;
 80a0492:	b911      	cbnz	r1, 80a049a <_ZN7TFDelay9calculateEb+0x1a>
 80a0494:	6843      	ldr	r3, [r0, #4]
 80a0496:	425b      	negs	r3, r3
 80a0498:	e003      	b.n	80a04a2 <_ZN7TFDelay9calculateEb+0x22>
    else
    {
      timer_++;
 80a049a:	3301      	adds	r3, #1
 80a049c:	6003      	str	r3, [r0, #0]
      if ( timer_>=0 ) timer_=nf_;
 80a049e:	b90b      	cbnz	r3, 80a04a4 <_ZN7TFDelay9calculateEb+0x24>
 80a04a0:	6883      	ldr	r3, [r0, #8]
 80a04a2:	6003      	str	r3, [r0, #0]
  }
  /*
  Serial.print("in=");Serial.print(in);Serial.print(", timer=");Serial.print(timer_);Serial.print(", nt_=");Serial.print(nt_);
  Serial.print(", nf_="); Serial.print(nf_);Serial.print(", return=");Serial.println(timer_>=0);
*/
  return ( timer_>= 0 );
 80a04a4:	6803      	ldr	r3, [r0, #0]
 80a04a6:	2000      	movs	r0, #0
 80a04a8:	2b00      	cmp	r3, #0
 80a04aa:	bfb4      	ite	lt
 80a04ac:	2100      	movlt	r1, #0
 80a04ae:	4901      	ldrge	r1, [pc, #4]	; (80a04b4 <_ZN7TFDelay9calculateEb+0x34>)
}
 80a04b0:	4770      	bx	lr
 80a04b2:	bf00      	nop
 80a04b4:	3ff00000 	.word	0x3ff00000

080a04b8 <_ZN9LagTustinC1Edddd>:
double RateLagExp::state(void) { return (lstate_); };

// Tustin lag calculator, non-pre-warped, no limits, fixed update rate
// constructors
LagTustin::LagTustin() : DiscreteFilter() {}
LagTustin::LagTustin(const double T, const double tau, const double min, const double max)
 80a04b8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
// class DiscreteFilter
// constructors
DiscreteFilter::DiscreteFilter()
    : max_(1e32), min_(-1e32), rate_(0.0), T_(1.0), tau_(0.0) {}
DiscreteFilter::DiscreteFilter(const double T, const double tau, const double min, const double max)
    : max_(max), min_(min), rate_(0.0), T_(T), tau_(tau) {}
 80a04bc:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
double RateLagExp::state(void) { return (lstate_); };

// Tustin lag calculator, non-pre-warped, no limits, fixed update rate
// constructors
LagTustin::LagTustin() : DiscreteFilter() {}
LagTustin::LagTustin(const double T, const double tau, const double min, const double max)
 80a04c0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80a04c4:	4604      	mov	r4, r0
// class DiscreteFilter
// constructors
DiscreteFilter::DiscreteFilter()
    : max_(1e32), min_(-1e32), rate_(0.0), T_(1.0), tau_(0.0) {}
DiscreteFilter::DiscreteFilter(const double T, const double tau, const double min, const double max)
    : max_(max), min_(min), rate_(0.0), T_(T), tau_(tau) {}
 80a04c6:	e9c0 2308 	strd	r2, r3, [r0, #32]

// Tustin lag calculator, non-pre-warped, no limits, fixed update rate
// constructors
LagTustin::LagTustin() : DiscreteFilter() {}
LagTustin::LagTustin(const double T, const double tau, const double min, const double max)
    : DiscreteFilter(T, tau, min, max)
 80a04ca:	4b0a      	ldr	r3, [pc, #40]	; (80a04f4 <_ZN9LagTustinC1Edddd+0x3c>)
// class DiscreteFilter
// constructors
DiscreteFilter::DiscreteFilter()
    : max_(1e32), min_(-1e32), rate_(0.0), T_(1.0), tau_(0.0) {}
DiscreteFilter::DiscreteFilter(const double T, const double tau, const double min, const double max)
    : max_(max), min_(min), rate_(0.0), T_(T), tau_(tau) {}
 80a04cc:	e9c0 6702 	strd	r6, r7, [r0, #8]
 80a04d0:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 80a04d4:	e9c0 6704 	strd	r6, r7, [r0, #16]
 80a04d8:	2600      	movs	r6, #0
 80a04da:	2700      	movs	r7, #0
 80a04dc:	e9c0 6706 	strd	r6, r7, [r0, #24]
 80a04e0:	e9c0 890a 	strd	r8, r9, [r0, #40]	; 0x28

// Tustin lag calculator, non-pre-warped, no limits, fixed update rate
// constructors
LagTustin::LagTustin() : DiscreteFilter() {}
LagTustin::LagTustin(const double T, const double tau, const double min, const double max)
    : DiscreteFilter(T, tau, min, max)
 80a04e4:	6003      	str	r3, [r0, #0]
{
  LagTustin::assignCoeff(tau);
 80a04e6:	4642      	mov	r2, r8
 80a04e8:	464b      	mov	r3, r9
 80a04ea:	f7ff fea2 	bl	80a0232 <_ZN9LagTustin11assignCoeffEd>
}
 80a04ee:	4620      	mov	r0, r4
 80a04f0:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 80a04f4:	080a2e4c 	.word	0x080a2e4c

080a04f8 <_GLOBAL__sub_I__ZN8DebounceC2Ev>:
 80a04f8:	f000 bb48 	b.w	80a0b8c <HAL_Pin_Map>
 80a04fc:	0000      	movs	r0, r0
	...

080a0500 <setup>:
TFDelay  *roseDelayed;  // Power wait for Serial turn on
TFDelay  *PowerDelayed;   // ESC wait for boot
bool powerEnable = false; // Turn on ESC power


void setup() {
 80a0500:	b530      	push	{r4, r5, lr}
  scale.setScale(214.7);
 80a0502:	4951      	ldr	r1, [pc, #324]	; (80a0648 <setup+0x148>)
TFDelay  *roseDelayed;  // Power wait for Serial turn on
TFDelay  *PowerDelayed;   // ESC wait for boot
bool powerEnable = false; // Turn on ESC power


void setup() {
 80a0504:	b087      	sub	sp, #28
  scale.setScale(214.7);
 80a0506:	4851      	ldr	r0, [pc, #324]	; (80a064c <setup+0x14c>)
 80a0508:	f7ff fe56 	bl	80a01b8 <_ZN5Hx7118setScaleEf>
  Serial.begin(9600);
 80a050c:	f001 f82c 	bl	80a1568 <_Z16_fetch_usbserialv>
 80a0510:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0514:	f001 f81c 	bl	80a1550 <_ZN9USBSerial5beginEl>
  pinMode(BUTTON_PIN, INPUT);
 80a0518:	2100      	movs	r1, #0
 80a051a:	2002      	movs	r0, #2
 80a051c:	f001 fa6e 	bl	80a19fc <pinMode>
  lcd = new LiquidCrystal_I2C(0x3F, 16, 2);  // Set the LCD I2C address
 80a0520:	2010      	movs	r0, #16
 80a0522:	f7ff fdbc 	bl	80a009e <_Znwj>
 80a0526:	4605      	mov	r5, r0
 80a0528:	b120      	cbz	r0, 80a0534 <setup+0x34>
 80a052a:	2302      	movs	r3, #2
 80a052c:	2210      	movs	r2, #16
 80a052e:	213f      	movs	r1, #63	; 0x3f
 80a0530:	f000 fa2a 	bl	80a0988 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a0534:	4c46      	ldr	r4, [pc, #280]	; (80a0650 <setup+0x150>)
  lcd->init();                      // initialize the lcd
 80a0536:	4628      	mov	r0, r5

void setup() {
  scale.setScale(214.7);
  Serial.begin(9600);
  pinMode(BUTTON_PIN, INPUT);
  lcd = new LiquidCrystal_I2C(0x3F, 16, 2);  // Set the LCD I2C address
 80a0538:	6025      	str	r5, [r4, #0]
  lcd->init();                      // initialize the lcd
 80a053a:	f000 fb22 	bl	80a0b82 <_ZN17LiquidCrystal_I2C4initEv>
  lcd->backlight();
 80a053e:	6820      	ldr	r0, [r4, #0]
 80a0540:	f000 fa43 	bl	80a09ca <_ZN17LiquidCrystal_I2C9backlightEv>
  lcd->clear();
 80a0544:	6820      	ldr	r0, [r4, #0]
 80a0546:	f000 fa7e 	bl	80a0a46 <_ZN17LiquidCrystal_I2C5clearEv>
  lcd->setCursor(0,0);
 80a054a:	2200      	movs	r2, #0
 80a054c:	4611      	mov	r1, r2
 80a054e:	6820      	ldr	r0, [r4, #0]
 80a0550:	f000 fa8e 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print("              g");
 80a0554:	493f      	ldr	r1, [pc, #252]	; (80a0654 <setup+0x154>)
 80a0556:	6820      	ldr	r0, [r4, #0]
 80a0558:	f000 fd40 	bl	80a0fdc <_ZN5Print5printEPKc>
  lcd->setCursor(0,1);
 80a055c:	2201      	movs	r2, #1
 80a055e:	6820      	ldr	r0, [r4, #0]
 80a0560:	2100      	movs	r1, #0
 80a0562:	f000 fa85 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
  lcd->print("              oz");
 80a0566:	493c      	ldr	r1, [pc, #240]	; (80a0658 <setup+0x158>)
 80a0568:	6820      	ldr	r0, [r4, #0]
 80a056a:	f000 fd37 	bl	80a0fdc <_ZN5Print5printEPKc>

  // Filters
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
 80a056e:	2050      	movs	r0, #80	; 0x50
 80a0570:	f7ff fd95 	bl	80a009e <_Znwj>
 80a0574:	4604      	mov	r4, r0
 80a0576:	b198      	cbz	r0, 80a05a0 <setup+0xa0>
 80a0578:	a32d      	add	r3, pc, #180	; (adr r3, 80a0630 <setup+0x130>)
 80a057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a057e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a0582:	a32d      	add	r3, pc, #180	; (adr r3, 80a0638 <setup+0x138>)
 80a0584:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a058c:	2200      	movs	r2, #0
 80a058e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a0592:	e9cd 2300 	strd	r2, r3, [sp]
 80a0596:	a32a      	add	r3, pc, #168	; (adr r3, 80a0640 <setup+0x140>)
 80a0598:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a059c:	f7ff ff8c 	bl	80a04b8 <_ZN9LagTustinC1Edddd>
 80a05a0:	4b2e      	ldr	r3, [pc, #184]	; (80a065c <setup+0x15c>)
  ButtonDebounce = new Debounce(0, 2);
 80a05a2:	2008      	movs	r0, #8
  lcd->setCursor(0,1);
  lcd->print("              oz");

  // Filters
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
 80a05a4:	601c      	str	r4, [r3, #0]
  ButtonDebounce = new Debounce(0, 2);
 80a05a6:	f7ff fd7a 	bl	80a009e <_Znwj>
 80a05aa:	4604      	mov	r4, r0
 80a05ac:	b118      	cbz	r0, 80a05b6 <setup+0xb6>
 80a05ae:	2202      	movs	r2, #2
 80a05b0:	2100      	movs	r1, #0
 80a05b2:	f7ff febf 	bl	80a0334 <_ZN8DebounceC1Ebi>
 80a05b6:	4b2a      	ldr	r3, [pc, #168]	; (80a0660 <setup+0x160>)
  ButtonRise = new DetectRise();
 80a05b8:	2008      	movs	r0, #8
  lcd->print("              oz");

  // Filters
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
  ButtonDebounce = new Debounce(0, 2);
 80a05ba:	601c      	str	r4, [r3, #0]
  ButtonRise = new DetectRise();
 80a05bc:	f7ff fd6f 	bl	80a009e <_Znwj>
 80a05c0:	4604      	mov	r4, r0
 80a05c2:	b108      	cbz	r0, 80a05c8 <setup+0xc8>
 80a05c4:	f7ff fef2 	bl	80a03ac <_ZN10DetectRiseC1Ev>
 80a05c8:	4b26      	ldr	r3, [pc, #152]	; (80a0664 <setup+0x164>)
  roseDelayed = new TFDelay(false, 5.0, 0.0, 2.5);
 80a05ca:	2018      	movs	r0, #24

  // Filters
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
  ButtonDebounce = new Debounce(0, 2);
  ButtonRise = new DetectRise();
 80a05cc:	601c      	str	r4, [r3, #0]
  roseDelayed = new TFDelay(false, 5.0, 0.0, 2.5);
 80a05ce:	f7ff fd66 	bl	80a009e <_Znwj>
 80a05d2:	4604      	mov	r4, r0
 80a05d4:	b160      	cbz	r0, 80a05f0 <setup+0xf0>
 80a05d6:	4b24      	ldr	r3, [pc, #144]	; (80a0668 <setup+0x168>)
 80a05d8:	2200      	movs	r2, #0
 80a05da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a05de:	2200      	movs	r2, #0
 80a05e0:	2300      	movs	r3, #0
 80a05e2:	e9cd 2300 	strd	r2, r3, [sp]
 80a05e6:	2100      	movs	r1, #0
 80a05e8:	2200      	movs	r2, #0
 80a05ea:	4b20      	ldr	r3, [pc, #128]	; (80a066c <setup+0x16c>)
 80a05ec:	f7ff fef8 	bl	80a03e0 <_ZN7TFDelayC1Ebddd>
 80a05f0:	4b1f      	ldr	r3, [pc, #124]	; (80a0670 <setup+0x170>)
  PowerDelayed  = new TFDelay(false, 5.0, 0.0, 2.5);
 80a05f2:	2018      	movs	r0, #24
  // Filters
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
  ButtonDebounce = new Debounce(0, 2);
  ButtonRise = new DetectRise();
  roseDelayed = new TFDelay(false, 5.0, 0.0, 2.5);
 80a05f4:	601c      	str	r4, [r3, #0]
  PowerDelayed  = new TFDelay(false, 5.0, 0.0, 2.5);
 80a05f6:	f7ff fd52 	bl	80a009e <_Znwj>
 80a05fa:	4604      	mov	r4, r0
 80a05fc:	b160      	cbz	r0, 80a0618 <setup+0x118>
 80a05fe:	4b1a      	ldr	r3, [pc, #104]	; (80a0668 <setup+0x168>)
 80a0600:	2200      	movs	r2, #0
 80a0602:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0606:	2200      	movs	r2, #0
 80a0608:	2300      	movs	r3, #0
 80a060a:	e9cd 2300 	strd	r2, r3, [sp]
 80a060e:	2100      	movs	r1, #0
 80a0610:	2200      	movs	r2, #0
 80a0612:	4b16      	ldr	r3, [pc, #88]	; (80a066c <setup+0x16c>)
 80a0614:	f7ff fee4 	bl	80a03e0 <_ZN7TFDelayC1Ebddd>
 80a0618:	4b16      	ldr	r3, [pc, #88]	; (80a0674 <setup+0x174>)

  delay ( 1000 );
 80a061a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  double T = float(CONTROL_DELAY) / 1000.0;
  gramFilter = new LagTustin(T, tau, -45400, 45400);
  ButtonDebounce = new Debounce(0, 2);
  ButtonRise = new DetectRise();
  roseDelayed = new TFDelay(false, 5.0, 0.0, 2.5);
  PowerDelayed  = new TFDelay(false, 5.0, 0.0, 2.5);
 80a061e:	601c      	str	r4, [r3, #0]

  delay ( 1000 );
}
 80a0620:	b007      	add	sp, #28
 80a0622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  ButtonDebounce = new Debounce(0, 2);
  ButtonRise = new DetectRise();
  roseDelayed = new TFDelay(false, 5.0, 0.0, 2.5);
  PowerDelayed  = new TFDelay(false, 5.0, 0.0, 2.5);

  delay ( 1000 );
 80a0626:	f000 be1d 	b.w	80a1264 <delay>
 80a062a:	bf00      	nop
 80a062c:	f3af 8000 	nop.w
 80a0630:	00000000 	.word	0x00000000
 80a0634:	40e62b00 	.word	0x40e62b00
 80a0638:	00000000 	.word	0x00000000
 80a063c:	c0e62b00 	.word	0xc0e62b00
 80a0640:	eb851eb8 	.word	0xeb851eb8
 80a0644:	3f8eb851 	.word	0x3f8eb851
 80a0648:	4356b333 	.word	0x4356b333
 80a064c:	20000090 	.word	0x20000090
 80a0650:	200000cc 	.word	0x200000cc
 80a0654:	080a2e74 	.word	0x080a2e74
 80a0658:	080a2e84 	.word	0x080a2e84
 80a065c:	20000080 	.word	0x20000080
 80a0660:	200000d4 	.word	0x200000d4
 80a0664:	200000b0 	.word	0x200000b0
 80a0668:	40040000 	.word	0x40040000
 80a066c:	40140000 	.word	0x40140000
 80a0670:	200000b4 	.word	0x200000b4
 80a0674:	200000d0 	.word	0x200000d0

080a0678 <loop>:
}

void loop() {
 80a0678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a067c:	b08b      	sub	sp, #44	; 0x2c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a067e:	f000 facd 	bl	80a0c1c <HAL_Timer_Get_Milli_Seconds>
 80a0682:	4604      	mov	r4, r0
  static int RESET = 1;                   // Dynamic reset
  static unsigned long start = 0UL;       // Time to start looping, micros
  static double updateTime = 0.0;         // Control law update time, sec
  static double gramFilt = 0;             // Filtered gram reading
  static double gramNull = 0;    // Tare
  double gram   = scale.getGram();
 80a0684:	4896      	ldr	r0, [pc, #600]	; (80a08e0 <loop+0x268>)
 80a0686:	f7ff fd99 	bl	80a01bc <_ZN5Hx7117getGramEv>
 80a068a:	f001 fdcd 	bl	80a2228 <__aeabi_f2d>
  static double gramNet = gram - gramNull;
 80a068e:	4d95      	ldr	r5, [pc, #596]	; (80a08e4 <loop+0x26c>)
  static int RESET = 1;                   // Dynamic reset
  static unsigned long start = 0UL;       // Time to start looping, micros
  static double updateTime = 0.0;         // Control law update time, sec
  static double gramFilt = 0;             // Filtered gram reading
  static double gramNull = 0;    // Tare
  double gram   = scale.getGram();
 80a0690:	4680      	mov	r8, r0
  static double gramNet = gram - gramNull;
 80a0692:	682b      	ldr	r3, [r5, #0]
  static int RESET = 1;                   // Dynamic reset
  static unsigned long start = 0UL;       // Time to start looping, micros
  static double updateTime = 0.0;         // Control law update time, sec
  static double gramFilt = 0;             // Filtered gram reading
  static double gramNull = 0;    // Tare
  double gram   = scale.getGram();
 80a0694:	4689      	mov	r9, r1
  static double gramNet = gram - gramNull;
 80a0696:	07da      	lsls	r2, r3, #31
 80a0698:	d410      	bmi.n	80a06bc <loop+0x44>
 80a069a:	4628      	mov	r0, r5
 80a069c:	f7ff fd05 	bl	80a00aa <__cxa_guard_acquire>
 80a06a0:	b160      	cbz	r0, 80a06bc <loop+0x44>
 80a06a2:	4b91      	ldr	r3, [pc, #580]	; (80a08e8 <loop+0x270>)
 80a06a4:	4640      	mov	r0, r8
 80a06a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06aa:	4649      	mov	r1, r9
 80a06ac:	f001 fc5c 	bl	80a1f68 <__aeabi_dsub>
 80a06b0:	4b8e      	ldr	r3, [pc, #568]	; (80a08ec <loop+0x274>)
 80a06b2:	e9c3 0100 	strd	r0, r1, [r3]
 80a06b6:	4628      	mov	r0, r5
 80a06b8:	f7ff fcfc 	bl	80a00b4 <__cxa_guard_release>
  static double oz = gramNet/454*16;
 80a06bc:	4d8c      	ldr	r5, [pc, #560]	; (80a08f0 <loop+0x278>)
 80a06be:	682b      	ldr	r3, [r5, #0]
 80a06c0:	07db      	lsls	r3, r3, #31
 80a06c2:	d415      	bmi.n	80a06f0 <loop+0x78>
 80a06c4:	4628      	mov	r0, r5
 80a06c6:	f7ff fcf0 	bl	80a00aa <__cxa_guard_acquire>
 80a06ca:	b188      	cbz	r0, 80a06f0 <loop+0x78>
 80a06cc:	a382      	add	r3, pc, #520	; (adr r3, 80a08d8 <loop+0x260>)
 80a06ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a06d2:	4986      	ldr	r1, [pc, #536]	; (80a08ec <loop+0x274>)
 80a06d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a06d8:	f001 ff24 	bl	80a2524 <__aeabi_ddiv>
 80a06dc:	4b85      	ldr	r3, [pc, #532]	; (80a08f4 <loop+0x27c>)
 80a06de:	2200      	movs	r2, #0
 80a06e0:	f001 fdf6 	bl	80a22d0 <__aeabi_dmul>
 80a06e4:	4b84      	ldr	r3, [pc, #528]	; (80a08f8 <loop+0x280>)
 80a06e6:	e9c3 0100 	strd	r0, r1, [r3]
 80a06ea:	4628      	mov	r0, r5
 80a06ec:	f7ff fce2 	bl	80a00b4 <__cxa_guard_release>
  double elapsedTime;                     // elapsed time, millis
  bool control;                           // Control frame, T/F
  bool publish;                           // Publish, T/F

  // Executive
  if (start == 0UL) start = now;
 80a06f0:	4b82      	ldr	r3, [pc, #520]	; (80a08fc <loop+0x284>)
 80a06f2:	681a      	ldr	r2, [r3, #0]
 80a06f4:	b902      	cbnz	r2, 80a06f8 <loop+0x80>
 80a06f6:	601c      	str	r4, [r3, #0]
  elapsedTime = double(now - start) * 1e-3;
  unsigned long deltaTick = now - lastControl;
 80a06f8:	4e81      	ldr	r6, [pc, #516]	; (80a0900 <loop+0x288>)
 80a06fa:	6830      	ldr	r0, [r6, #0]
 80a06fc:	1a20      	subs	r0, r4, r0
  control = (deltaTick >= CONTROL_DELAY);
  if (control)
 80a06fe:	280e      	cmp	r0, #14
 80a0700:	f240 8096 	bls.w	80a0830 <loop+0x1b8>
  {
    updateTime = float(deltaTick) / 1000.0;
 80a0704:	f002 f992 	bl	80a2a2c <__aeabi_ui2f>
 80a0708:	f001 fd8e 	bl	80a2228 <__aeabi_f2d>
 80a070c:	2200      	movs	r2, #0
 80a070e:	4b7d      	ldr	r3, [pc, #500]	; (80a0904 <loop+0x28c>)
 80a0710:	f001 ff08 	bl	80a2524 <__aeabi_ddiv>
 80a0714:	4d7c      	ldr	r5, [pc, #496]	; (80a0908 <loop+0x290>)
    lastControl = now;
    powerEnable = PowerDelayed->calculate(true);
 80a0716:	4b7d      	ldr	r3, [pc, #500]	; (80a090c <loop+0x294>)
  elapsedTime = double(now - start) * 1e-3;
  unsigned long deltaTick = now - lastControl;
  control = (deltaTick >= CONTROL_DELAY);
  if (control)
  {
    updateTime = float(deltaTick) / 1000.0;
 80a0718:	e9c5 0100 	strd	r0, r1, [r5]
    lastControl = now;
    powerEnable = PowerDelayed->calculate(true);
 80a071c:	6818      	ldr	r0, [r3, #0]
 80a071e:	2101      	movs	r1, #1
  unsigned long deltaTick = now - lastControl;
  control = (deltaTick >= CONTROL_DELAY);
  if (control)
  {
    updateTime = float(deltaTick) / 1000.0;
    lastControl = now;
 80a0720:	6034      	str	r4, [r6, #0]
    powerEnable = PowerDelayed->calculate(true);
 80a0722:	f7ff fead 	bl	80a0480 <_ZN7TFDelay9calculateEb>
 80a0726:	2200      	movs	r2, #0
 80a0728:	2300      	movs	r3, #0
 80a072a:	f002 f839 	bl	80a27a0 <__aeabi_dcmpeq>
 80a072e:	4e78      	ldr	r6, [pc, #480]	; (80a0910 <loop+0x298>)
 80a0730:	f04f 0a01 	mov.w	sl, #1
 80a0734:	4637      	mov	r7, r6
 80a0736:	b108      	cbz	r0, 80a073c <loop+0xc4>
 80a0738:	f04f 0a00 	mov.w	sl, #0
    buttonState = ButtonDebounce->calculate(digitalRead(BUTTON_PIN));
 80a073c:	4b75      	ldr	r3, [pc, #468]	; (80a0914 <loop+0x29c>)
 80a073e:	2002      	movs	r0, #2
  control = (deltaTick >= CONTROL_DELAY);
  if (control)
  {
    updateTime = float(deltaTick) / 1000.0;
    lastControl = now;
    powerEnable = PowerDelayed->calculate(true);
 80a0740:	f886 a000 	strb.w	sl, [r6]
    buttonState = ButtonDebounce->calculate(digitalRead(BUTTON_PIN));
 80a0744:	681e      	ldr	r6, [r3, #0]
 80a0746:	f001 f983 	bl	80a1a50 <digitalRead>
 80a074a:	1c01      	adds	r1, r0, #0
 80a074c:	bf18      	it	ne
 80a074e:	2101      	movne	r1, #1
 80a0750:	4630      	mov	r0, r6
 80a0752:	f7ff fe0b 	bl	80a036c <_ZN8Debounce9calculateEb>
    buttonRose = ButtonRise->calculate(buttonState);
 80a0756:	4b70      	ldr	r3, [pc, #448]	; (80a0918 <loop+0x2a0>)
 80a0758:	4601      	mov	r1, r0
 80a075a:	6818      	ldr	r0, [r3, #0]
 80a075c:	f7ff fe2b 	bl	80a03b6 <_ZN10DetectRise9calculateEi>
    buttonRoseDelayed = roseDelayed->calculate(buttonRose);
 80a0760:	4b6e      	ldr	r3, [pc, #440]	; (80a091c <loop+0x2a4>)
 80a0762:	4601      	mov	r1, r0
 80a0764:	6818      	ldr	r0, [r3, #0]
 80a0766:	f7ff fe8b 	bl	80a0480 <_ZN7TFDelay9calculateEb>
 80a076a:	2200      	movs	r2, #0
 80a076c:	2300      	movs	r3, #0
 80a076e:	4e6c      	ldr	r6, [pc, #432]	; (80a0920 <loop+0x2a8>)
 80a0770:	f04f 0b01 	mov.w	fp, #1
 80a0774:	f002 f814 	bl	80a27a0 <__aeabi_dcmpeq>
 80a0778:	b108      	cbz	r0, 80a077e <loop+0x106>
 80a077a:	f04f 0b00 	mov.w	fp, #0
    gramFilt = gramFilter->calculate(gram, RESET, updateTime);
 80a077e:	4b69      	ldr	r3, [pc, #420]	; (80a0924 <loop+0x2ac>)
    updateTime = float(deltaTick) / 1000.0;
    lastControl = now;
    powerEnable = PowerDelayed->calculate(true);
    buttonState = ButtonDebounce->calculate(digitalRead(BUTTON_PIN));
    buttonRose = ButtonRise->calculate(buttonState);
    buttonRoseDelayed = roseDelayed->calculate(buttonRose);
 80a0780:	f886 b000 	strb.w	fp, [r6]
    gramFilt = gramFilter->calculate(gram, RESET, updateTime);
 80a0784:	6818      	ldr	r0, [r3, #0]
 80a0786:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a078a:	6801      	ldr	r1, [r0, #0]
 80a078c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0790:	4e65      	ldr	r6, [pc, #404]	; (80a0928 <loop+0x2b0>)
 80a0792:	4642      	mov	r2, r8
 80a0794:	6833      	ldr	r3, [r6, #0]
    gramNet = gramFilt - gramNull;
 80a0796:	4d54      	ldr	r5, [pc, #336]	; (80a08e8 <loop+0x270>)
    lastControl = now;
    powerEnable = PowerDelayed->calculate(true);
    buttonState = ButtonDebounce->calculate(digitalRead(BUTTON_PIN));
    buttonRose = ButtonRise->calculate(buttonState);
    buttonRoseDelayed = roseDelayed->calculate(buttonRose);
    gramFilt = gramFilter->calculate(gram, RESET, updateTime);
 80a0798:	9300      	str	r3, [sp, #0]
 80a079a:	69c9      	ldr	r1, [r1, #28]
 80a079c:	464b      	mov	r3, r9
 80a079e:	4788      	blx	r1
 80a07a0:	4682      	mov	sl, r0
 80a07a2:	468b      	mov	fp, r1
 80a07a4:	4b61      	ldr	r3, [pc, #388]	; (80a092c <loop+0x2b4>)
 80a07a6:	e9c3 ab00 	strd	sl, fp, [r3]
    gramNet = gramFilt - gramNull;
 80a07aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a07ae:	f001 fbdb 	bl	80a1f68 <__aeabi_dsub>
 80a07b2:	4b4e      	ldr	r3, [pc, #312]	; (80a08ec <loop+0x274>)
 80a07b4:	e9c3 0100 	strd	r0, r1, [r3]
    oz = gramNet/454*16;
 80a07b8:	a347      	add	r3, pc, #284	; (adr r3, 80a08d8 <loop+0x260>)
 80a07ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a07be:	f001 feb1 	bl	80a2524 <__aeabi_ddiv>
 80a07c2:	4b4c      	ldr	r3, [pc, #304]	; (80a08f4 <loop+0x27c>)
 80a07c4:	2200      	movs	r2, #0
 80a07c6:	f001 fd83 	bl	80a22d0 <__aeabi_dmul>
 80a07ca:	4b4b      	ldr	r3, [pc, #300]	; (80a08f8 <loop+0x280>)
 80a07cc:	e9c3 0100 	strd	r0, r1, [r3]
//  }
//  if ( (buttonRose) && (now - lastButton > 200UL))
//   {
    if (buttonRoseDelayed || !powerEnable)
 80a07d0:	4b53      	ldr	r3, [pc, #332]	; (80a0920 <loop+0x2a8>)
 80a07d2:	781b      	ldrb	r3, [r3, #0]
 80a07d4:	b90b      	cbnz	r3, 80a07da <loop+0x162>
 80a07d6:	783b      	ldrb	r3, [r7, #0]
 80a07d8:	bb13      	cbnz	r3, 80a0820 <loop+0x1a8>
    {
     lastButton = now;
     gramNull = gramFilt;
 80a07da:	e9c5 ab00 	strd	sl, fp, [r5]
     Serial.printf(" -------------%4.1fg\n", gramNull);
 80a07de:	f000 fec3 	bl	80a1568 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a07e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a07e6:	2100      	movs	r1, #0
 80a07e8:	e9cd 2300 	strd	r2, r3, [sp]
     lcd->setCursor(0,0);
 80a07ec:	4d50      	ldr	r5, [pc, #320]	; (80a0930 <loop+0x2b8>)
 80a07ee:	4a51      	ldr	r2, [pc, #324]	; (80a0934 <loop+0x2bc>)
 80a07f0:	f000 fce5 	bl	80a11be <_ZN5Print11printf_implEbPKcz>
 80a07f4:	2200      	movs	r2, #0
 80a07f6:	4611      	mov	r1, r2
 80a07f8:	6828      	ldr	r0, [r5, #0]
 80a07fa:	f000 f939 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     lcd->print("--------------");
 80a07fe:	494e      	ldr	r1, [pc, #312]	; (80a0938 <loop+0x2c0>)
 80a0800:	6828      	ldr	r0, [r5, #0]
 80a0802:	f000 fbeb 	bl	80a0fdc <_ZN5Print5printEPKc>
     lcd->setCursor(0,1);
 80a0806:	2201      	movs	r2, #1
 80a0808:	2100      	movs	r1, #0
 80a080a:	6828      	ldr	r0, [r5, #0]
 80a080c:	f000 f930 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
     lcd->print("--------------");
 80a0810:	4949      	ldr	r1, [pc, #292]	; (80a0938 <loop+0x2c0>)
 80a0812:	6828      	ldr	r0, [r5, #0]
 80a0814:	f000 fbe2 	bl	80a0fdc <_ZN5Print5printEPKc>
     delay(400);
 80a0818:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80a081c:	f000 fd22 	bl	80a1264 <delay>
    }
    if (RESET)
 80a0820:	6833      	ldr	r3, [r6, #0]
 80a0822:	4a41      	ldr	r2, [pc, #260]	; (80a0928 <loop+0x2b0>)
 80a0824:	b123      	cbz	r3, 80a0830 <loop+0x1b8>
      if (RESET>2) RESET = 0;
 80a0826:	2b02      	cmp	r3, #2
 80a0828:	bfcc      	ite	gt
 80a082a:	2300      	movgt	r3, #0
      else RESET += 1;
 80a082c:	3301      	addle	r3, #1
 80a082e:	6013      	str	r3, [r2, #0]
  }
  publish = ((now - lastPublish) >= PUBLISH_DELAY);
  if (publish)
 80a0830:	f240 51db 	movw	r1, #1499	; 0x5db
    }
    if (RESET)
      if (RESET>2) RESET = 0;
      else RESET += 1;
  }
  publish = ((now - lastPublish) >= PUBLISH_DELAY);
 80a0834:	4a41      	ldr	r2, [pc, #260]	; (80a093c <loop+0x2c4>)
  if (publish)
 80a0836:	6813      	ldr	r3, [r2, #0]
 80a0838:	1ae3      	subs	r3, r4, r3
 80a083a:	428b      	cmp	r3, r1
 80a083c:	d946      	bls.n	80a08cc <loop+0x254>
  {
    lastPublish = now;
 80a083e:	6014      	str	r4, [r2, #0]
    Serial.printf(" %4.1fg, %4.1fg, %4.1fg, %4.2foz, %6.3fs\n", gram, gramFilt, gramNet, oz, updateTime);
 80a0840:	f000 fe92 	bl	80a1568 <_Z16_fetch_usbserialv>
 80a0844:	4b30      	ldr	r3, [pc, #192]	; (80a0908 <loop+0x290>)
 80a0846:	4d2c      	ldr	r5, [pc, #176]	; (80a08f8 <loop+0x280>)
 80a0848:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a084c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80a0850:	4f26      	ldr	r7, [pc, #152]	; (80a08ec <loop+0x274>)
 80a0852:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a0856:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80a085a:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a085e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80a0862:	4b32      	ldr	r3, [pc, #200]	; (80a092c <loop+0x2b4>)
    // Display
    lcd->setCursor(0,0);
 80a0864:	4c32      	ldr	r4, [pc, #200]	; (80a0930 <loop+0x2b8>)
 80a0866:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a086a:	2100      	movs	r1, #0
 80a086c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80a0870:	e9cd 8900 	strd	r8, r9, [sp]
 80a0874:	4a32      	ldr	r2, [pc, #200]	; (80a0940 <loop+0x2c8>)
 80a0876:	f000 fca2 	bl	80a11be <_ZN5Print11printf_implEbPKcz>
 80a087a:	2200      	movs	r2, #0
 80a087c:	4611      	mov	r1, r2
 80a087e:	6820      	ldr	r0, [r4, #0]
 80a0880:	f000 f8f6 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("              g");
 80a0884:	492f      	ldr	r1, [pc, #188]	; (80a0944 <loop+0x2cc>)
 80a0886:	6820      	ldr	r0, [r4, #0]
 80a0888:	f000 fba8 	bl	80a0fdc <_ZN5Print5printEPKc>
    lcd->setCursor(0,1);
 80a088c:	2201      	movs	r2, #1
 80a088e:	2100      	movs	r1, #0
 80a0890:	6820      	ldr	r0, [r4, #0]
 80a0892:	f000 f8ed 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("              oz");
 80a0896:	492c      	ldr	r1, [pc, #176]	; (80a0948 <loop+0x2d0>)
 80a0898:	6820      	ldr	r0, [r4, #0]
 80a089a:	f000 fb9f 	bl	80a0fdc <_ZN5Print5printEPKc>
    lcd->setCursor(8,0);
    lcd->print(gramNet);
 80a089e:	2602      	movs	r6, #2
    // Display
    lcd->setCursor(0,0);
    lcd->print("              g");
    lcd->setCursor(0,1);
    lcd->print("              oz");
    lcd->setCursor(8,0);
 80a08a0:	2108      	movs	r1, #8
 80a08a2:	2200      	movs	r2, #0
 80a08a4:	6820      	ldr	r0, [r4, #0]
 80a08a6:	f000 f8e3 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print(gramNet);
 80a08aa:	9600      	str	r6, [sp, #0]
 80a08ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a08b0:	6820      	ldr	r0, [r4, #0]
 80a08b2:	f000 fc7f 	bl	80a11b4 <_ZN5Print5printEdi>
    lcd->setCursor(8,1);
 80a08b6:	2201      	movs	r2, #1
 80a08b8:	6820      	ldr	r0, [r4, #0]
 80a08ba:	2108      	movs	r1, #8
 80a08bc:	f000 f8d8 	bl	80a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print(oz);
 80a08c0:	9600      	str	r6, [sp, #0]
 80a08c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a08c6:	6820      	ldr	r0, [r4, #0]
 80a08c8:	f000 fc74 	bl	80a11b4 <_ZN5Print5printEdi>
  }

}
 80a08cc:	b00b      	add	sp, #44	; 0x2c
 80a08ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a08d2:	bf00      	nop
 80a08d4:	f3af 8000 	nop.w
 80a08d8:	00000000 	.word	0x00000000
 80a08dc:	407c6000 	.word	0x407c6000
 80a08e0:	20000090 	.word	0x20000090
 80a08e4:	200000c0 	.word	0x200000c0
 80a08e8:	200000a8 	.word	0x200000a8
 80a08ec:	20000088 	.word	0x20000088
 80a08f0:	200000c4 	.word	0x200000c4
 80a08f4:	40300000 	.word	0x40300000
 80a08f8:	200000b8 	.word	0x200000b8
 80a08fc:	200000dc 	.word	0x200000dc
 80a0900:	200000e0 	.word	0x200000e0
 80a0904:	408f4000 	.word	0x408f4000
 80a0908:	200000a0 	.word	0x200000a0
 80a090c:	200000d0 	.word	0x200000d0
 80a0910:	200000d8 	.word	0x200000d8
 80a0914:	200000d4 	.word	0x200000d4
 80a0918:	200000b0 	.word	0x200000b0
 80a091c:	200000b4 	.word	0x200000b4
 80a0920:	20000074 	.word	0x20000074
 80a0924:	20000080 	.word	0x20000080
 80a0928:	20000000 	.word	0x20000000
 80a092c:	20000078 	.word	0x20000078
 80a0930:	200000cc 	.word	0x200000cc
 80a0934:	080a2e95 	.word	0x080a2e95
 80a0938:	080a2eab 	.word	0x080a2eab
 80a093c:	200000c8 	.word	0x200000c8
 80a0940:	080a2eba 	.word	0x080a2eba
 80a0944:	080a2e74 	.word	0x080a2e74
 80a0948:	080a2e84 	.word	0x080a2e84

080a094c <_GLOBAL__sub_I_lcd>:
 80a094c:	b510      	push	{r4, lr}
// Dependent includes
#include "myFilters.h"

// Global variables
LiquidCrystal_I2C   *lcd;
Hx711 scale(A2, A3);
 80a094e:	4c07      	ldr	r4, [pc, #28]	; (80a096c <_GLOBAL__sub_I_lcd+0x20>)
 80a0950:	f000 f91c 	bl	80a0b8c <HAL_Pin_Map>
 80a0954:	220d      	movs	r2, #13
 80a0956:	210c      	movs	r1, #12
 80a0958:	4620      	mov	r0, r4
 80a095a:	f7ff fc03 	bl	80a0164 <_ZN5Hx711C1Ehh>
 80a095e:	4620      	mov	r0, r4
    lcd->print(gramNet);
    lcd->setCursor(8,1);
    lcd->print(oz);
  }

}
 80a0960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
// Dependent includes
#include "myFilters.h"

// Global variables
LiquidCrystal_I2C   *lcd;
Hx711 scale(A2, A3);
 80a0964:	4a02      	ldr	r2, [pc, #8]	; (80a0970 <_GLOBAL__sub_I_lcd+0x24>)
 80a0966:	4903      	ldr	r1, [pc, #12]	; (80a0974 <_GLOBAL__sub_I_lcd+0x28>)
 80a0968:	f001 b8de 	b.w	80a1b28 <__aeabi_atexit>
 80a096c:	20000090 	.word	0x20000090
 80a0970:	20000070 	.word	0x20000070
 80a0974:	080a00bb 	.word	0x080a00bb

080a0978 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a0978:	4770      	bx	lr

080a097a <_ZN17LiquidCrystal_I2CD0Ev>:
 80a097a:	b510      	push	{r4, lr}
 80a097c:	4604      	mov	r4, r0
 80a097e:	2110      	movs	r1, #16
 80a0980:	f001 f8e0 	bl	80a1b44 <_ZdlPvj>
 80a0984:	4620      	mov	r0, r4
 80a0986:	bd10      	pop	{r4, pc}

080a0988 <_ZN17LiquidCrystal_I2CC1Ehhh>:

#include "application.h"
#include "LiquidCrystal_I2C.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a0988:	b570      	push	{r4, r5, r6, lr}
 80a098a:	4e04      	ldr	r6, [pc, #16]	; (80a099c <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a098c:	2500      	movs	r5, #0
 80a098e:	6045      	str	r5, [r0, #4]
 80a0990:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a0992:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a0994:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a0996:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a0998:	73c5      	strb	r5, [r0, #15]
}
 80a099a:	bd70      	pop	{r4, r5, r6, pc}
 80a099c:	080a2eec 	.word	0x080a2eec

080a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a09a0:	b538      	push	{r3, r4, r5, lr}
 80a09a2:	4604      	mov	r4, r0
 80a09a4:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a09a6:	f001 f899 	bl	80a1adc <_Z19__fetch_global_Wirev>
 80a09aa:	7a21      	ldrb	r1, [r4, #8]
 80a09ac:	f000 ff10 	bl	80a17d0 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((int)(_data) | _backlightval);
 80a09b0:	f001 f894 	bl	80a1adc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a09b4:	7be1      	ldrb	r1, [r4, #15]
 80a09b6:	6803      	ldr	r3, [r0, #0]
 80a09b8:	4329      	orrs	r1, r5
 80a09ba:	689b      	ldr	r3, [r3, #8]
 80a09bc:	4798      	blx	r3
        Wire.endTransmission();
 80a09be:	f001 f88d 	bl	80a1adc <_Z19__fetch_global_Wirev>
        }
 80a09c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
        Wire.beginTransmission(_Addr);
        Wire.write((int)(_data) | _backlightval);
        Wire.endTransmission();
 80a09c6:	f000 bf0b 	b.w	80a17e0 <_ZN7TwoWire15endTransmissionEv>

080a09ca <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_NOBACKLIGHT;
        expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
        _backlightval=LCD_BACKLIGHT;
 80a09ca:	2308      	movs	r3, #8
 80a09cc:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a09ce:	2100      	movs	r1, #0
 80a09d0:	f7ff bfe6 	b.w	80a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a09d4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
        Wire.beginTransmission(_Addr);
        Wire.write((int)(_data) | _backlightval);
        Wire.endTransmission();
        }

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a09d4:	b538      	push	{r3, r4, r5, lr}
 80a09d6:	4605      	mov	r5, r0
 80a09d8:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a09da:	f041 0104 	orr.w	r1, r1, #4
 80a09de:	f7ff ffdf 	bl	80a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a09e2:	2001      	movs	r0, #1
 80a09e4:	f000 f912 	bl	80a0c0c <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a09e8:	4628      	mov	r0, r5
 80a09ea:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a09ee:	f7ff ffd7 	bl	80a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a09f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a09f6:	2032      	movs	r0, #50	; 0x32
 80a09f8:	f000 b908 	b.w	80a0c0c <HAL_Delay_Microseconds>

080a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>:
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a09fc:	b538      	push	{r3, r4, r5, lr}
 80a09fe:	4604      	mov	r4, r0
 80a0a00:	460d      	mov	r5, r1
        expanderWrite(value);
 80a0a02:	f7ff ffcd 	bl	80a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a0a06:	4629      	mov	r1, r5
 80a0a08:	4620      	mov	r0, r4
}
 80a0a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
 80a0a0e:	f7ff bfe1 	b.w	80a09d4 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0a12 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0a12:	b570      	push	{r4, r5, r6, lr}
 80a0a14:	460d      	mov	r5, r1
 80a0a16:	4614      	mov	r4, r2
 80a0a18:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
 80a0a1a:	f021 010f 	bic.w	r1, r1, #15
 80a0a1e:	4311      	orrs	r1, r2
 80a0a20:	f7ff ffec 	bl	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0a24:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a0a28:	4630      	mov	r0, r6
}
 80a0a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
 80a0a2e:	b2c9      	uxtb	r1, r1
 80a0a30:	f7ff bfe4 	b.w	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0a34 <_ZN17LiquidCrystal_I2C5writeEh>:

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0a34:	b508      	push	{r3, lr}
        send(value, 1);
 80a0a36:	2201      	movs	r2, #1
 80a0a38:	f7ff ffeb 	bl	80a0a12 <_ZN17LiquidCrystal_I2C4sendEhh>
        return 0;
}
 80a0a3c:	2000      	movs	r0, #0
 80a0a3e:	bd08      	pop	{r3, pc}

080a0a40 <_ZN17LiquidCrystal_I2C7commandEh>:


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
 80a0a40:	2200      	movs	r2, #0
 80a0a42:	f7ff bfe6 	b.w	80a0a12 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0a46 <_ZN17LiquidCrystal_I2C5clearEv>:
}



/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
 80a0a46:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a0a48:	2101      	movs	r1, #1
 80a0a4a:	f7ff fff9 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0a4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0a52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0a56:	f000 b8d9 	b.w	80a0c0c <HAL_Delay_Microseconds>

080a0a5a <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 80a0a5a:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a0a5c:	2102      	movs	r1, #2
 80a0a5e:	f7ff ffef 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0a62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0a66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0a6a:	f000 b8cf 	b.w	80a0c0c <HAL_Delay_Microseconds>
	...

080a0a70 <_ZN17LiquidCrystal_I2C9setCursorEhh>:

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a0a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0a72:	4605      	mov	r5, r0
 80a0a74:	4614      	mov	r4, r2
 80a0a76:	460e      	mov	r6, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a0a78:	4b0c      	ldr	r3, [pc, #48]	; (80a0aac <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a0a7a:	f10d 0e10 	add.w	lr, sp, #16
 80a0a7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a0a80:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a0a84:	7b2b      	ldrb	r3, [r5, #12]
                row = _numlines-1;    // we count rows starting w/0
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0a86:	4628      	mov	r0, r5
        delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
        if ( row > _numlines ) {
 80a0a88:	42a3      	cmp	r3, r4
                row = _numlines-1;    // we count rows starting w/0
 80a0a8a:	bf3c      	itt	cc
 80a0a8c:	f103 34ff 	addcc.w	r4, r3, #4294967295
 80a0a90:	b2e4      	uxtbcc	r4, r4
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0a92:	ab04      	add	r3, sp, #16
 80a0a94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a0a98:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80a0a9c:	4431      	add	r1, r6
 80a0a9e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a0aa2:	b2c9      	uxtb	r1, r1
 80a0aa4:	f7ff ffcc 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0aa8:	b004      	add	sp, #16
 80a0aaa:	bd70      	pop	{r4, r5, r6, pc}
 80a0aac:	080a2efc 	.word	0x080a2efc

080a0ab0 <_ZN17LiquidCrystal_I2C7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
        _displaycontrol &= ~LCD_DISPLAYON;
        command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
 80a0ab0:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a0ab2:	7a81      	ldrb	r1, [r0, #10]
 80a0ab4:	f041 0204 	orr.w	r2, r1, #4
 80a0ab8:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a0aba:	f041 010c 	orr.w	r1, r1, #12
 80a0abe:	f7ff ffbf 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>
 80a0ac2:	bd08      	pop	{r3, pc}

080a0ac4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a0ac4:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a0ac6:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a0ac8:	bf88      	it	hi
 80a0aca:	7a41      	ldrbhi	r1, [r0, #9]
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a0acc:	4604      	mov	r4, r0
        if (lines > 1) {
                _displayfunction |= LCD_2LINE;
 80a0ace:	bf84      	itt	hi
 80a0ad0:	f041 0108 	orrhi.w	r1, r1, #8
 80a0ad4:	7241      	strbhi	r1, [r0, #9]
        }
        _numlines = lines;
 80a0ad6:	7302      	strb	r2, [r0, #12]

        // for some 1 line displays you can select a 10 pixel high font
        if ((dotsize != 0) && (lines == 1)) {
 80a0ad8:	b12b      	cbz	r3, 80a0ae6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a0ada:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a0adc:	bf02      	ittt	eq
 80a0ade:	7a43      	ldrbeq	r3, [r0, #9]
 80a0ae0:	f043 0304 	orreq.w	r3, r3, #4
 80a0ae4:	7243      	strbeq	r3, [r0, #9]
        }

        // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
        // according to datasheet, we need at least 40ms after power rises above 2.7V
        // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
        delay(50);
 80a0ae6:	2032      	movs	r0, #50	; 0x32
 80a0ae8:	f000 fbbc 	bl	80a1264 <delay>

        // Now we pull both RS and R/W low to begin commands
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a0aec:	7be1      	ldrb	r1, [r4, #15]
 80a0aee:	4620      	mov	r0, r4
 80a0af0:	f7ff ff56 	bl	80a09a0 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a0af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0af8:	f000 fbb4 	bl	80a1264 <delay>
        //put the LCD into 4 bit mode
        // this is according to the hitachi HD44780 datasheet
        // figure 24, pg 46

          // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
 80a0afc:	2130      	movs	r1, #48	; 0x30
 80a0afe:	4620      	mov	r0, r4
 80a0b00:	f7ff ff7c 	bl	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0b04:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0b08:	f000 f880 	bl	80a0c0c <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // second try
   write4bits(0x03 << 4);
 80a0b0c:	2130      	movs	r1, #48	; 0x30
 80a0b0e:	4620      	mov	r0, r4
 80a0b10:	f7ff ff74 	bl	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0b14:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0b18:	f000 f878 	bl	80a0c0c <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // third go!
   write4bits(0x03 << 4);
 80a0b1c:	2130      	movs	r1, #48	; 0x30
 80a0b1e:	4620      	mov	r0, r4
 80a0b20:	f7ff ff6c 	bl	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0b24:	2096      	movs	r0, #150	; 0x96
 80a0b26:	f000 f871 	bl	80a0c0c <HAL_Delay_Microseconds>
   delayMicroseconds(150);

   // finally, set to 4-bit interface
   write4bits(0x02 << 4);
 80a0b2a:	4620      	mov	r0, r4
 80a0b2c:	2120      	movs	r1, #32
 80a0b2e:	f7ff ff65 	bl	80a09fc <_ZN17LiquidCrystal_I2C10write4bitsEh>



        // set # lines, font size, etc.
        command(LCD_FUNCTIONSET | _displayfunction);
 80a0b32:	7a61      	ldrb	r1, [r4, #9]
 80a0b34:	4620      	mov	r0, r4
 80a0b36:	f041 0120 	orr.w	r1, r1, #32
 80a0b3a:	f7ff ff81 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>

        // turn the display on with no cursor or blinking default
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a0b3e:	2304      	movs	r3, #4
 80a0b40:	72a3      	strb	r3, [r4, #10]
        display();
 80a0b42:	4620      	mov	r0, r4
 80a0b44:	f7ff ffb4 	bl	80a0ab0 <_ZN17LiquidCrystal_I2C7displayEv>

        // clear it off
        clear();
 80a0b48:	4620      	mov	r0, r4
 80a0b4a:	f7ff ff7c 	bl	80a0a46 <_ZN17LiquidCrystal_I2C5clearEv>

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0b4e:	2302      	movs	r3, #2

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0b50:	4620      	mov	r0, r4

        // clear it off
        clear();

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0b52:	72e3      	strb	r3, [r4, #11]

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0b54:	2106      	movs	r1, #6
 80a0b56:	f7ff ff73 	bl	80a0a40 <_ZN17LiquidCrystal_I2C7commandEh>

        home();
 80a0b5a:	4620      	mov	r0, r4

}
 80a0b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);

        home();
 80a0b60:	f7ff bf7b 	b.w	80a0a5a <_ZN17LiquidCrystal_I2C4homeEv>

080a0b64 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
        init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
 80a0b64:	b510      	push	{r4, lr}
 80a0b66:	4604      	mov	r4, r0
        Wire.begin();
 80a0b68:	f000 ffb8 	bl	80a1adc <_Z19__fetch_global_Wirev>
 80a0b6c:	f000 fe2a 	bl	80a17c4 <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a0b70:	2300      	movs	r3, #0
 80a0b72:	7263      	strb	r3, [r4, #9]
        begin(_cols, _rows);
 80a0b74:	7ba2      	ldrb	r2, [r4, #14]
 80a0b76:	7b61      	ldrb	r1, [r4, #13]
 80a0b78:	4620      	mov	r0, r4
}
 80a0b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void LiquidCrystal_I2C::init_priv()
{
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
 80a0b7e:	f7ff bfa1 	b.w	80a0ac4 <_ZN17LiquidCrystal_I2C5beginEhhh>

080a0b82 <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
        init_priv();
 80a0b82:	f7ff bfef 	b.w	80a0b64 <_ZN17LiquidCrystal_I2C9init_privEv>

080a0b86 <_GLOBAL__sub_I__ZN17LiquidCrystal_I2CC2Ehhh>:
 80a0b86:	f000 b801 	b.w	80a0b8c <HAL_Pin_Map>
	...

080a0b8c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0b8c:	b508      	push	{r3, lr}
 80a0b8e:	4b02      	ldr	r3, [pc, #8]	; (80a0b98 <HAL_Pin_Map+0xc>)
 80a0b90:	681b      	ldr	r3, [r3, #0]
 80a0b92:	681b      	ldr	r3, [r3, #0]
 80a0b94:	9301      	str	r3, [sp, #4]
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	080601b0 	.word	0x080601b0

080a0b9c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0b9c:	b508      	push	{r3, lr}
 80a0b9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ba8 <HAL_Pin_Mode+0xc>)
 80a0ba0:	681b      	ldr	r3, [r3, #0]
 80a0ba2:	689b      	ldr	r3, [r3, #8]
 80a0ba4:	9301      	str	r3, [sp, #4]
 80a0ba6:	bd08      	pop	{r3, pc}
 80a0ba8:	080601b0 	.word	0x080601b0

080a0bac <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0bac:	b508      	push	{r3, lr}
 80a0bae:	4b02      	ldr	r3, [pc, #8]	; (80a0bb8 <HAL_Get_Pin_Mode+0xc>)
 80a0bb0:	681b      	ldr	r3, [r3, #0]
 80a0bb2:	68db      	ldr	r3, [r3, #12]
 80a0bb4:	9301      	str	r3, [sp, #4]
 80a0bb6:	bd08      	pop	{r3, pc}
 80a0bb8:	080601b0 	.word	0x080601b0

080a0bbc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a0bbc:	b508      	push	{r3, lr}
 80a0bbe:	4b02      	ldr	r3, [pc, #8]	; (80a0bc8 <HAL_GPIO_Write+0xc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	691b      	ldr	r3, [r3, #16]
 80a0bc4:	9301      	str	r3, [sp, #4]
 80a0bc6:	bd08      	pop	{r3, pc}
 80a0bc8:	080601b0 	.word	0x080601b0

080a0bcc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <HAL_GPIO_Read+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	695b      	ldr	r3, [r3, #20]
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601b0 	.word	0x080601b0

080a0bdc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <HAL_SPI_Init+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	69db      	ldr	r3, [r3, #28]
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601b4 	.word	0x080601b4

080a0bec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <HAL_SPI_Is_Enabled+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	6a1b      	ldr	r3, [r3, #32]
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601b4 	.word	0x080601b4

080a0bfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <HAL_RNG_GetRandomNumber+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	685b      	ldr	r3, [r3, #4]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	0806019c 	.word	0x0806019c

080a0c0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <HAL_Delay_Microseconds+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	68db      	ldr	r3, [r3, #12]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	0806019c 	.word	0x0806019c

080a0c1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	695b      	ldr	r3, [r3, #20]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	0806019c 	.word	0x0806019c

080a0c2c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <os_mutex_recursive_create+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601d0 	.word	0x080601d0

080a0c3c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <os_mutex_recursive_destroy+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601d0 	.word	0x080601d0

080a0c4c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <HAL_USART_Init+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	699b      	ldr	r3, [r3, #24]
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601c4 	.word	0x080601c4

080a0c5c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <HAL_USART_Write_Data+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601c4 	.word	0x080601c4

080a0c6c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <HAL_USART_Available_Data+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601c4 	.word	0x080601c4

080a0c7c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <HAL_USART_Read_Data+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601c4 	.word	0x080601c4

080a0c8c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <HAL_USART_Peek_Data+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601c4 	.word	0x080601c4

080a0c9c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0c9c:	b508      	push	{r3, lr}
 80a0c9e:	4b02      	ldr	r3, [pc, #8]	; (80a0ca8 <HAL_USART_Flush_Data+0xc>)
 80a0ca0:	681b      	ldr	r3, [r3, #0]
 80a0ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ca4:	9301      	str	r3, [sp, #4]
 80a0ca6:	bd08      	pop	{r3, pc}
 80a0ca8:	080601c4 	.word	0x080601c4

080a0cac <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0cac:	b508      	push	{r3, lr}
 80a0cae:	4b02      	ldr	r3, [pc, #8]	; (80a0cb8 <HAL_USART_Is_Enabled+0xc>)
 80a0cb0:	681b      	ldr	r3, [r3, #0]
 80a0cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0cb4:	9301      	str	r3, [sp, #4]
 80a0cb6:	bd08      	pop	{r3, pc}
 80a0cb8:	080601c4 	.word	0x080601c4

080a0cbc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0cbc:	b508      	push	{r3, lr}
 80a0cbe:	4b02      	ldr	r3, [pc, #8]	; (80a0cc8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0cc0:	681b      	ldr	r3, [r3, #0]
 80a0cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0cc4:	9301      	str	r3, [sp, #4]
 80a0cc6:	bd08      	pop	{r3, pc}
 80a0cc8:	080601c4 	.word	0x080601c4

080a0ccc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0ccc:	b508      	push	{r3, lr}
 80a0cce:	4b02      	ldr	r3, [pc, #8]	; (80a0cd8 <HAL_I2C_Begin+0xc>)
 80a0cd0:	681b      	ldr	r3, [r3, #0]
 80a0cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0cd4:	9301      	str	r3, [sp, #4]
 80a0cd6:	bd08      	pop	{r3, pc}
 80a0cd8:	080601ac 	.word	0x080601ac

080a0cdc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a0cdc:	b508      	push	{r3, lr}
 80a0cde:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <HAL_I2C_Begin_Transmission+0xc>)
 80a0ce0:	681b      	ldr	r3, [r3, #0]
 80a0ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0ce4:	9301      	str	r3, [sp, #4]
 80a0ce6:	bd08      	pop	{r3, pc}
 80a0ce8:	080601ac 	.word	0x080601ac

080a0cec <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0cec:	b508      	push	{r3, lr}
 80a0cee:	4b02      	ldr	r3, [pc, #8]	; (80a0cf8 <HAL_I2C_End_Transmission+0xc>)
 80a0cf0:	681b      	ldr	r3, [r3, #0]
 80a0cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0cf4:	9301      	str	r3, [sp, #4]
 80a0cf6:	bd08      	pop	{r3, pc}
 80a0cf8:	080601ac 	.word	0x080601ac

080a0cfc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0cfc:	b508      	push	{r3, lr}
 80a0cfe:	4b02      	ldr	r3, [pc, #8]	; (80a0d08 <HAL_I2C_Write_Data+0xc>)
 80a0d00:	681b      	ldr	r3, [r3, #0]
 80a0d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0d04:	9301      	str	r3, [sp, #4]
 80a0d06:	bd08      	pop	{r3, pc}
 80a0d08:	080601ac 	.word	0x080601ac

080a0d0c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d0c:	b508      	push	{r3, lr}
 80a0d0e:	4b02      	ldr	r3, [pc, #8]	; (80a0d18 <HAL_I2C_Available_Data+0xc>)
 80a0d10:	681b      	ldr	r3, [r3, #0]
 80a0d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0d14:	9301      	str	r3, [sp, #4]
 80a0d16:	bd08      	pop	{r3, pc}
 80a0d18:	080601ac 	.word	0x080601ac

080a0d1c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d1c:	b508      	push	{r3, lr}
 80a0d1e:	4b02      	ldr	r3, [pc, #8]	; (80a0d28 <HAL_I2C_Read_Data+0xc>)
 80a0d20:	681b      	ldr	r3, [r3, #0]
 80a0d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0d24:	9301      	str	r3, [sp, #4]
 80a0d26:	bd08      	pop	{r3, pc}
 80a0d28:	080601ac 	.word	0x080601ac

080a0d2c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0d2c:	b508      	push	{r3, lr}
 80a0d2e:	4b02      	ldr	r3, [pc, #8]	; (80a0d38 <HAL_I2C_Peek_Data+0xc>)
 80a0d30:	681b      	ldr	r3, [r3, #0]
 80a0d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0d34:	9301      	str	r3, [sp, #4]
 80a0d36:	bd08      	pop	{r3, pc}
 80a0d38:	080601ac 	.word	0x080601ac

080a0d3c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0d3c:	b508      	push	{r3, lr}
 80a0d3e:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <HAL_I2C_Flush_Data+0xc>)
 80a0d40:	681b      	ldr	r3, [r3, #0]
 80a0d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0d44:	9301      	str	r3, [sp, #4]
 80a0d46:	bd08      	pop	{r3, pc}
 80a0d48:	080601ac 	.word	0x080601ac

080a0d4c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0d4c:	b508      	push	{r3, lr}
 80a0d4e:	4b02      	ldr	r3, [pc, #8]	; (80a0d58 <HAL_I2C_Is_Enabled+0xc>)
 80a0d50:	681b      	ldr	r3, [r3, #0]
 80a0d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0d54:	9301      	str	r3, [sp, #4]
 80a0d56:	bd08      	pop	{r3, pc}
 80a0d58:	080601ac 	.word	0x080601ac

080a0d5c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b03      	ldr	r3, [pc, #12]	; (80a0d6c <HAL_I2C_Init+0x10>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0d66:	9301      	str	r3, [sp, #4]
 80a0d68:	bd08      	pop	{r3, pc}
 80a0d6a:	0000      	.short	0x0000
 80a0d6c:	080601ac 	.word	0x080601ac

080a0d70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <HAL_USB_USART_Init+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	681b      	ldr	r3, [r3, #0]
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601d8 	.word	0x080601d8

080a0d80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <HAL_USB_USART_Begin+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	685b      	ldr	r3, [r3, #4]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601d8 	.word	0x080601d8

080a0d90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <HAL_USB_USART_Available_Data+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	691b      	ldr	r3, [r3, #16]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601d8 	.word	0x080601d8

080a0da0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	695b      	ldr	r3, [r3, #20]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601d8 	.word	0x080601d8

080a0db0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <HAL_USB_USART_Receive_Data+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	699b      	ldr	r3, [r3, #24]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601d8 	.word	0x080601d8

080a0dc0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <HAL_USB_USART_Send_Data+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	69db      	ldr	r3, [r3, #28]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601d8 	.word	0x080601d8

080a0dd0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <HAL_USB_USART_Flush_Data+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	6a1b      	ldr	r3, [r3, #32]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601d8 	.word	0x080601d8

080a0de0 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <inet_gethostbyname+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601c0 	.word	0x080601c0

080a0df0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <set_system_mode+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	685b      	ldr	r3, [r3, #4]
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601a4 	.word	0x080601a4

080a0e00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <system_delay_ms+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	695b      	ldr	r3, [r3, #20]
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601a4 	.word	0x080601a4

080a0e10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b03      	ldr	r3, [pc, #12]	; (80a0e20 <system_ctrl_set_app_request_handler+0x10>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0e1a:	9301      	str	r3, [sp, #4]
 80a0e1c:	bd08      	pop	{r3, pc}
 80a0e1e:	0000      	.short	0x0000
 80a0e20:	080601a4 	.word	0x080601a4

080a0e24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0e24:	b508      	push	{r3, lr}
 80a0e26:	4b03      	ldr	r3, [pc, #12]	; (80a0e34 <system_ctrl_set_result+0x10>)
 80a0e28:	681b      	ldr	r3, [r3, #0]
 80a0e2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0e2e:	9301      	str	r3, [sp, #4]
 80a0e30:	bd08      	pop	{r3, pc}
 80a0e32:	0000      	.short	0x0000
 80a0e34:	080601a4 	.word	0x080601a4

080a0e38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e38:	b508      	push	{r3, lr}
 80a0e3a:	4b02      	ldr	r3, [pc, #8]	; (80a0e44 <network_connect+0xc>)
 80a0e3c:	681b      	ldr	r3, [r3, #0]
 80a0e3e:	685b      	ldr	r3, [r3, #4]
 80a0e40:	9301      	str	r3, [sp, #4]
 80a0e42:	bd08      	pop	{r3, pc}
 80a0e44:	080601c8 	.word	0x080601c8

080a0e48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0e48:	b508      	push	{r3, lr}
 80a0e4a:	4b02      	ldr	r3, [pc, #8]	; (80a0e54 <network_connecting+0xc>)
 80a0e4c:	681b      	ldr	r3, [r3, #0]
 80a0e4e:	689b      	ldr	r3, [r3, #8]
 80a0e50:	9301      	str	r3, [sp, #4]
 80a0e52:	bd08      	pop	{r3, pc}
 80a0e54:	080601c8 	.word	0x080601c8

080a0e58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0e58:	b508      	push	{r3, lr}
 80a0e5a:	4b02      	ldr	r3, [pc, #8]	; (80a0e64 <network_disconnect+0xc>)
 80a0e5c:	681b      	ldr	r3, [r3, #0]
 80a0e5e:	68db      	ldr	r3, [r3, #12]
 80a0e60:	9301      	str	r3, [sp, #4]
 80a0e62:	bd08      	pop	{r3, pc}
 80a0e64:	080601c8 	.word	0x080601c8

080a0e68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0e68:	b508      	push	{r3, lr}
 80a0e6a:	4b02      	ldr	r3, [pc, #8]	; (80a0e74 <network_ready+0xc>)
 80a0e6c:	681b      	ldr	r3, [r3, #0]
 80a0e6e:	691b      	ldr	r3, [r3, #16]
 80a0e70:	9301      	str	r3, [sp, #4]
 80a0e72:	bd08      	pop	{r3, pc}
 80a0e74:	080601c8 	.word	0x080601c8

080a0e78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e78:	b508      	push	{r3, lr}
 80a0e7a:	4b02      	ldr	r3, [pc, #8]	; (80a0e84 <network_on+0xc>)
 80a0e7c:	681b      	ldr	r3, [r3, #0]
 80a0e7e:	695b      	ldr	r3, [r3, #20]
 80a0e80:	9301      	str	r3, [sp, #4]
 80a0e82:	bd08      	pop	{r3, pc}
 80a0e84:	080601c8 	.word	0x080601c8

080a0e88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0e88:	b508      	push	{r3, lr}
 80a0e8a:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <network_off+0xc>)
 80a0e8c:	681b      	ldr	r3, [r3, #0]
 80a0e8e:	699b      	ldr	r3, [r3, #24]
 80a0e90:	9301      	str	r3, [sp, #4]
 80a0e92:	bd08      	pop	{r3, pc}
 80a0e94:	080601c8 	.word	0x080601c8

080a0e98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0e98:	b508      	push	{r3, lr}
 80a0e9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ea4 <network_listen+0xc>)
 80a0e9c:	681b      	ldr	r3, [r3, #0]
 80a0e9e:	69db      	ldr	r3, [r3, #28]
 80a0ea0:	9301      	str	r3, [sp, #4]
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	080601c8 	.word	0x080601c8

080a0ea8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0ea8:	b508      	push	{r3, lr}
 80a0eaa:	4b02      	ldr	r3, [pc, #8]	; (80a0eb4 <network_listening+0xc>)
 80a0eac:	681b      	ldr	r3, [r3, #0]
 80a0eae:	6a1b      	ldr	r3, [r3, #32]
 80a0eb0:	9301      	str	r3, [sp, #4]
 80a0eb2:	bd08      	pop	{r3, pc}
 80a0eb4:	080601c8 	.word	0x080601c8

080a0eb8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0eb8:	b508      	push	{r3, lr}
 80a0eba:	4b02      	ldr	r3, [pc, #8]	; (80a0ec4 <network_set_listen_timeout+0xc>)
 80a0ebc:	681b      	ldr	r3, [r3, #0]
 80a0ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ec0:	9301      	str	r3, [sp, #4]
 80a0ec2:	bd08      	pop	{r3, pc}
 80a0ec4:	080601c8 	.word	0x080601c8

080a0ec8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0ec8:	b508      	push	{r3, lr}
 80a0eca:	4b02      	ldr	r3, [pc, #8]	; (80a0ed4 <network_get_listen_timeout+0xc>)
 80a0ecc:	681b      	ldr	r3, [r3, #0]
 80a0ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0ed0:	9301      	str	r3, [sp, #4]
 80a0ed2:	bd08      	pop	{r3, pc}
 80a0ed4:	080601c8 	.word	0x080601c8

080a0ed8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0ed8:	b508      	push	{r3, lr}
 80a0eda:	4b02      	ldr	r3, [pc, #8]	; (80a0ee4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0edc:	681b      	ldr	r3, [r3, #0]
 80a0ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ee0:	9301      	str	r3, [sp, #4]
 80a0ee2:	bd08      	pop	{r3, pc}
 80a0ee4:	080601cc 	.word	0x080601cc

080a0ee8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0ee8:	b508      	push	{r3, lr}
 80a0eea:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <malloc+0xc>)
 80a0eec:	681b      	ldr	r3, [r3, #0]
 80a0eee:	681b      	ldr	r3, [r3, #0]
 80a0ef0:	9301      	str	r3, [sp, #4]
 80a0ef2:	bd08      	pop	{r3, pc}
 80a0ef4:	080601a0 	.word	0x080601a0

080a0ef8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0ef8:	b508      	push	{r3, lr}
 80a0efa:	4b02      	ldr	r3, [pc, #8]	; (80a0f04 <free+0xc>)
 80a0efc:	681b      	ldr	r3, [r3, #0]
 80a0efe:	685b      	ldr	r3, [r3, #4]
 80a0f00:	9301      	str	r3, [sp, #4]
 80a0f02:	bd08      	pop	{r3, pc}
 80a0f04:	080601a0 	.word	0x080601a0

080a0f08 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a0f08:	b508      	push	{r3, lr}
 80a0f0a:	4b02      	ldr	r3, [pc, #8]	; (80a0f14 <vsnprintf+0xc>)
 80a0f0c:	681b      	ldr	r3, [r3, #0]
 80a0f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0f10:	9301      	str	r3, [sp, #4]
 80a0f12:	bd08      	pop	{r3, pc}
 80a0f14:	080601a0 	.word	0x080601a0

080a0f18 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0f18:	b570      	push	{r4, r5, r6, lr}
 80a0f1a:	4604      	mov	r4, r0
 80a0f1c:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0f1e:	2500      	movs	r5, #0
 80a0f20:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0f24:	f7ff fe82 	bl	80a0c2c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0f28:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0f2a:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0f2c:	f7ff fe56 	bl	80a0bdc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0f30:	6065      	str	r5, [r4, #4]
}
 80a0f32:	4620      	mov	r0, r4
 80a0f34:	bd70      	pop	{r4, r5, r6, pc}

080a0f36 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0f36:	7800      	ldrb	r0, [r0, #0]
 80a0f38:	f7ff be58 	b.w	80a0bec <HAL_SPI_Is_Enabled>

080a0f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0f3c:	b510      	push	{r4, lr}
 80a0f3e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0f40:	6800      	ldr	r0, [r0, #0]
 80a0f42:	b118      	cbz	r0, 80a0f4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0f44:	f7ff ffd8 	bl	80a0ef8 <free>
            wakeupSource_ = nullptr;
 80a0f48:	2300      	movs	r3, #0
 80a0f4a:	6023      	str	r3, [r4, #0]
 80a0f4c:	bd10      	pop	{r4, pc}

080a0f4e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0f4e:	b510      	push	{r4, lr}
 80a0f50:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0f52:	f7ff fff3 	bl	80a0f3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0f56:	4620      	mov	r0, r4
 80a0f58:	bd10      	pop	{r4, pc}
	...

080a0f5c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0f60:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0f62:	4c08      	ldr	r4, [pc, #32]	; (80a0f84 <_GLOBAL__sub_I_System+0x28>)
 80a0f64:	2000      	movs	r0, #0
 80a0f66:	6020      	str	r0, [r4, #0]
 80a0f68:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0f6a:	71a0      	strb	r0, [r4, #6]
 80a0f6c:	8120      	strh	r0, [r4, #8]
 80a0f6e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0f70:	f7ff ff3e 	bl	80a0df0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0f74:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0f7a:	4a03      	ldr	r2, [pc, #12]	; (80a0f88 <_GLOBAL__sub_I_System+0x2c>)
 80a0f7c:	4903      	ldr	r1, [pc, #12]	; (80a0f8c <_GLOBAL__sub_I_System+0x30>)
 80a0f7e:	f000 bdd3 	b.w	80a1b28 <__aeabi_atexit>
 80a0f82:	bf00      	nop
 80a0f84:	200000e4 	.word	0x200000e4
 80a0f88:	20000070 	.word	0x20000070
 80a0f8c:	080a0f4f 	.word	0x080a0f4f

080a0f90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0f92:	4606      	mov	r6, r0
 80a0f94:	460d      	mov	r5, r1
 80a0f96:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0f98:	2400      	movs	r4, #0
  while (size--) {
 80a0f9a:	42bd      	cmp	r5, r7
 80a0f9c:	d00c      	beq.n	80a0fb8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0f9e:	6833      	ldr	r3, [r6, #0]
 80a0fa0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0fa4:	689b      	ldr	r3, [r3, #8]
 80a0fa6:	4630      	mov	r0, r6
 80a0fa8:	4798      	blx	r3
     if (chunk>=0)
 80a0faa:	2800      	cmp	r0, #0
 80a0fac:	db01      	blt.n	80a0fb2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0fae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0fb0:	e7f3      	b.n	80a0f9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0fb2:	2c00      	cmp	r4, #0
 80a0fb4:	bf08      	it	eq
 80a0fb6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0fb8:	4620      	mov	r0, r4
 80a0fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0fbc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0fbc:	b570      	push	{r4, r5, r6, lr}
 80a0fbe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0fc0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0fc2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0fc4:	b149      	cbz	r1, 80a0fda <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0fc6:	f001 ff23 	bl	80a2e10 <strlen>
 80a0fca:	682b      	ldr	r3, [r5, #0]
 80a0fcc:	4602      	mov	r2, r0
 80a0fce:	4621      	mov	r1, r4
 80a0fd0:	4628      	mov	r0, r5
    }
 80a0fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0fd6:	68db      	ldr	r3, [r3, #12]
 80a0fd8:	4718      	bx	r3
    }
 80a0fda:	bd70      	pop	{r4, r5, r6, pc}

080a0fdc <_ZN5Print5printEPKc>:
 80a0fdc:	b508      	push	{r3, lr}
 80a0fde:	f7ff ffed 	bl	80a0fbc <_ZN5Print5writeEPKc>
 80a0fe2:	bd08      	pop	{r3, pc}

080a0fe4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0fe4:	6803      	ldr	r3, [r0, #0]
 80a0fe6:	689b      	ldr	r3, [r3, #8]
 80a0fe8:	4718      	bx	r3

080a0fea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0fea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0fec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0fee:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0ff0:	f7ff fff8 	bl	80a0fe4 <_ZN5Print5printEc>
  n += print('\n');
 80a0ff4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0ff6:	4604      	mov	r4, r0
  n += print('\n');
 80a0ff8:	4628      	mov	r0, r5
 80a0ffa:	f7ff fff3 	bl	80a0fe4 <_ZN5Print5printEc>
  return n;
}
 80a0ffe:	4420      	add	r0, r4
 80a1000:	bd38      	pop	{r3, r4, r5, pc}

080a1002 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1002:	2a01      	cmp	r2, #1
 80a1004:	bf98      	it	ls
 80a1006:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1008:	b530      	push	{r4, r5, lr}
 80a100a:	460b      	mov	r3, r1
 80a100c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a100e:	2100      	movs	r1, #0
 80a1010:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1014:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a1018:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a101c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1020:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1022:	2b09      	cmp	r3, #9
 80a1024:	bf94      	ite	ls
 80a1026:	3330      	addls	r3, #48	; 0x30
 80a1028:	3337      	addhi	r3, #55	; 0x37
 80a102a:	b2db      	uxtb	r3, r3
 80a102c:	4621      	mov	r1, r4
 80a102e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1032:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1034:	2d00      	cmp	r5, #0
 80a1036:	d1ef      	bne.n	80a1018 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1038:	f7ff ffc0 	bl	80a0fbc <_ZN5Print5writeEPKc>
}
 80a103c:	b00b      	add	sp, #44	; 0x2c
 80a103e:	bd30      	pop	{r4, r5, pc}

080a1040 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1044:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1046:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1048:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a104a:	4617      	mov	r7, r2
 80a104c:	461e      	mov	r6, r3
 80a104e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1052:	f001 fbd7 	bl	80a2804 <__aeabi_dcmpun>
 80a1056:	b108      	cbz	r0, 80a105c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1058:	494d      	ldr	r1, [pc, #308]	; (80a1190 <_ZN5Print10printFloatEdh+0x150>)
 80a105a:	e012      	b.n	80a1082 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a105c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1060:	f04f 32ff 	mov.w	r2, #4294967295
 80a1064:	4b4b      	ldr	r3, [pc, #300]	; (80a1194 <_ZN5Print10printFloatEdh+0x154>)
 80a1066:	4638      	mov	r0, r7
 80a1068:	4621      	mov	r1, r4
 80a106a:	f001 fbcb 	bl	80a2804 <__aeabi_dcmpun>
 80a106e:	b968      	cbnz	r0, 80a108c <_ZN5Print10printFloatEdh+0x4c>
 80a1070:	f04f 32ff 	mov.w	r2, #4294967295
 80a1074:	4b47      	ldr	r3, [pc, #284]	; (80a1194 <_ZN5Print10printFloatEdh+0x154>)
 80a1076:	4638      	mov	r0, r7
 80a1078:	4621      	mov	r1, r4
 80a107a:	f001 fba5 	bl	80a27c8 <__aeabi_dcmple>
 80a107e:	b928      	cbnz	r0, 80a108c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1080:	4945      	ldr	r1, [pc, #276]	; (80a1198 <_ZN5Print10printFloatEdh+0x158>)
 80a1082:	4640      	mov	r0, r8
 80a1084:	f7ff ff9a 	bl	80a0fbc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a108c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1090:	4b42      	ldr	r3, [pc, #264]	; (80a119c <_ZN5Print10printFloatEdh+0x15c>)
 80a1092:	4638      	mov	r0, r7
 80a1094:	4631      	mov	r1, r6
 80a1096:	f001 fbab 	bl	80a27f0 <__aeabi_dcmpgt>
 80a109a:	b108      	cbz	r0, 80a10a0 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a109c:	4940      	ldr	r1, [pc, #256]	; (80a11a0 <_ZN5Print10printFloatEdh+0x160>)
 80a109e:	e7f0      	b.n	80a1082 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a10a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a10a4:	4b3f      	ldr	r3, [pc, #252]	; (80a11a4 <_ZN5Print10printFloatEdh+0x164>)
 80a10a6:	4638      	mov	r0, r7
 80a10a8:	4631      	mov	r1, r6
 80a10aa:	f001 fb83 	bl	80a27b4 <__aeabi_dcmplt>
 80a10ae:	2800      	cmp	r0, #0
 80a10b0:	d1f4      	bne.n	80a109c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a10b2:	2200      	movs	r2, #0
 80a10b4:	2300      	movs	r3, #0
 80a10b6:	4638      	mov	r0, r7
 80a10b8:	4631      	mov	r1, r6
 80a10ba:	f001 fb7b 	bl	80a27b4 <__aeabi_dcmplt>
 80a10be:	b138      	cbz	r0, 80a10d0 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a10c0:	212d      	movs	r1, #45	; 0x2d
 80a10c2:	4640      	mov	r0, r8
 80a10c4:	f7ff ff8e 	bl	80a0fe4 <_ZN5Print5printEc>
     number = -number;
 80a10c8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a10cc:	4604      	mov	r4, r0
 80a10ce:	e000      	b.n	80a10d2 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a10d0:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a10d2:	4935      	ldr	r1, [pc, #212]	; (80a11a8 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a10d4:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a10d8:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a10da:	fa5f f389 	uxtb.w	r3, r9
 80a10de:	429d      	cmp	r5, r3
 80a10e0:	d906      	bls.n	80a10f0 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a10e2:	2200      	movs	r2, #0
 80a10e4:	4b31      	ldr	r3, [pc, #196]	; (80a11ac <_ZN5Print10printFloatEdh+0x16c>)
 80a10e6:	f001 fa1d 	bl	80a2524 <__aeabi_ddiv>
 80a10ea:	f109 0901 	add.w	r9, r9, #1
 80a10ee:	e7f4      	b.n	80a10da <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a10f0:	463a      	mov	r2, r7
 80a10f2:	4633      	mov	r3, r6
 80a10f4:	f000 ff3a 	bl	80a1f6c <__adddf3>
 80a10f8:	460f      	mov	r7, r1
 80a10fa:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a10fc:	f001 fbc0 	bl	80a2880 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1100:	220a      	movs	r2, #10
 80a1102:	4601      	mov	r1, r0
 80a1104:	4681      	mov	r9, r0
 80a1106:	4640      	mov	r0, r8
 80a1108:	f7ff ff7b 	bl	80a1002 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a110c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a110e:	b3e5      	cbz	r5, 80a118a <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1110:	4648      	mov	r0, r9
 80a1112:	f001 f867 	bl	80a21e4 <__aeabi_ui2d>
 80a1116:	4602      	mov	r2, r0
 80a1118:	460b      	mov	r3, r1
 80a111a:	4630      	mov	r0, r6
 80a111c:	4639      	mov	r1, r7
 80a111e:	f000 ff23 	bl	80a1f68 <__aeabi_dsub>
 80a1122:	4606      	mov	r6, r0
 80a1124:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1126:	4640      	mov	r0, r8
 80a1128:	4921      	ldr	r1, [pc, #132]	; (80a11b0 <_ZN5Print10printFloatEdh+0x170>)
 80a112a:	f7ff ff47 	bl	80a0fbc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a112e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1130:	2200      	movs	r2, #0
 80a1132:	4b1e      	ldr	r3, [pc, #120]	; (80a11ac <_ZN5Print10printFloatEdh+0x16c>)
 80a1134:	4630      	mov	r0, r6
 80a1136:	4639      	mov	r1, r7
 80a1138:	f001 f8ca 	bl	80a22d0 <__aeabi_dmul>
 80a113c:	4606      	mov	r6, r0
 80a113e:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1140:	f001 fb76 	bl	80a2830 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a1144:	f1b0 0a00 	subs.w	sl, r0, #0
 80a1148:	da07      	bge.n	80a115a <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a114a:	212d      	movs	r1, #45	; 0x2d
 80a114c:	4640      	mov	r0, r8
 80a114e:	f7ff ff49 	bl	80a0fe4 <_ZN5Print5printEc>
            val = -n;
 80a1152:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a1156:	4681      	mov	r9, r0
 80a1158:	e002      	b.n	80a1160 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a115a:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a115c:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1160:	220a      	movs	r2, #10
 80a1162:	4640      	mov	r0, r8
 80a1164:	f7ff ff4d 	bl	80a1002 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a1168:	4448      	add	r0, r9
 80a116a:	4404      	add	r4, r0
    remainder -= toPrint;
 80a116c:	4650      	mov	r0, sl
 80a116e:	f001 f849 	bl	80a2204 <__aeabi_i2d>
 80a1172:	4602      	mov	r2, r0
 80a1174:	460b      	mov	r3, r1
 80a1176:	4630      	mov	r0, r6
 80a1178:	4639      	mov	r1, r7
 80a117a:	f000 fef5 	bl	80a1f68 <__aeabi_dsub>
 80a117e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1180:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1184:	4606      	mov	r6, r0
 80a1186:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1188:	d1d2      	bne.n	80a1130 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a118a:	4620      	mov	r0, r4
 80a118c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1190:	080a2f0c 	.word	0x080a2f0c
 80a1194:	7fefffff 	.word	0x7fefffff
 80a1198:	080a2f16 	.word	0x080a2f16
 80a119c:	41efffff 	.word	0x41efffff
 80a11a0:	080a2f10 	.word	0x080a2f10
 80a11a4:	c1efffff 	.word	0xc1efffff
 80a11a8:	3fe00000 	.word	0x3fe00000
 80a11ac:	40240000 	.word	0x40240000
 80a11b0:	080a2f14 	.word	0x080a2f14

080a11b4 <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a11b4:	f89d 1000 	ldrb.w	r1, [sp]
 80a11b8:	9100      	str	r1, [sp, #0]
 80a11ba:	f7ff bf41 	b.w	80a1040 <_ZN5Print10printFloatEdh>

080a11be <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a11be:	b40c      	push	{r2, r3}
 80a11c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a11c4:	b087      	sub	sp, #28
 80a11c6:	af00      	add	r7, sp, #0
 80a11c8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a11cc:	f854 9b04 	ldr.w	r9, [r4], #4
 80a11d0:	4605      	mov	r5, r0
 80a11d2:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a11d4:	4623      	mov	r3, r4
 80a11d6:	464a      	mov	r2, r9
 80a11d8:	2114      	movs	r1, #20
 80a11da:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a11dc:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a11de:	f7ff fe93 	bl	80a0f08 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a11e2:	2813      	cmp	r0, #19
 80a11e4:	d805      	bhi.n	80a11f2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a11e6:	1d39      	adds	r1, r7, #4
 80a11e8:	4628      	mov	r0, r5
 80a11ea:	f7ff fee7 	bl	80a0fbc <_ZN5Print5writeEPKc>
 80a11ee:	4604      	mov	r4, r0
 80a11f0:	e013      	b.n	80a121a <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a11f2:	f100 0308 	add.w	r3, r0, #8
 80a11f6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a11fa:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a11fc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a1200:	1c41      	adds	r1, r0, #1
 80a1202:	4623      	mov	r3, r4
 80a1204:	464a      	mov	r2, r9
 80a1206:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a1208:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a120a:	f7ff fe7d 	bl	80a0f08 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a120e:	4669      	mov	r1, sp
 80a1210:	4628      	mov	r0, r5
 80a1212:	f7ff fed3 	bl	80a0fbc <_ZN5Print5writeEPKc>
 80a1216:	4604      	mov	r4, r0
 80a1218:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a121a:	b11e      	cbz	r6, 80a1224 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a121c:	4628      	mov	r0, r5
 80a121e:	f7ff fee4 	bl	80a0fea <_ZN5Print7printlnEv>
 80a1222:	4404      	add	r4, r0
    return n;
}
 80a1224:	4620      	mov	r0, r4
 80a1226:	371c      	adds	r7, #28
 80a1228:	46bd      	mov	sp, r7
 80a122a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a122e:	b002      	add	sp, #8
 80a1230:	4770      	bx	lr

080a1232 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1232:	2300      	movs	r3, #0
 80a1234:	461a      	mov	r2, r3
 80a1236:	4619      	mov	r1, r3
 80a1238:	6840      	ldr	r0, [r0, #4]
 80a123a:	f7ff be1d 	b.w	80a0e78 <network_on>
	...

080a1240 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1240:	4a01      	ldr	r2, [pc, #4]	; (80a1248 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1244:	601a      	str	r2, [r3, #0]
 80a1246:	4770      	bx	lr
 80a1248:	080a2f90 	.word	0x080a2f90
 80a124c:	200000f0 	.word	0x200000f0

080a1250 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1250:	4b02      	ldr	r3, [pc, #8]	; (80a125c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1252:	681a      	ldr	r2, [r3, #0]
 80a1254:	4b02      	ldr	r3, [pc, #8]	; (80a1260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1256:	601a      	str	r2, [r3, #0]
 80a1258:	4770      	bx	lr
 80a125a:	bf00      	nop
 80a125c:	20000004 	.word	0x20000004
 80a1260:	200000f4 	.word	0x200000f4

080a1264 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1264:	2100      	movs	r1, #0
 80a1266:	f7ff bdcb 	b.w	80a0e00 <system_delay_ms>

080a126a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a126a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a126c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a126e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1270:	b113      	cbz	r3, 80a1278 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1272:	2203      	movs	r2, #3
 80a1274:	4601      	mov	r1, r0
 80a1276:	4798      	blx	r3
    }
 80a1278:	4620      	mov	r0, r4
 80a127a:	bd10      	pop	{r4, pc}

080a127c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a127c:	b510      	push	{r4, lr}
 80a127e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1280:	f7ff fff3 	bl	80a126a <_ZNSt14_Function_baseD1Ev>
 80a1284:	4620      	mov	r0, r4
 80a1286:	bd10      	pop	{r4, pc}

080a1288 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1288:	4803      	ldr	r0, [pc, #12]	; (80a1298 <_GLOBAL__sub_I_RGB+0x10>)
 80a128a:	2300      	movs	r3, #0
 80a128c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a128e:	4a03      	ldr	r2, [pc, #12]	; (80a129c <_GLOBAL__sub_I_RGB+0x14>)
 80a1290:	4903      	ldr	r1, [pc, #12]	; (80a12a0 <_GLOBAL__sub_I_RGB+0x18>)
 80a1292:	f000 bc49 	b.w	80a1b28 <__aeabi_atexit>
 80a1296:	bf00      	nop
 80a1298:	200000f8 	.word	0x200000f8
 80a129c:	20000070 	.word	0x20000070
 80a12a0:	080a127d 	.word	0x080a127d

080a12a4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a12a4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a12a6:	4b14      	ldr	r3, [pc, #80]	; (80a12f8 <serialEventRun+0x54>)
 80a12a8:	b133      	cbz	r3, 80a12b8 <serialEventRun+0x14>
 80a12aa:	f000 f95d 	bl	80a1568 <_Z16_fetch_usbserialv>
 80a12ae:	6803      	ldr	r3, [r0, #0]
 80a12b0:	691b      	ldr	r3, [r3, #16]
 80a12b2:	4798      	blx	r3
 80a12b4:	2800      	cmp	r0, #0
 80a12b6:	dc16      	bgt.n	80a12e6 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a12b8:	4b10      	ldr	r3, [pc, #64]	; (80a12fc <serialEventRun+0x58>)
 80a12ba:	b133      	cbz	r3, 80a12ca <serialEventRun+0x26>
 80a12bc:	f000 fa04 	bl	80a16c8 <_Z22__fetch_global_Serial1v>
 80a12c0:	6803      	ldr	r3, [r0, #0]
 80a12c2:	691b      	ldr	r3, [r3, #16]
 80a12c4:	4798      	blx	r3
 80a12c6:	2800      	cmp	r0, #0
 80a12c8:	dc10      	bgt.n	80a12ec <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a12ca:	4b0d      	ldr	r3, [pc, #52]	; (80a1300 <serialEventRun+0x5c>)
 80a12cc:	b10b      	cbz	r3, 80a12d2 <serialEventRun+0x2e>
 80a12ce:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a12d2:	4b0c      	ldr	r3, [pc, #48]	; (80a1304 <serialEventRun+0x60>)
 80a12d4:	b17b      	cbz	r3, 80a12f6 <serialEventRun+0x52>
 80a12d6:	f000 f975 	bl	80a15c4 <_Z17_fetch_usbserial1v>
 80a12da:	6803      	ldr	r3, [r0, #0]
 80a12dc:	691b      	ldr	r3, [r3, #16]
 80a12de:	4798      	blx	r3
 80a12e0:	2800      	cmp	r0, #0
 80a12e2:	dc06      	bgt.n	80a12f2 <serialEventRun+0x4e>
 80a12e4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a12e6:	f3af 8000 	nop.w
 80a12ea:	e7e5      	b.n	80a12b8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a12ec:	f3af 8000 	nop.w
 80a12f0:	e7eb      	b.n	80a12ca <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a12f2:	f3af 8000 	nop.w
 80a12f6:	bd08      	pop	{r3, pc}
	...

080a1308 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1308:	b508      	push	{r3, lr}
	serialEventRun();
 80a130a:	f7ff ffcb 	bl	80a12a4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a130e:	f7ff fc85 	bl	80a0c1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1312:	4b01      	ldr	r3, [pc, #4]	; (80a1318 <_post_loop+0x10>)
 80a1314:	6018      	str	r0, [r3, #0]
 80a1316:	bd08      	pop	{r3, pc}
 80a1318:	20000180 	.word	0x20000180

080a131c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a131c:	4802      	ldr	r0, [pc, #8]	; (80a1328 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a131e:	4a03      	ldr	r2, [pc, #12]	; (80a132c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1320:	4903      	ldr	r1, [pc, #12]	; (80a1330 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1322:	1a12      	subs	r2, r2, r0
 80a1324:	f001 bd38 	b.w	80a2d98 <memcpy>
 80a1328:	40024000 	.word	0x40024000
 80a132c:	40024004 	.word	0x40024004
 80a1330:	080a31d0 	.word	0x080a31d0

080a1334 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1334:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1336:	2300      	movs	r3, #0
 80a1338:	9300      	str	r3, [sp, #0]
 80a133a:	461a      	mov	r2, r3
 80a133c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1340:	f7ff fd70 	bl	80a0e24 <system_ctrl_set_result>
}
 80a1344:	b003      	add	sp, #12
 80a1346:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a134c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a134c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a134e:	8843      	ldrh	r3, [r0, #2]
 80a1350:	2b0a      	cmp	r3, #10
 80a1352:	d008      	beq.n	80a1366 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1354:	2b50      	cmp	r3, #80	; 0x50
 80a1356:	d109      	bne.n	80a136c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1358:	4b09      	ldr	r3, [pc, #36]	; (80a1380 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a135a:	681b      	ldr	r3, [r3, #0]
 80a135c:	b13b      	cbz	r3, 80a136e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a135e:	b003      	add	sp, #12
 80a1360:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1364:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1366:	f7ff ffe5 	bl	80a1334 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a136a:	e006      	b.n	80a137a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a136c:	2300      	movs	r3, #0
 80a136e:	9300      	str	r3, [sp, #0]
 80a1370:	461a      	mov	r2, r3
 80a1372:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1376:	f7ff fd55 	bl	80a0e24 <system_ctrl_set_result>
        break;
    }
}
 80a137a:	b003      	add	sp, #12
 80a137c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1380:	20000108 	.word	0x20000108

080a1384 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1384:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1386:	4c10      	ldr	r4, [pc, #64]	; (80a13c8 <module_user_init_hook+0x44>)
 80a1388:	4d10      	ldr	r5, [pc, #64]	; (80a13cc <module_user_init_hook+0x48>)
 80a138a:	6823      	ldr	r3, [r4, #0]
 80a138c:	42ab      	cmp	r3, r5
 80a138e:	4b10      	ldr	r3, [pc, #64]	; (80a13d0 <module_user_init_hook+0x4c>)
 80a1390:	bf0c      	ite	eq
 80a1392:	2201      	moveq	r2, #1
 80a1394:	2200      	movne	r2, #0
 80a1396:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1398:	d002      	beq.n	80a13a0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a139a:	f7ff ffbf 	bl	80a131c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a139e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a13a0:	f7ff fc2c 	bl	80a0bfc <HAL_RNG_GetRandomNumber>
 80a13a4:	4604      	mov	r4, r0
    srand(seed);
 80a13a6:	f001 fd0b 	bl	80a2dc0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a13aa:	4b0a      	ldr	r3, [pc, #40]	; (80a13d4 <module_user_init_hook+0x50>)
 80a13ac:	b113      	cbz	r3, 80a13b4 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a13ae:	4620      	mov	r0, r4
 80a13b0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a13b4:	2100      	movs	r1, #0
 80a13b6:	4807      	ldr	r0, [pc, #28]	; (80a13d4 <module_user_init_hook+0x50>)
 80a13b8:	f7ff fd8e 	bl	80a0ed8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a13bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a13c0:	2100      	movs	r1, #0
 80a13c2:	4805      	ldr	r0, [pc, #20]	; (80a13d8 <module_user_init_hook+0x54>)
 80a13c4:	f7ff bd24 	b.w	80a0e10 <system_ctrl_set_app_request_handler>
 80a13c8:	40024000 	.word	0x40024000
 80a13cc:	9a271c1e 	.word	0x9a271c1e
 80a13d0:	2000010c 	.word	0x2000010c
 80a13d4:	00000000 	.word	0x00000000
 80a13d8:	080a134d 	.word	0x080a134d

080a13dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a13dc:	4770      	bx	lr

080a13de <_ZN9IPAddressD0Ev>:
 80a13de:	b510      	push	{r4, lr}
 80a13e0:	4604      	mov	r4, r0
 80a13e2:	2118      	movs	r1, #24
 80a13e4:	f000 fbae 	bl	80a1b44 <_ZdlPvj>
 80a13e8:	4620      	mov	r0, r4
 80a13ea:	bd10      	pop	{r4, pc}

080a13ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13ee:	460f      	mov	r7, r1
 80a13f0:	f100 0608 	add.w	r6, r0, #8
 80a13f4:	1d05      	adds	r5, r0, #4
 80a13f6:	2400      	movs	r4, #0
 80a13f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a13fc:	220a      	movs	r2, #10
 80a13fe:	4638      	mov	r0, r7
 80a1400:	f7ff fdff 	bl	80a1002 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1404:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1406:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1408:	d007      	beq.n	80a141a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a140a:	2c00      	cmp	r4, #0
 80a140c:	d0f4      	beq.n	80a13f8 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a140e:	212e      	movs	r1, #46	; 0x2e
 80a1410:	4638      	mov	r0, r7
 80a1412:	f7ff fde7 	bl	80a0fe4 <_ZN5Print5printEc>
 80a1416:	4404      	add	r4, r0
 80a1418:	e7ee      	b.n	80a13f8 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a141a:	4620      	mov	r0, r4
 80a141c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1420 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1420:	b510      	push	{r4, lr}
 80a1422:	4604      	mov	r4, r0
 80a1424:	4b04      	ldr	r3, [pc, #16]	; (80a1438 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1426:	2211      	movs	r2, #17
 80a1428:	f840 3b04 	str.w	r3, [r0], #4
 80a142c:	2100      	movs	r1, #0
 80a142e:	f001 fcbe 	bl	80a2dae <memset>
{
    clear();
}
 80a1432:	4620      	mov	r0, r4
 80a1434:	bd10      	pop	{r4, pc}
 80a1436:	bf00      	nop
 80a1438:	080a3030 	.word	0x080a3030

080a143c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a143c:	4603      	mov	r3, r0
 80a143e:	4a07      	ldr	r2, [pc, #28]	; (80a145c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1440:	b510      	push	{r4, lr}
 80a1442:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1446:	f101 0210 	add.w	r2, r1, #16
 80a144a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a144e:	4291      	cmp	r1, r2
 80a1450:	f843 4b04 	str.w	r4, [r3], #4
 80a1454:	d1f9      	bne.n	80a144a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1456:	780a      	ldrb	r2, [r1, #0]
 80a1458:	701a      	strb	r2, [r3, #0]
}
 80a145a:	bd10      	pop	{r4, pc}
 80a145c:	080a3030 	.word	0x080a3030

080a1460 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1460:	4a02      	ldr	r2, [pc, #8]	; (80a146c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1462:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1464:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1466:	2204      	movs	r2, #4
 80a1468:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a146a:	4770      	bx	lr
 80a146c:	080a3030 	.word	0x080a3030

080a1470 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1470:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1472:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1476:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a147a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a147e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1482:	2304      	movs	r3, #4
 80a1484:	6041      	str	r1, [r0, #4]
 80a1486:	7503      	strb	r3, [r0, #20]
 80a1488:	bd10      	pop	{r4, pc}
	...

080a148c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a148c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a148e:	4d04      	ldr	r5, [pc, #16]	; (80a14a0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1490:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1492:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1496:	9500      	str	r5, [sp, #0]
 80a1498:	f7ff ffea 	bl	80a1470 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a149c:	b003      	add	sp, #12
 80a149e:	bd30      	pop	{r4, r5, pc}
 80a14a0:	080a3030 	.word	0x080a3030

080a14a4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a14a4:	7441      	strb	r1, [r0, #17]
 80a14a6:	4770      	bx	lr

080a14a8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a14a8:	4770      	bx	lr

080a14aa <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a14aa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a14ac:	2100      	movs	r1, #0
 80a14ae:	7c00      	ldrb	r0, [r0, #16]
 80a14b0:	f7ff fc7e 	bl	80a0db0 <HAL_USB_USART_Receive_Data>
}
 80a14b4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a14b8:	bf28      	it	cs
 80a14ba:	f04f 30ff 	movcs.w	r0, #4294967295
 80a14be:	bd08      	pop	{r3, pc}

080a14c0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a14c0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a14c2:	2101      	movs	r1, #1
 80a14c4:	7c00      	ldrb	r0, [r0, #16]
 80a14c6:	f7ff fc73 	bl	80a0db0 <HAL_USB_USART_Receive_Data>
}
 80a14ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a14ce:	bf28      	it	cs
 80a14d0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a14d4:	bd08      	pop	{r3, pc}

080a14d6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a14d6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a14d8:	7c00      	ldrb	r0, [r0, #16]
 80a14da:	f7ff fc61 	bl	80a0da0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a14de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14e2:	bd08      	pop	{r3, pc}

080a14e4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a14e4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a14e6:	7c00      	ldrb	r0, [r0, #16]
 80a14e8:	f7ff fc52 	bl	80a0d90 <HAL_USB_USART_Available_Data>
}
 80a14ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a14f0:	bd08      	pop	{r3, pc}

080a14f2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a14f2:	7c00      	ldrb	r0, [r0, #16]
 80a14f4:	f7ff bc6c 	b.w	80a0dd0 <HAL_USB_USART_Flush_Data>

080a14f8 <_ZN9USBSerialD0Ev>:
 80a14f8:	b510      	push	{r4, lr}
 80a14fa:	4604      	mov	r4, r0
 80a14fc:	2114      	movs	r1, #20
 80a14fe:	f000 fb21 	bl	80a1b44 <_ZdlPvj>
 80a1502:	4620      	mov	r0, r4
 80a1504:	bd10      	pop	{r4, pc}

080a1506 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1506:	b538      	push	{r3, r4, r5, lr}
 80a1508:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a150a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a150c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a150e:	f7ff fc47 	bl	80a0da0 <HAL_USB_USART_Available_Data_For_Write>
 80a1512:	2800      	cmp	r0, #0
 80a1514:	dc01      	bgt.n	80a151a <_ZN9USBSerial5writeEh+0x14>
 80a1516:	7c60      	ldrb	r0, [r4, #17]
 80a1518:	b128      	cbz	r0, 80a1526 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a151a:	4629      	mov	r1, r5
 80a151c:	7c20      	ldrb	r0, [r4, #16]
 80a151e:	f7ff fc4f 	bl	80a0dc0 <HAL_USB_USART_Send_Data>
 80a1522:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1526:	bd38      	pop	{r3, r4, r5, pc}

080a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1528:	b510      	push	{r4, lr}
 80a152a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a152c:	2300      	movs	r3, #0
 80a152e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1534:	60a3      	str	r3, [r4, #8]
 80a1536:	4b05      	ldr	r3, [pc, #20]	; (80a154c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1538:	4608      	mov	r0, r1
 80a153a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a153c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a153e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1540:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1542:	4611      	mov	r1, r2
 80a1544:	f7ff fc14 	bl	80a0d70 <HAL_USB_USART_Init>
}
 80a1548:	4620      	mov	r0, r4
 80a154a:	bd10      	pop	{r4, pc}
 80a154c:	080a3044 	.word	0x080a3044

080a1550 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1550:	2200      	movs	r2, #0
 80a1552:	7c00      	ldrb	r0, [r0, #16]
 80a1554:	f7ff bc14 	b.w	80a0d80 <HAL_USB_USART_Begin>

080a1558 <_Z19acquireSerialBufferv>:
 80a1558:	b510      	push	{r4, lr}
 80a155a:	4604      	mov	r4, r0
 80a155c:	2214      	movs	r2, #20
 80a155e:	2100      	movs	r1, #0
 80a1560:	f001 fc25 	bl	80a2dae <memset>
 80a1564:	4620      	mov	r0, r4
 80a1566:	bd10      	pop	{r4, pc}

080a1568 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1568:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a156a:	4d0e      	ldr	r5, [pc, #56]	; (80a15a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a156c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a156e:	a801      	add	r0, sp, #4
 80a1570:	f7ff fff2 	bl	80a1558 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1574:	6829      	ldr	r1, [r5, #0]
 80a1576:	f011 0401 	ands.w	r4, r1, #1
 80a157a:	d110      	bne.n	80a159e <_Z16_fetch_usbserialv+0x36>
 80a157c:	4628      	mov	r0, r5
 80a157e:	f7fe fd94 	bl	80a00aa <__cxa_guard_acquire>
 80a1582:	b160      	cbz	r0, 80a159e <_Z16_fetch_usbserialv+0x36>
 80a1584:	aa01      	add	r2, sp, #4
 80a1586:	4621      	mov	r1, r4
 80a1588:	4807      	ldr	r0, [pc, #28]	; (80a15a8 <_Z16_fetch_usbserialv+0x40>)
 80a158a:	f7ff ffcd 	bl	80a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a158e:	4628      	mov	r0, r5
 80a1590:	f7fe fd90 	bl	80a00b4 <__cxa_guard_release>
 80a1594:	4a05      	ldr	r2, [pc, #20]	; (80a15ac <_Z16_fetch_usbserialv+0x44>)
 80a1596:	4906      	ldr	r1, [pc, #24]	; (80a15b0 <_Z16_fetch_usbserialv+0x48>)
 80a1598:	4803      	ldr	r0, [pc, #12]	; (80a15a8 <_Z16_fetch_usbserialv+0x40>)
 80a159a:	f000 fac5 	bl	80a1b28 <__aeabi_atexit>
	return _usbserial;
}
 80a159e:	4802      	ldr	r0, [pc, #8]	; (80a15a8 <_Z16_fetch_usbserialv+0x40>)
 80a15a0:	b007      	add	sp, #28
 80a15a2:	bd30      	pop	{r4, r5, pc}
 80a15a4:	20000110 	.word	0x20000110
 80a15a8:	20000118 	.word	0x20000118
 80a15ac:	20000070 	.word	0x20000070
 80a15b0:	080a14a9 	.word	0x080a14a9

080a15b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a15b4:	b510      	push	{r4, lr}
 80a15b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a15b8:	2214      	movs	r2, #20
 80a15ba:	2100      	movs	r1, #0
 80a15bc:	f001 fbf7 	bl	80a2dae <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a15c0:	4620      	mov	r0, r4
 80a15c2:	bd10      	pop	{r4, pc}

080a15c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a15c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15c6:	4c0e      	ldr	r4, [pc, #56]	; (80a1600 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a15c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a15ca:	a801      	add	r0, sp, #4
 80a15cc:	f7ff fff2 	bl	80a15b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a15d0:	6823      	ldr	r3, [r4, #0]
 80a15d2:	07db      	lsls	r3, r3, #31
 80a15d4:	d410      	bmi.n	80a15f8 <_Z17_fetch_usbserial1v+0x34>
 80a15d6:	4620      	mov	r0, r4
 80a15d8:	f7fe fd67 	bl	80a00aa <__cxa_guard_acquire>
 80a15dc:	b160      	cbz	r0, 80a15f8 <_Z17_fetch_usbserial1v+0x34>
 80a15de:	aa01      	add	r2, sp, #4
 80a15e0:	2101      	movs	r1, #1
 80a15e2:	4808      	ldr	r0, [pc, #32]	; (80a1604 <_Z17_fetch_usbserial1v+0x40>)
 80a15e4:	f7ff ffa0 	bl	80a1528 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a15e8:	4620      	mov	r0, r4
 80a15ea:	f7fe fd63 	bl	80a00b4 <__cxa_guard_release>
 80a15ee:	4a06      	ldr	r2, [pc, #24]	; (80a1608 <_Z17_fetch_usbserial1v+0x44>)
 80a15f0:	4906      	ldr	r1, [pc, #24]	; (80a160c <_Z17_fetch_usbserial1v+0x48>)
 80a15f2:	4804      	ldr	r0, [pc, #16]	; (80a1604 <_Z17_fetch_usbserial1v+0x40>)
 80a15f4:	f000 fa98 	bl	80a1b28 <__aeabi_atexit>
  return _usbserial1;
}
 80a15f8:	4802      	ldr	r0, [pc, #8]	; (80a1604 <_Z17_fetch_usbserial1v+0x40>)
 80a15fa:	b006      	add	sp, #24
 80a15fc:	bd10      	pop	{r4, pc}
 80a15fe:	bf00      	nop
 80a1600:	20000114 	.word	0x20000114
 80a1604:	2000012c 	.word	0x2000012c
 80a1608:	20000070 	.word	0x20000070
 80a160c:	080a14a9 	.word	0x080a14a9

080a1610 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1610:	4770      	bx	lr

080a1612 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1612:	7441      	strb	r1, [r0, #17]
 80a1614:	4770      	bx	lr

080a1616 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1616:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1618:	7c00      	ldrb	r0, [r0, #16]
 80a161a:	f7ff fb4f 	bl	80a0cbc <HAL_USART_Available_Data_For_Write>
}
 80a161e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1622:	bd08      	pop	{r3, pc}

080a1624 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1624:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1626:	7c00      	ldrb	r0, [r0, #16]
 80a1628:	f7ff fb20 	bl	80a0c6c <HAL_USART_Available_Data>
}
 80a162c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1630:	bd08      	pop	{r3, pc}

080a1632 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1632:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1634:	7c00      	ldrb	r0, [r0, #16]
 80a1636:	f7ff fb29 	bl	80a0c8c <HAL_USART_Peek_Data>
}
 80a163a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a163e:	bf28      	it	cs
 80a1640:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1644:	bd08      	pop	{r3, pc}

080a1646 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1646:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1648:	7c00      	ldrb	r0, [r0, #16]
 80a164a:	f7ff fb17 	bl	80a0c7c <HAL_USART_Read_Data>
}
 80a164e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1652:	bf28      	it	cs
 80a1654:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1658:	bd08      	pop	{r3, pc}

080a165a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a165a:	7c00      	ldrb	r0, [r0, #16]
 80a165c:	f7ff bb1e 	b.w	80a0c9c <HAL_USART_Flush_Data>

080a1660 <_ZN11USARTSerialD0Ev>:
 80a1660:	b510      	push	{r4, lr}
 80a1662:	4604      	mov	r4, r0
 80a1664:	2114      	movs	r1, #20
 80a1666:	f000 fa6d 	bl	80a1b44 <_ZdlPvj>
 80a166a:	4620      	mov	r0, r4
 80a166c:	bd10      	pop	{r4, pc}

080a166e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a166e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1670:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1672:	4604      	mov	r4, r0
 80a1674:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1676:	b925      	cbnz	r5, 80a1682 <_ZN11USARTSerial5writeEh+0x14>
 80a1678:	7c00      	ldrb	r0, [r0, #16]
 80a167a:	f7ff fb1f 	bl	80a0cbc <HAL_USART_Available_Data_For_Write>
 80a167e:	2800      	cmp	r0, #0
 80a1680:	dd05      	ble.n	80a168e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1682:	4631      	mov	r1, r6
 80a1684:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a168a:	f7ff bae7 	b.w	80a0c5c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a168e:	4628      	mov	r0, r5
 80a1690:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1694 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1694:	b510      	push	{r4, lr}
 80a1696:	4604      	mov	r4, r0
 80a1698:	4608      	mov	r0, r1
 80a169a:	4611      	mov	r1, r2
 80a169c:	2200      	movs	r2, #0
 80a169e:	6062      	str	r2, [r4, #4]
 80a16a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a16a4:	60a2      	str	r2, [r4, #8]
 80a16a6:	4a05      	ldr	r2, [pc, #20]	; (80a16bc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a16a8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a16aa:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a16ac:	2201      	movs	r2, #1
 80a16ae:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a16b0:	461a      	mov	r2, r3
 80a16b2:	f7ff facb 	bl	80a0c4c <HAL_USART_Init>
}
 80a16b6:	4620      	mov	r0, r4
 80a16b8:	bd10      	pop	{r4, pc}
 80a16ba:	bf00      	nop
 80a16bc:	080a3074 	.word	0x080a3074

080a16c0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a16c0:	7c00      	ldrb	r0, [r0, #16]
 80a16c2:	f7ff baf3 	b.w	80a0cac <HAL_USART_Is_Enabled>
	...

080a16c8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a16c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a16ca:	4c19      	ldr	r4, [pc, #100]	; (80a1730 <_Z22__fetch_global_Serial1v+0x68>)
 80a16cc:	6825      	ldr	r5, [r4, #0]
 80a16ce:	b94d      	cbnz	r5, 80a16e4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a16d0:	2084      	movs	r0, #132	; 0x84
 80a16d2:	f7fe fce4 	bl	80a009e <_Znwj>
 80a16d6:	4606      	mov	r6, r0
 80a16d8:	b118      	cbz	r0, 80a16e2 <_Z22__fetch_global_Serial1v+0x1a>
 80a16da:	2284      	movs	r2, #132	; 0x84
 80a16dc:	4629      	mov	r1, r5
 80a16de:	f001 fb66 	bl	80a2dae <memset>
 80a16e2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a16e4:	4d13      	ldr	r5, [pc, #76]	; (80a1734 <_Z22__fetch_global_Serial1v+0x6c>)
 80a16e6:	682e      	ldr	r6, [r5, #0]
 80a16e8:	b94e      	cbnz	r6, 80a16fe <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a16ea:	2084      	movs	r0, #132	; 0x84
 80a16ec:	f7fe fcd7 	bl	80a009e <_Znwj>
 80a16f0:	4607      	mov	r7, r0
 80a16f2:	b118      	cbz	r0, 80a16fc <_Z22__fetch_global_Serial1v+0x34>
 80a16f4:	2284      	movs	r2, #132	; 0x84
 80a16f6:	4631      	mov	r1, r6
 80a16f8:	f001 fb59 	bl	80a2dae <memset>
 80a16fc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a16fe:	4f0e      	ldr	r7, [pc, #56]	; (80a1738 <_Z22__fetch_global_Serial1v+0x70>)
 80a1700:	6839      	ldr	r1, [r7, #0]
 80a1702:	f011 0601 	ands.w	r6, r1, #1
 80a1706:	d111      	bne.n	80a172c <_Z22__fetch_global_Serial1v+0x64>
 80a1708:	4638      	mov	r0, r7
 80a170a:	f7fe fcce 	bl	80a00aa <__cxa_guard_acquire>
 80a170e:	b168      	cbz	r0, 80a172c <_Z22__fetch_global_Serial1v+0x64>
 80a1710:	6822      	ldr	r2, [r4, #0]
 80a1712:	4631      	mov	r1, r6
 80a1714:	682b      	ldr	r3, [r5, #0]
 80a1716:	4809      	ldr	r0, [pc, #36]	; (80a173c <_Z22__fetch_global_Serial1v+0x74>)
 80a1718:	f7ff ffbc 	bl	80a1694 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a171c:	4638      	mov	r0, r7
 80a171e:	f7fe fcc9 	bl	80a00b4 <__cxa_guard_release>
 80a1722:	4a07      	ldr	r2, [pc, #28]	; (80a1740 <_Z22__fetch_global_Serial1v+0x78>)
 80a1724:	4907      	ldr	r1, [pc, #28]	; (80a1744 <_Z22__fetch_global_Serial1v+0x7c>)
 80a1726:	4805      	ldr	r0, [pc, #20]	; (80a173c <_Z22__fetch_global_Serial1v+0x74>)
 80a1728:	f000 f9fe 	bl	80a1b28 <__aeabi_atexit>
#endif
	return serial1;
}
 80a172c:	4803      	ldr	r0, [pc, #12]	; (80a173c <_Z22__fetch_global_Serial1v+0x74>)
 80a172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1730:	2000015c 	.word	0x2000015c
 80a1734:	20000154 	.word	0x20000154
 80a1738:	20000158 	.word	0x20000158
 80a173c:	20000140 	.word	0x20000140
 80a1740:	20000070 	.word	0x20000070
 80a1744:	080a1611 	.word	0x080a1611

080a1748 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1748:	4770      	bx	lr

080a174a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a174a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a174c:	4606      	mov	r6, r0
 80a174e:	4615      	mov	r5, r2
 80a1750:	460c      	mov	r4, r1
 80a1752:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1754:	42bc      	cmp	r4, r7
 80a1756:	d006      	beq.n	80a1766 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1758:	6833      	ldr	r3, [r6, #0]
 80a175a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a175e:	689b      	ldr	r3, [r3, #8]
 80a1760:	4630      	mov	r0, r6
 80a1762:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1764:	e7f6      	b.n	80a1754 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1766:	4628      	mov	r0, r5
 80a1768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a176a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a176a:	2200      	movs	r2, #0
 80a176c:	7c00      	ldrb	r0, [r0, #16]
 80a176e:	f7ff bac5 	b.w	80a0cfc <HAL_I2C_Write_Data>

080a1772 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1772:	2100      	movs	r1, #0
 80a1774:	7c00      	ldrb	r0, [r0, #16]
 80a1776:	f7ff bac9 	b.w	80a0d0c <HAL_I2C_Available_Data>

080a177a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a177a:	2100      	movs	r1, #0
 80a177c:	7c00      	ldrb	r0, [r0, #16]
 80a177e:	f7ff bacd 	b.w	80a0d1c <HAL_I2C_Read_Data>

080a1782 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1782:	2100      	movs	r1, #0
 80a1784:	7c00      	ldrb	r0, [r0, #16]
 80a1786:	f7ff bad1 	b.w	80a0d2c <HAL_I2C_Peek_Data>

080a178a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a178a:	2100      	movs	r1, #0
 80a178c:	7c00      	ldrb	r0, [r0, #16]
 80a178e:	f7ff bad5 	b.w	80a0d3c <HAL_I2C_Flush_Data>

080a1792 <_ZN7TwoWireD0Ev>:
 80a1792:	b510      	push	{r4, lr}
 80a1794:	4604      	mov	r4, r0
 80a1796:	2114      	movs	r1, #20
 80a1798:	f000 f9d4 	bl	80a1b44 <_ZdlPvj>
 80a179c:	4620      	mov	r0, r4
 80a179e:	bd10      	pop	{r4, pc}

080a17a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a17a0:	b510      	push	{r4, lr}
 80a17a2:	4604      	mov	r4, r0
 80a17a4:	2300      	movs	r3, #0
 80a17a6:	6063      	str	r3, [r4, #4]
 80a17a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a17ac:	60a3      	str	r3, [r4, #8]
 80a17ae:	4b04      	ldr	r3, [pc, #16]	; (80a17c0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a17b0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a17b2:	4608      	mov	r0, r1
 80a17b4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a17b6:	4611      	mov	r1, r2
 80a17b8:	f7ff fad0 	bl	80a0d5c <HAL_I2C_Init>
}
 80a17bc:	4620      	mov	r0, r4
 80a17be:	bd10      	pop	{r4, pc}
 80a17c0:	080a30a4 	.word	0x080a30a4

080a17c4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a17c4:	2300      	movs	r3, #0
 80a17c6:	461a      	mov	r2, r3
 80a17c8:	4619      	mov	r1, r3
 80a17ca:	7c00      	ldrb	r0, [r0, #16]
 80a17cc:	f7ff ba7e 	b.w	80a0ccc <HAL_I2C_Begin>

080a17d0 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a17d0:	2200      	movs	r2, #0
 80a17d2:	7c00      	ldrb	r0, [r0, #16]
 80a17d4:	f7ff ba82 	b.w	80a0cdc <HAL_I2C_Begin_Transmission>

080a17d8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a17d8:	2200      	movs	r2, #0
 80a17da:	7c00      	ldrb	r0, [r0, #16]
 80a17dc:	f7ff ba86 	b.w	80a0cec <HAL_I2C_End_Transmission>

080a17e0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a17e0:	2101      	movs	r1, #1
 80a17e2:	f7ff bff9 	b.w	80a17d8 <_ZN7TwoWire15endTransmissionEh>

080a17e6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a17e6:	2100      	movs	r1, #0
 80a17e8:	7c00      	ldrb	r0, [r0, #16]
 80a17ea:	f7ff baaf 	b.w	80a0d4c <HAL_I2C_Is_Enabled>

080a17ee <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a17ee:	2200      	movs	r2, #0
 80a17f0:	4611      	mov	r1, r2
 80a17f2:	6840      	ldr	r0, [r0, #4]
 80a17f4:	f7ff bb38 	b.w	80a0e68 <network_ready>

080a17f8 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a17f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a17fa:	4616      	mov	r6, r2
 80a17fc:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a17fe:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1800:	460f      	mov	r7, r1
 80a1802:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1804:	2100      	movs	r1, #0
 80a1806:	a803      	add	r0, sp, #12
 80a1808:	f001 fad1 	bl	80a2dae <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a180c:	4630      	mov	r0, r6
 80a180e:	f001 faff 	bl	80a2e10 <strlen>
 80a1812:	2500      	movs	r5, #0
 80a1814:	9500      	str	r5, [sp, #0]
 80a1816:	b281      	uxth	r1, r0
 80a1818:	687b      	ldr	r3, [r7, #4]
 80a181a:	aa03      	add	r2, sp, #12
 80a181c:	4630      	mov	r0, r6
 80a181e:	f7ff fadf 	bl	80a0de0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1822:	b120      	cbz	r0, 80a182e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1824:	4629      	mov	r1, r5
 80a1826:	4620      	mov	r0, r4
 80a1828:	f7ff fe1a 	bl	80a1460 <_ZN9IPAddressC1Em>
 80a182c:	e003      	b.n	80a1836 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a182e:	a903      	add	r1, sp, #12
 80a1830:	4620      	mov	r0, r4
 80a1832:	f7ff fe03 	bl	80a143c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1836:	4620      	mov	r0, r4
 80a1838:	b009      	add	sp, #36	; 0x24
 80a183a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a183c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a183c:	2200      	movs	r2, #0
 80a183e:	4611      	mov	r1, r2
 80a1840:	6840      	ldr	r0, [r0, #4]
 80a1842:	f7ff bb31 	b.w	80a0ea8 <network_listening>

080a1846 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1846:	2200      	movs	r2, #0
 80a1848:	4611      	mov	r1, r2
 80a184a:	6840      	ldr	r0, [r0, #4]
 80a184c:	f7ff bb3c 	b.w	80a0ec8 <network_get_listen_timeout>

080a1850 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1850:	2200      	movs	r2, #0
 80a1852:	6840      	ldr	r0, [r0, #4]
 80a1854:	f7ff bb30 	b.w	80a0eb8 <network_set_listen_timeout>

080a1858 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1858:	2200      	movs	r2, #0
 80a185a:	f081 0101 	eor.w	r1, r1, #1
 80a185e:	6840      	ldr	r0, [r0, #4]
 80a1860:	f7ff bb1a 	b.w	80a0e98 <network_listen>

080a1864 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1864:	2300      	movs	r3, #0
 80a1866:	461a      	mov	r2, r3
 80a1868:	4619      	mov	r1, r3
 80a186a:	6840      	ldr	r0, [r0, #4]
 80a186c:	f7ff bb0c 	b.w	80a0e88 <network_off>

080a1870 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1870:	2200      	movs	r2, #0
 80a1872:	4611      	mov	r1, r2
 80a1874:	6840      	ldr	r0, [r0, #4]
 80a1876:	f7ff bae7 	b.w	80a0e48 <network_connecting>

080a187a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a187a:	2200      	movs	r2, #0
 80a187c:	2102      	movs	r1, #2
 80a187e:	6840      	ldr	r0, [r0, #4]
 80a1880:	f7ff baea 	b.w	80a0e58 <network_disconnect>

080a1884 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1884:	2300      	movs	r3, #0
 80a1886:	461a      	mov	r2, r3
 80a1888:	6840      	ldr	r0, [r0, #4]
 80a188a:	f7ff bad5 	b.w	80a0e38 <network_connect>
	...

080a1890 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1890:	4b02      	ldr	r3, [pc, #8]	; (80a189c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1892:	2204      	movs	r2, #4
 80a1894:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1896:	4a02      	ldr	r2, [pc, #8]	; (80a18a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1898:	601a      	str	r2, [r3, #0]
 80a189a:	4770      	bx	lr
 80a189c:	20000160 	.word	0x20000160
 80a18a0:	080a30cc 	.word	0x080a30cc

080a18a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a18a4:	2300      	movs	r3, #0
 80a18a6:	461a      	mov	r2, r3
 80a18a8:	6840      	ldr	r0, [r0, #4]
 80a18aa:	f7ff bac5 	b.w	80a0e38 <network_connect>

080a18ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a18ae:	2200      	movs	r2, #0
 80a18b0:	2102      	movs	r1, #2
 80a18b2:	6840      	ldr	r0, [r0, #4]
 80a18b4:	f7ff bad0 	b.w	80a0e58 <network_disconnect>

080a18b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a18b8:	2200      	movs	r2, #0
 80a18ba:	4611      	mov	r1, r2
 80a18bc:	6840      	ldr	r0, [r0, #4]
 80a18be:	f7ff bac3 	b.w	80a0e48 <network_connecting>

080a18c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a18c2:	2200      	movs	r2, #0
 80a18c4:	4611      	mov	r1, r2
 80a18c6:	6840      	ldr	r0, [r0, #4]
 80a18c8:	f7ff bace 	b.w	80a0e68 <network_ready>

080a18cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a18cc:	2300      	movs	r3, #0
 80a18ce:	461a      	mov	r2, r3
 80a18d0:	4619      	mov	r1, r3
 80a18d2:	6840      	ldr	r0, [r0, #4]
 80a18d4:	f7ff bad0 	b.w	80a0e78 <network_on>

080a18d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a18d8:	2300      	movs	r3, #0
 80a18da:	461a      	mov	r2, r3
 80a18dc:	4619      	mov	r1, r3
 80a18de:	6840      	ldr	r0, [r0, #4]
 80a18e0:	f7ff bad2 	b.w	80a0e88 <network_off>

080a18e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a18e4:	2200      	movs	r2, #0
 80a18e6:	f081 0101 	eor.w	r1, r1, #1
 80a18ea:	6840      	ldr	r0, [r0, #4]
 80a18ec:	f7ff bad4 	b.w	80a0e98 <network_listen>

080a18f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a18f0:	2200      	movs	r2, #0
 80a18f2:	6840      	ldr	r0, [r0, #4]
 80a18f4:	f7ff bae0 	b.w	80a0eb8 <network_set_listen_timeout>

080a18f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a18f8:	2200      	movs	r2, #0
 80a18fa:	4611      	mov	r1, r2
 80a18fc:	6840      	ldr	r0, [r0, #4]
 80a18fe:	f7ff bae3 	b.w	80a0ec8 <network_get_listen_timeout>

080a1902 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1902:	2200      	movs	r2, #0
 80a1904:	4611      	mov	r1, r2
 80a1906:	6840      	ldr	r0, [r0, #4]
 80a1908:	f7ff bace 	b.w	80a0ea8 <network_listening>

080a190c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a190c:	b570      	push	{r4, r5, r6, lr}
 80a190e:	4616      	mov	r6, r2
 80a1910:	b08e      	sub	sp, #56	; 0x38
 80a1912:	4604      	mov	r4, r0
    IPAddress addr;
 80a1914:	a808      	add	r0, sp, #32
 80a1916:	f7ff fd83 	bl	80a1420 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a191a:	2211      	movs	r2, #17
 80a191c:	2100      	movs	r1, #0
 80a191e:	a803      	add	r0, sp, #12
 80a1920:	f001 fa45 	bl	80a2dae <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1924:	4630      	mov	r0, r6
 80a1926:	f001 fa73 	bl	80a2e10 <strlen>
 80a192a:	2500      	movs	r5, #0
 80a192c:	4b0a      	ldr	r3, [pc, #40]	; (80a1958 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a192e:	9500      	str	r5, [sp, #0]
 80a1930:	b281      	uxth	r1, r0
 80a1932:	685b      	ldr	r3, [r3, #4]
 80a1934:	aa03      	add	r2, sp, #12
 80a1936:	4630      	mov	r0, r6
 80a1938:	f7ff fa52 	bl	80a0de0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a193c:	b120      	cbz	r0, 80a1948 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a193e:	4629      	mov	r1, r5
 80a1940:	4620      	mov	r0, r4
 80a1942:	f7ff fd8d 	bl	80a1460 <_ZN9IPAddressC1Em>
 80a1946:	e003      	b.n	80a1950 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1948:	a903      	add	r1, sp, #12
 80a194a:	4620      	mov	r0, r4
 80a194c:	f7ff fd76 	bl	80a143c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1950:	4620      	mov	r0, r4
 80a1952:	b00e      	add	sp, #56	; 0x38
 80a1954:	bd70      	pop	{r4, r5, r6, pc}
 80a1956:	bf00      	nop
 80a1958:	20000160 	.word	0x20000160

080a195c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a195c:	4b02      	ldr	r3, [pc, #8]	; (80a1968 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a195e:	4a03      	ldr	r2, [pc, #12]	; (80a196c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a1960:	601a      	str	r2, [r3, #0]
 80a1962:	2200      	movs	r2, #0
 80a1964:	605a      	str	r2, [r3, #4]
 80a1966:	4770      	bx	lr
 80a1968:	20000168 	.word	0x20000168
 80a196c:	080a3100 	.word	0x080a3100

080a1970 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a1970:	b510      	push	{r4, lr}
 80a1972:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a1974:	6880      	ldr	r0, [r0, #8]
 80a1976:	b108      	cbz	r0, 80a197c <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a1978:	f7ff f960 	bl	80a0c3c <os_mutex_recursive_destroy>
 80a197c:	4620      	mov	r0, r4
 80a197e:	bd10      	pop	{r4, pc}

080a1980 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1980:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a1982:	4e1a      	ldr	r6, [pc, #104]	; (80a19ec <pinAvailable+0x6c>)
 80a1984:	4604      	mov	r4, r0
 80a1986:	6831      	ldr	r1, [r6, #0]
 80a1988:	f011 0501 	ands.w	r5, r1, #1
 80a198c:	d10f      	bne.n	80a19ae <pinAvailable+0x2e>
 80a198e:	4630      	mov	r0, r6
 80a1990:	f7fe fb8b 	bl	80a00aa <__cxa_guard_acquire>
 80a1994:	b158      	cbz	r0, 80a19ae <pinAvailable+0x2e>
 80a1996:	4629      	mov	r1, r5
 80a1998:	4815      	ldr	r0, [pc, #84]	; (80a19f0 <pinAvailable+0x70>)
 80a199a:	f7ff fabd 	bl	80a0f18 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a199e:	4630      	mov	r0, r6
 80a19a0:	f7fe fb88 	bl	80a00b4 <__cxa_guard_release>
 80a19a4:	4a13      	ldr	r2, [pc, #76]	; (80a19f4 <pinAvailable+0x74>)
 80a19a6:	4914      	ldr	r1, [pc, #80]	; (80a19f8 <pinAvailable+0x78>)
 80a19a8:	4811      	ldr	r0, [pc, #68]	; (80a19f0 <pinAvailable+0x70>)
 80a19aa:	f000 f8bd 	bl	80a1b28 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a19ae:	4810      	ldr	r0, [pc, #64]	; (80a19f0 <pinAvailable+0x70>)
 80a19b0:	f7ff fac1 	bl	80a0f36 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a19b4:	b128      	cbz	r0, 80a19c2 <pinAvailable+0x42>
 80a19b6:	f1a4 030d 	sub.w	r3, r4, #13
 80a19ba:	2b02      	cmp	r3, #2
 80a19bc:	d801      	bhi.n	80a19c2 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a19be:	2000      	movs	r0, #0
 80a19c0:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a19c2:	f000 f88b 	bl	80a1adc <_Z19__fetch_global_Wirev>
 80a19c6:	f7ff ff0e 	bl	80a17e6 <_ZN7TwoWire9isEnabledEv>
 80a19ca:	b108      	cbz	r0, 80a19d0 <pinAvailable+0x50>
 80a19cc:	2c01      	cmp	r4, #1
 80a19ce:	d9f6      	bls.n	80a19be <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a19d0:	f7ff fe7a 	bl	80a16c8 <_Z22__fetch_global_Serial1v>
 80a19d4:	f7ff fe74 	bl	80a16c0 <_ZN11USARTSerial9isEnabledEv>
 80a19d8:	b118      	cbz	r0, 80a19e2 <pinAvailable+0x62>
 80a19da:	f1a4 0312 	sub.w	r3, r4, #18
 80a19de:	2b01      	cmp	r3, #1
 80a19e0:	d9ed      	bls.n	80a19be <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a19e2:	2c17      	cmp	r4, #23
 80a19e4:	bf8c      	ite	hi
 80a19e6:	2000      	movhi	r0, #0
 80a19e8:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a19ea:	bd70      	pop	{r4, r5, r6, pc}
 80a19ec:	20000170 	.word	0x20000170
 80a19f0:	20000174 	.word	0x20000174
 80a19f4:	20000070 	.word	0x20000070
 80a19f8:	080a1971 	.word	0x080a1971

080a19fc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a19fc:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a19fe:	b538      	push	{r3, r4, r5, lr}
 80a1a00:	4604      	mov	r4, r0
 80a1a02:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1a04:	d80a      	bhi.n	80a1a1c <pinMode+0x20>
 80a1a06:	29ff      	cmp	r1, #255	; 0xff
 80a1a08:	d008      	beq.n	80a1a1c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1a0a:	f7ff ffb9 	bl	80a1980 <pinAvailable>
 80a1a0e:	b128      	cbz	r0, 80a1a1c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1a10:	4629      	mov	r1, r5
 80a1a12:	4620      	mov	r0, r4
}
 80a1a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1a18:	f7ff b8c0 	b.w	80a0b9c <HAL_Pin_Mode>
 80a1a1c:	bd38      	pop	{r3, r4, r5, pc}

080a1a1e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a1a1e:	b538      	push	{r3, r4, r5, lr}
 80a1a20:	4604      	mov	r4, r0
 80a1a22:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1a24:	f7ff f8c2 	bl	80a0bac <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a1a28:	28ff      	cmp	r0, #255	; 0xff
 80a1a2a:	d010      	beq.n	80a1a4e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a1a2c:	2806      	cmp	r0, #6
 80a1a2e:	d804      	bhi.n	80a1a3a <digitalWrite+0x1c>
 80a1a30:	234d      	movs	r3, #77	; 0x4d
 80a1a32:	fa23 f000 	lsr.w	r0, r3, r0
 80a1a36:	07c3      	lsls	r3, r0, #31
 80a1a38:	d409      	bmi.n	80a1a4e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a1a3a:	4620      	mov	r0, r4
 80a1a3c:	f7ff ffa0 	bl	80a1980 <pinAvailable>
 80a1a40:	b128      	cbz	r0, 80a1a4e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1a42:	4629      	mov	r1, r5
 80a1a44:	4620      	mov	r0, r4
}
 80a1a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a1a4a:	f7ff b8b7 	b.w	80a0bbc <HAL_GPIO_Write>
 80a1a4e:	bd38      	pop	{r3, r4, r5, pc}

080a1a50 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1a50:	b510      	push	{r4, lr}
 80a1a52:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1a54:	f7ff f8aa 	bl	80a0bac <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1a58:	3804      	subs	r0, #4
 80a1a5a:	b2c0      	uxtb	r0, r0
 80a1a5c:	2801      	cmp	r0, #1
 80a1a5e:	d908      	bls.n	80a1a72 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1a60:	4620      	mov	r0, r4
 80a1a62:	f7ff ff8d 	bl	80a1980 <pinAvailable>
 80a1a66:	b120      	cbz	r0, 80a1a72 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1a68:	4620      	mov	r0, r4
}
 80a1a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1a6e:	f7ff b8ad 	b.w	80a0bcc <HAL_GPIO_Read>
}
 80a1a72:	2000      	movs	r0, #0
 80a1a74:	bd10      	pop	{r4, pc}
	...

080a1a78 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1a78:	b513      	push	{r0, r1, r4, lr}
 80a1a7a:	4c08      	ldr	r4, [pc, #32]	; (80a1a9c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1a7c:	2300      	movs	r3, #0
 80a1a7e:	461a      	mov	r2, r3
 80a1a80:	4619      	mov	r1, r3
 80a1a82:	9300      	str	r3, [sp, #0]
 80a1a84:	4620      	mov	r0, r4
 80a1a86:	f7ff fd01 	bl	80a148c <_ZN9IPAddressC1Ehhhh>
 80a1a8a:	4620      	mov	r0, r4
 80a1a8c:	4a04      	ldr	r2, [pc, #16]	; (80a1aa0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1a8e:	4905      	ldr	r1, [pc, #20]	; (80a1aa4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1a90:	b002      	add	sp, #8
 80a1a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1a96:	f000 b847 	b.w	80a1b28 <__aeabi_atexit>
 80a1a9a:	bf00      	nop
 80a1a9c:	20000184 	.word	0x20000184
 80a1aa0:	20000070 	.word	0x20000070
 80a1aa4:	080a13dd 	.word	0x080a13dd

080a1aa8 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a1aa8:	b570      	push	{r4, r5, r6, lr}
 80a1aaa:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1aac:	2514      	movs	r5, #20
 80a1aae:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ab0:	4e09      	ldr	r6, [pc, #36]	; (80a1ad8 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1ab2:	2100      	movs	r1, #0
 80a1ab4:	f001 f97b 	bl	80a2dae <memset>
 80a1ab8:	8025      	strh	r5, [r4, #0]
 80a1aba:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1abc:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1abe:	60a5      	str	r5, [r4, #8]
 80a1ac0:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ac2:	4628      	mov	r0, r5
 80a1ac4:	f000 f840 	bl	80a1b48 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1ac8:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1aca:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1acc:	4628      	mov	r0, r5
 80a1ace:	f000 f83b 	bl	80a1b48 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1ad2:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	bd70      	pop	{r4, r5, r6, pc}
 80a1ad8:	080a312c 	.word	0x080a312c

080a1adc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1adc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1ade:	4d0e      	ldr	r5, [pc, #56]	; (80a1b18 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1ae0:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1ae2:	6829      	ldr	r1, [r5, #0]
 80a1ae4:	f011 0401 	ands.w	r4, r1, #1
 80a1ae8:	d113      	bne.n	80a1b12 <_Z19__fetch_global_Wirev+0x36>
 80a1aea:	4628      	mov	r0, r5
 80a1aec:	f7fe fadd 	bl	80a00aa <__cxa_guard_acquire>
 80a1af0:	b178      	cbz	r0, 80a1b12 <_Z19__fetch_global_Wirev+0x36>
 80a1af2:	a801      	add	r0, sp, #4
 80a1af4:	f7ff ffd8 	bl	80a1aa8 <_Z17acquireWireBufferv>
 80a1af8:	aa01      	add	r2, sp, #4
 80a1afa:	4621      	mov	r1, r4
 80a1afc:	4807      	ldr	r0, [pc, #28]	; (80a1b1c <_Z19__fetch_global_Wirev+0x40>)
 80a1afe:	f7ff fe4f 	bl	80a17a0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1b02:	4628      	mov	r0, r5
 80a1b04:	f7fe fad6 	bl	80a00b4 <__cxa_guard_release>
 80a1b08:	4a05      	ldr	r2, [pc, #20]	; (80a1b20 <_Z19__fetch_global_Wirev+0x44>)
 80a1b0a:	4906      	ldr	r1, [pc, #24]	; (80a1b24 <_Z19__fetch_global_Wirev+0x48>)
 80a1b0c:	4803      	ldr	r0, [pc, #12]	; (80a1b1c <_Z19__fetch_global_Wirev+0x40>)
 80a1b0e:	f000 f80b 	bl	80a1b28 <__aeabi_atexit>
	return wire;
}
 80a1b12:	4802      	ldr	r0, [pc, #8]	; (80a1b1c <_Z19__fetch_global_Wirev+0x40>)
 80a1b14:	b007      	add	sp, #28
 80a1b16:	bd30      	pop	{r4, r5, pc}
 80a1b18:	2000019c 	.word	0x2000019c
 80a1b1c:	200001a0 	.word	0x200001a0
 80a1b20:	20000070 	.word	0x20000070
 80a1b24:	080a1749 	.word	0x080a1749

080a1b28 <__aeabi_atexit>:
 80a1b28:	460b      	mov	r3, r1
 80a1b2a:	4601      	mov	r1, r0
 80a1b2c:	4618      	mov	r0, r3
 80a1b2e:	f001 b925 	b.w	80a2d7c <__cxa_atexit>
	...

080a1b34 <_ZSt15get_new_handlerv>:
 80a1b34:	4b02      	ldr	r3, [pc, #8]	; (80a1b40 <_ZSt15get_new_handlerv+0xc>)
 80a1b36:	6818      	ldr	r0, [r3, #0]
 80a1b38:	f3bf 8f5f 	dmb	sy
 80a1b3c:	4770      	bx	lr
 80a1b3e:	bf00      	nop
 80a1b40:	200001b4 	.word	0x200001b4

080a1b44 <_ZdlPvj>:
 80a1b44:	f7fe baaf 	b.w	80a00a6 <_ZdlPv>

080a1b48 <_ZnajRKSt9nothrow_t>:
 80a1b48:	f000 b800 	b.w	80a1b4c <_ZnwjRKSt9nothrow_t>

080a1b4c <_ZnwjRKSt9nothrow_t>:
 80a1b4c:	b510      	push	{r4, lr}
 80a1b4e:	2800      	cmp	r0, #0
 80a1b50:	bf14      	ite	ne
 80a1b52:	4604      	movne	r4, r0
 80a1b54:	2401      	moveq	r4, #1
 80a1b56:	4620      	mov	r0, r4
 80a1b58:	f7ff f9c6 	bl	80a0ee8 <malloc>
 80a1b5c:	b920      	cbnz	r0, 80a1b68 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1b5e:	f7ff ffe9 	bl	80a1b34 <_ZSt15get_new_handlerv>
 80a1b62:	b108      	cbz	r0, 80a1b68 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1b64:	4780      	blx	r0
 80a1b66:	e7f6      	b.n	80a1b56 <_ZnwjRKSt9nothrow_t+0xa>
 80a1b68:	bd10      	pop	{r4, pc}
	...

080a1b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1b6c:	4b18      	ldr	r3, [pc, #96]	; (80a1bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1b6e:	681a      	ldr	r2, [r3, #0]
 80a1b70:	07d1      	lsls	r1, r2, #31
 80a1b72:	bf5c      	itt	pl
 80a1b74:	2201      	movpl	r2, #1
 80a1b76:	601a      	strpl	r2, [r3, #0]
 80a1b78:	4b16      	ldr	r3, [pc, #88]	; (80a1bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1b7a:	681a      	ldr	r2, [r3, #0]
 80a1b7c:	07d2      	lsls	r2, r2, #31
 80a1b7e:	bf5c      	itt	pl
 80a1b80:	2201      	movpl	r2, #1
 80a1b82:	601a      	strpl	r2, [r3, #0]
 80a1b84:	4b14      	ldr	r3, [pc, #80]	; (80a1bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1b86:	681a      	ldr	r2, [r3, #0]
 80a1b88:	07d0      	lsls	r0, r2, #31
 80a1b8a:	bf5c      	itt	pl
 80a1b8c:	2201      	movpl	r2, #1
 80a1b8e:	601a      	strpl	r2, [r3, #0]
 80a1b90:	4b12      	ldr	r3, [pc, #72]	; (80a1bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1b92:	681a      	ldr	r2, [r3, #0]
 80a1b94:	07d1      	lsls	r1, r2, #31
 80a1b96:	bf5c      	itt	pl
 80a1b98:	2201      	movpl	r2, #1
 80a1b9a:	601a      	strpl	r2, [r3, #0]
 80a1b9c:	4b10      	ldr	r3, [pc, #64]	; (80a1be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1b9e:	681a      	ldr	r2, [r3, #0]
 80a1ba0:	07d2      	lsls	r2, r2, #31
 80a1ba2:	bf5c      	itt	pl
 80a1ba4:	2201      	movpl	r2, #1
 80a1ba6:	601a      	strpl	r2, [r3, #0]
 80a1ba8:	4b0e      	ldr	r3, [pc, #56]	; (80a1be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1baa:	681a      	ldr	r2, [r3, #0]
 80a1bac:	07d0      	lsls	r0, r2, #31
 80a1bae:	bf5c      	itt	pl
 80a1bb0:	2201      	movpl	r2, #1
 80a1bb2:	601a      	strpl	r2, [r3, #0]
 80a1bb4:	4b0c      	ldr	r3, [pc, #48]	; (80a1be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1bb6:	681a      	ldr	r2, [r3, #0]
 80a1bb8:	07d1      	lsls	r1, r2, #31
 80a1bba:	bf5c      	itt	pl
 80a1bbc:	2201      	movpl	r2, #1
 80a1bbe:	601a      	strpl	r2, [r3, #0]
 80a1bc0:	4b0a      	ldr	r3, [pc, #40]	; (80a1bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1bc2:	681a      	ldr	r2, [r3, #0]
 80a1bc4:	07d2      	lsls	r2, r2, #31
 80a1bc6:	bf5c      	itt	pl
 80a1bc8:	2201      	movpl	r2, #1
 80a1bca:	601a      	strpl	r2, [r3, #0]
 80a1bcc:	4770      	bx	lr
 80a1bce:	bf00      	nop
 80a1bd0:	200001d4 	.word	0x200001d4
 80a1bd4:	200001d0 	.word	0x200001d0
 80a1bd8:	200001cc 	.word	0x200001cc
 80a1bdc:	200001c8 	.word	0x200001c8
 80a1be0:	200001c4 	.word	0x200001c4
 80a1be4:	200001c0 	.word	0x200001c0
 80a1be8:	200001bc 	.word	0x200001bc
 80a1bec:	200001b8 	.word	0x200001b8

080a1bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1bf0:	4b24      	ldr	r3, [pc, #144]	; (80a1c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1bf2:	681a      	ldr	r2, [r3, #0]
 80a1bf4:	07d0      	lsls	r0, r2, #31
 80a1bf6:	bf5c      	itt	pl
 80a1bf8:	2201      	movpl	r2, #1
 80a1bfa:	601a      	strpl	r2, [r3, #0]
 80a1bfc:	4b22      	ldr	r3, [pc, #136]	; (80a1c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1bfe:	681a      	ldr	r2, [r3, #0]
 80a1c00:	07d1      	lsls	r1, r2, #31
 80a1c02:	bf5c      	itt	pl
 80a1c04:	2201      	movpl	r2, #1
 80a1c06:	601a      	strpl	r2, [r3, #0]
 80a1c08:	4b20      	ldr	r3, [pc, #128]	; (80a1c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1c0a:	681a      	ldr	r2, [r3, #0]
 80a1c0c:	07d2      	lsls	r2, r2, #31
 80a1c0e:	bf5c      	itt	pl
 80a1c10:	2201      	movpl	r2, #1
 80a1c12:	601a      	strpl	r2, [r3, #0]
 80a1c14:	4b1e      	ldr	r3, [pc, #120]	; (80a1c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1c16:	681a      	ldr	r2, [r3, #0]
 80a1c18:	07d0      	lsls	r0, r2, #31
 80a1c1a:	bf5c      	itt	pl
 80a1c1c:	2201      	movpl	r2, #1
 80a1c1e:	601a      	strpl	r2, [r3, #0]
 80a1c20:	4b1c      	ldr	r3, [pc, #112]	; (80a1c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1c22:	681a      	ldr	r2, [r3, #0]
 80a1c24:	07d1      	lsls	r1, r2, #31
 80a1c26:	bf5c      	itt	pl
 80a1c28:	2201      	movpl	r2, #1
 80a1c2a:	601a      	strpl	r2, [r3, #0]
 80a1c2c:	4b1a      	ldr	r3, [pc, #104]	; (80a1c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1c2e:	681a      	ldr	r2, [r3, #0]
 80a1c30:	07d2      	lsls	r2, r2, #31
 80a1c32:	bf5c      	itt	pl
 80a1c34:	2201      	movpl	r2, #1
 80a1c36:	601a      	strpl	r2, [r3, #0]
 80a1c38:	4b18      	ldr	r3, [pc, #96]	; (80a1c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1c3a:	681a      	ldr	r2, [r3, #0]
 80a1c3c:	07d0      	lsls	r0, r2, #31
 80a1c3e:	bf5c      	itt	pl
 80a1c40:	2201      	movpl	r2, #1
 80a1c42:	601a      	strpl	r2, [r3, #0]
 80a1c44:	4b16      	ldr	r3, [pc, #88]	; (80a1ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1c46:	681a      	ldr	r2, [r3, #0]
 80a1c48:	07d1      	lsls	r1, r2, #31
 80a1c4a:	bf5c      	itt	pl
 80a1c4c:	2201      	movpl	r2, #1
 80a1c4e:	601a      	strpl	r2, [r3, #0]
 80a1c50:	4b14      	ldr	r3, [pc, #80]	; (80a1ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1c52:	681a      	ldr	r2, [r3, #0]
 80a1c54:	07d2      	lsls	r2, r2, #31
 80a1c56:	bf5c      	itt	pl
 80a1c58:	2201      	movpl	r2, #1
 80a1c5a:	601a      	strpl	r2, [r3, #0]
 80a1c5c:	4b12      	ldr	r3, [pc, #72]	; (80a1ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1c5e:	681a      	ldr	r2, [r3, #0]
 80a1c60:	07d0      	lsls	r0, r2, #31
 80a1c62:	bf5c      	itt	pl
 80a1c64:	2201      	movpl	r2, #1
 80a1c66:	601a      	strpl	r2, [r3, #0]
 80a1c68:	4b10      	ldr	r3, [pc, #64]	; (80a1cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1c6a:	681a      	ldr	r2, [r3, #0]
 80a1c6c:	07d1      	lsls	r1, r2, #31
 80a1c6e:	bf5c      	itt	pl
 80a1c70:	2201      	movpl	r2, #1
 80a1c72:	601a      	strpl	r2, [r3, #0]
 80a1c74:	4b0e      	ldr	r3, [pc, #56]	; (80a1cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1c76:	681a      	ldr	r2, [r3, #0]
 80a1c78:	07d2      	lsls	r2, r2, #31
 80a1c7a:	bf5c      	itt	pl
 80a1c7c:	2201      	movpl	r2, #1
 80a1c7e:	601a      	strpl	r2, [r3, #0]
 80a1c80:	4770      	bx	lr
 80a1c82:	bf00      	nop
 80a1c84:	20000204 	.word	0x20000204
 80a1c88:	20000200 	.word	0x20000200
 80a1c8c:	200001fc 	.word	0x200001fc
 80a1c90:	200001f8 	.word	0x200001f8
 80a1c94:	200001f4 	.word	0x200001f4
 80a1c98:	200001f0 	.word	0x200001f0
 80a1c9c:	200001ec 	.word	0x200001ec
 80a1ca0:	200001e8 	.word	0x200001e8
 80a1ca4:	200001e4 	.word	0x200001e4
 80a1ca8:	200001e0 	.word	0x200001e0
 80a1cac:	200001dc 	.word	0x200001dc
 80a1cb0:	200001d8 	.word	0x200001d8

080a1cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1cb4:	4b24      	ldr	r3, [pc, #144]	; (80a1d48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1cb6:	681a      	ldr	r2, [r3, #0]
 80a1cb8:	07d0      	lsls	r0, r2, #31
 80a1cba:	bf5c      	itt	pl
 80a1cbc:	2201      	movpl	r2, #1
 80a1cbe:	601a      	strpl	r2, [r3, #0]
 80a1cc0:	4b22      	ldr	r3, [pc, #136]	; (80a1d4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1cc2:	681a      	ldr	r2, [r3, #0]
 80a1cc4:	07d1      	lsls	r1, r2, #31
 80a1cc6:	bf5c      	itt	pl
 80a1cc8:	2201      	movpl	r2, #1
 80a1cca:	601a      	strpl	r2, [r3, #0]
 80a1ccc:	4b20      	ldr	r3, [pc, #128]	; (80a1d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1cce:	681a      	ldr	r2, [r3, #0]
 80a1cd0:	07d2      	lsls	r2, r2, #31
 80a1cd2:	bf5c      	itt	pl
 80a1cd4:	2201      	movpl	r2, #1
 80a1cd6:	601a      	strpl	r2, [r3, #0]
 80a1cd8:	4b1e      	ldr	r3, [pc, #120]	; (80a1d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1cda:	681a      	ldr	r2, [r3, #0]
 80a1cdc:	07d0      	lsls	r0, r2, #31
 80a1cde:	bf5c      	itt	pl
 80a1ce0:	2201      	movpl	r2, #1
 80a1ce2:	601a      	strpl	r2, [r3, #0]
 80a1ce4:	4b1c      	ldr	r3, [pc, #112]	; (80a1d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1ce6:	681a      	ldr	r2, [r3, #0]
 80a1ce8:	07d1      	lsls	r1, r2, #31
 80a1cea:	bf5c      	itt	pl
 80a1cec:	2201      	movpl	r2, #1
 80a1cee:	601a      	strpl	r2, [r3, #0]
 80a1cf0:	4b1a      	ldr	r3, [pc, #104]	; (80a1d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1cf2:	681a      	ldr	r2, [r3, #0]
 80a1cf4:	07d2      	lsls	r2, r2, #31
 80a1cf6:	bf5c      	itt	pl
 80a1cf8:	2201      	movpl	r2, #1
 80a1cfa:	601a      	strpl	r2, [r3, #0]
 80a1cfc:	4b18      	ldr	r3, [pc, #96]	; (80a1d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1cfe:	681a      	ldr	r2, [r3, #0]
 80a1d00:	07d0      	lsls	r0, r2, #31
 80a1d02:	bf5c      	itt	pl
 80a1d04:	2201      	movpl	r2, #1
 80a1d06:	601a      	strpl	r2, [r3, #0]
 80a1d08:	4b16      	ldr	r3, [pc, #88]	; (80a1d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1d0a:	681a      	ldr	r2, [r3, #0]
 80a1d0c:	07d1      	lsls	r1, r2, #31
 80a1d0e:	bf5c      	itt	pl
 80a1d10:	2201      	movpl	r2, #1
 80a1d12:	601a      	strpl	r2, [r3, #0]
 80a1d14:	4b14      	ldr	r3, [pc, #80]	; (80a1d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1d16:	681a      	ldr	r2, [r3, #0]
 80a1d18:	07d2      	lsls	r2, r2, #31
 80a1d1a:	bf5c      	itt	pl
 80a1d1c:	2201      	movpl	r2, #1
 80a1d1e:	601a      	strpl	r2, [r3, #0]
 80a1d20:	4b12      	ldr	r3, [pc, #72]	; (80a1d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1d22:	681a      	ldr	r2, [r3, #0]
 80a1d24:	07d0      	lsls	r0, r2, #31
 80a1d26:	bf5c      	itt	pl
 80a1d28:	2201      	movpl	r2, #1
 80a1d2a:	601a      	strpl	r2, [r3, #0]
 80a1d2c:	4b10      	ldr	r3, [pc, #64]	; (80a1d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1d2e:	681a      	ldr	r2, [r3, #0]
 80a1d30:	07d1      	lsls	r1, r2, #31
 80a1d32:	bf5c      	itt	pl
 80a1d34:	2201      	movpl	r2, #1
 80a1d36:	601a      	strpl	r2, [r3, #0]
 80a1d38:	4b0e      	ldr	r3, [pc, #56]	; (80a1d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1d3a:	681a      	ldr	r2, [r3, #0]
 80a1d3c:	07d2      	lsls	r2, r2, #31
 80a1d3e:	bf5c      	itt	pl
 80a1d40:	2201      	movpl	r2, #1
 80a1d42:	601a      	strpl	r2, [r3, #0]
 80a1d44:	4770      	bx	lr
 80a1d46:	bf00      	nop
 80a1d48:	20000234 	.word	0x20000234
 80a1d4c:	20000230 	.word	0x20000230
 80a1d50:	2000022c 	.word	0x2000022c
 80a1d54:	20000228 	.word	0x20000228
 80a1d58:	20000224 	.word	0x20000224
 80a1d5c:	20000220 	.word	0x20000220
 80a1d60:	2000021c 	.word	0x2000021c
 80a1d64:	20000218 	.word	0x20000218
 80a1d68:	20000214 	.word	0x20000214
 80a1d6c:	20000210 	.word	0x20000210
 80a1d70:	2000020c 	.word	0x2000020c
 80a1d74:	20000208 	.word	0x20000208

080a1d78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1d78:	4b18      	ldr	r3, [pc, #96]	; (80a1ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1d7a:	681a      	ldr	r2, [r3, #0]
 80a1d7c:	07d1      	lsls	r1, r2, #31
 80a1d7e:	bf5c      	itt	pl
 80a1d80:	2201      	movpl	r2, #1
 80a1d82:	601a      	strpl	r2, [r3, #0]
 80a1d84:	4b16      	ldr	r3, [pc, #88]	; (80a1de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1d86:	681a      	ldr	r2, [r3, #0]
 80a1d88:	07d2      	lsls	r2, r2, #31
 80a1d8a:	bf5c      	itt	pl
 80a1d8c:	2201      	movpl	r2, #1
 80a1d8e:	601a      	strpl	r2, [r3, #0]
 80a1d90:	4b14      	ldr	r3, [pc, #80]	; (80a1de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1d92:	681a      	ldr	r2, [r3, #0]
 80a1d94:	07d0      	lsls	r0, r2, #31
 80a1d96:	bf5c      	itt	pl
 80a1d98:	2201      	movpl	r2, #1
 80a1d9a:	601a      	strpl	r2, [r3, #0]
 80a1d9c:	4b12      	ldr	r3, [pc, #72]	; (80a1de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1d9e:	681a      	ldr	r2, [r3, #0]
 80a1da0:	07d1      	lsls	r1, r2, #31
 80a1da2:	bf5c      	itt	pl
 80a1da4:	2201      	movpl	r2, #1
 80a1da6:	601a      	strpl	r2, [r3, #0]
 80a1da8:	4b10      	ldr	r3, [pc, #64]	; (80a1dec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1daa:	681a      	ldr	r2, [r3, #0]
 80a1dac:	07d2      	lsls	r2, r2, #31
 80a1dae:	bf5c      	itt	pl
 80a1db0:	2201      	movpl	r2, #1
 80a1db2:	601a      	strpl	r2, [r3, #0]
 80a1db4:	4b0e      	ldr	r3, [pc, #56]	; (80a1df0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1db6:	681a      	ldr	r2, [r3, #0]
 80a1db8:	07d0      	lsls	r0, r2, #31
 80a1dba:	bf5c      	itt	pl
 80a1dbc:	2201      	movpl	r2, #1
 80a1dbe:	601a      	strpl	r2, [r3, #0]
 80a1dc0:	4b0c      	ldr	r3, [pc, #48]	; (80a1df4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1dc2:	681a      	ldr	r2, [r3, #0]
 80a1dc4:	07d1      	lsls	r1, r2, #31
 80a1dc6:	bf5c      	itt	pl
 80a1dc8:	2201      	movpl	r2, #1
 80a1dca:	601a      	strpl	r2, [r3, #0]
 80a1dcc:	4b0a      	ldr	r3, [pc, #40]	; (80a1df8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1dce:	681a      	ldr	r2, [r3, #0]
 80a1dd0:	07d2      	lsls	r2, r2, #31
 80a1dd2:	bf5c      	itt	pl
 80a1dd4:	2201      	movpl	r2, #1
 80a1dd6:	601a      	strpl	r2, [r3, #0]
 80a1dd8:	4770      	bx	lr
 80a1dda:	bf00      	nop
 80a1ddc:	20000254 	.word	0x20000254
 80a1de0:	20000250 	.word	0x20000250
 80a1de4:	2000024c 	.word	0x2000024c
 80a1de8:	20000248 	.word	0x20000248
 80a1dec:	20000244 	.word	0x20000244
 80a1df0:	20000240 	.word	0x20000240
 80a1df4:	2000023c 	.word	0x2000023c
 80a1df8:	20000238 	.word	0x20000238

080a1dfc <fmax>:
 80a1dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1dfe:	4614      	mov	r4, r2
 80a1e00:	461d      	mov	r5, r3
 80a1e02:	4606      	mov	r6, r0
 80a1e04:	460f      	mov	r7, r1
 80a1e06:	f000 f831 	bl	80a1e6c <__fpclassifyd>
 80a1e0a:	b910      	cbnz	r0, 80a1e12 <fmax+0x16>
 80a1e0c:	4620      	mov	r0, r4
 80a1e0e:	4629      	mov	r1, r5
 80a1e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	4629      	mov	r1, r5
 80a1e16:	f000 f829 	bl	80a1e6c <__fpclassifyd>
 80a1e1a:	b138      	cbz	r0, 80a1e2c <fmax+0x30>
 80a1e1c:	4622      	mov	r2, r4
 80a1e1e:	462b      	mov	r3, r5
 80a1e20:	4630      	mov	r0, r6
 80a1e22:	4639      	mov	r1, r7
 80a1e24:	f000 fce4 	bl	80a27f0 <__aeabi_dcmpgt>
 80a1e28:	2800      	cmp	r0, #0
 80a1e2a:	d0ef      	beq.n	80a1e0c <fmax+0x10>
 80a1e2c:	4630      	mov	r0, r6
 80a1e2e:	4639      	mov	r1, r7
 80a1e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e32:	bf00      	nop

080a1e34 <fmin>:
 80a1e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e36:	4614      	mov	r4, r2
 80a1e38:	461d      	mov	r5, r3
 80a1e3a:	4606      	mov	r6, r0
 80a1e3c:	460f      	mov	r7, r1
 80a1e3e:	f000 f815 	bl	80a1e6c <__fpclassifyd>
 80a1e42:	b910      	cbnz	r0, 80a1e4a <fmin+0x16>
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	4629      	mov	r1, r5
 80a1e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	4629      	mov	r1, r5
 80a1e4e:	f000 f80d 	bl	80a1e6c <__fpclassifyd>
 80a1e52:	b138      	cbz	r0, 80a1e64 <fmin+0x30>
 80a1e54:	4622      	mov	r2, r4
 80a1e56:	462b      	mov	r3, r5
 80a1e58:	4630      	mov	r0, r6
 80a1e5a:	4639      	mov	r1, r7
 80a1e5c:	f000 fcaa 	bl	80a27b4 <__aeabi_dcmplt>
 80a1e60:	2800      	cmp	r0, #0
 80a1e62:	d0ef      	beq.n	80a1e44 <fmin+0x10>
 80a1e64:	4630      	mov	r0, r6
 80a1e66:	4639      	mov	r1, r7
 80a1e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1e6a:	bf00      	nop

080a1e6c <__fpclassifyd>:
 80a1e6c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1e70:	b410      	push	{r4}
 80a1e72:	d007      	beq.n	80a1e84 <__fpclassifyd+0x18>
 80a1e74:	4a10      	ldr	r2, [pc, #64]	; (80a1eb8 <__fpclassifyd+0x4c>)
 80a1e76:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
 80a1e7a:	4294      	cmp	r4, r2
 80a1e7c:	d806      	bhi.n	80a1e8c <__fpclassifyd+0x20>
 80a1e7e:	2004      	movs	r0, #4
 80a1e80:	bc10      	pop	{r4}
 80a1e82:	4770      	bx	lr
 80a1e84:	b910      	cbnz	r0, 80a1e8c <__fpclassifyd+0x20>
 80a1e86:	2002      	movs	r0, #2
 80a1e88:	bc10      	pop	{r4}
 80a1e8a:	4770      	bx	lr
 80a1e8c:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
 80a1e90:	4a09      	ldr	r2, [pc, #36]	; (80a1eb8 <__fpclassifyd+0x4c>)
 80a1e92:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
 80a1e96:	4291      	cmp	r1, r2
 80a1e98:	d9f1      	bls.n	80a1e7e <__fpclassifyd+0x12>
 80a1e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80a1e9e:	d201      	bcs.n	80a1ea4 <__fpclassifyd+0x38>
 80a1ea0:	2003      	movs	r0, #3
 80a1ea2:	e7ed      	b.n	80a1e80 <__fpclassifyd+0x14>
 80a1ea4:	4a05      	ldr	r2, [pc, #20]	; (80a1ebc <__fpclassifyd+0x50>)
 80a1ea6:	4293      	cmp	r3, r2
 80a1ea8:	d001      	beq.n	80a1eae <__fpclassifyd+0x42>
 80a1eaa:	2000      	movs	r0, #0
 80a1eac:	e7e8      	b.n	80a1e80 <__fpclassifyd+0x14>
 80a1eae:	fab0 f080 	clz	r0, r0
 80a1eb2:	0940      	lsrs	r0, r0, #5
 80a1eb4:	e7e4      	b.n	80a1e80 <__fpclassifyd+0x14>
 80a1eb6:	bf00      	nop
 80a1eb8:	7fdfffff 	.word	0x7fdfffff
 80a1ebc:	7ff00000 	.word	0x7ff00000

080a1ec0 <round>:
 80a1ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ec2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 80a1ec6:	f2a6 35ff 	subw	r5, r6, #1023	; 0x3ff
 80a1eca:	2d13      	cmp	r5, #19
 80a1ecc:	460a      	mov	r2, r1
 80a1ece:	460b      	mov	r3, r1
 80a1ed0:	4604      	mov	r4, r0
 80a1ed2:	4686      	mov	lr, r0
 80a1ed4:	dc11      	bgt.n	80a1efa <round+0x3a>
 80a1ed6:	2d00      	cmp	r5, #0
 80a1ed8:	db2e      	blt.n	80a1f38 <round+0x78>
 80a1eda:	460f      	mov	r7, r1
 80a1edc:	491f      	ldr	r1, [pc, #124]	; (80a1f5c <round+0x9c>)
 80a1ede:	4129      	asrs	r1, r5
 80a1ee0:	420a      	tst	r2, r1
 80a1ee2:	d025      	beq.n	80a1f30 <round+0x70>
 80a1ee4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a1ee8:	412b      	asrs	r3, r5
 80a1eea:	443b      	add	r3, r7
 80a1eec:	ea23 0301 	bic.w	r3, r3, r1
 80a1ef0:	2600      	movs	r6, #0
 80a1ef2:	4619      	mov	r1, r3
 80a1ef4:	4634      	mov	r4, r6
 80a1ef6:	4620      	mov	r0, r4
 80a1ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1efa:	2d33      	cmp	r5, #51	; 0x33
 80a1efc:	dd05      	ble.n	80a1f0a <round+0x4a>
 80a1efe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a1f02:	d01f      	beq.n	80a1f44 <round+0x84>
 80a1f04:	4611      	mov	r1, r2
 80a1f06:	4620      	mov	r0, r4
 80a1f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1f0a:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 80a1f0e:	f04f 31ff 	mov.w	r1, #4294967295
 80a1f12:	fa21 f606 	lsr.w	r6, r1, r6
 80a1f16:	4230      	tst	r0, r6
 80a1f18:	d0f4      	beq.n	80a1f04 <round+0x44>
 80a1f1a:	2201      	movs	r2, #1
 80a1f1c:	f1c5 0533 	rsb	r5, r5, #51	; 0x33
 80a1f20:	fa02 f505 	lsl.w	r5, r2, r5
 80a1f24:	182d      	adds	r5, r5, r0
 80a1f26:	bf28      	it	cs
 80a1f28:	189b      	addcs	r3, r3, r2
 80a1f2a:	ea25 0606 	bic.w	r6, r5, r6
 80a1f2e:	e7e0      	b.n	80a1ef2 <round+0x32>
 80a1f30:	2800      	cmp	r0, #0
 80a1f32:	d1d7      	bne.n	80a1ee4 <round+0x24>
 80a1f34:	4611      	mov	r1, r2
 80a1f36:	e7e6      	b.n	80a1f06 <round+0x46>
 80a1f38:	3501      	adds	r5, #1
 80a1f3a:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80a1f3e:	d007      	beq.n	80a1f50 <round+0x90>
 80a1f40:	2600      	movs	r6, #0
 80a1f42:	e7d6      	b.n	80a1ef2 <round+0x32>
 80a1f44:	4602      	mov	r2, r0
 80a1f46:	460b      	mov	r3, r1
 80a1f48:	f000 f810 	bl	80a1f6c <__adddf3>
 80a1f4c:	4604      	mov	r4, r0
 80a1f4e:	e7d2      	b.n	80a1ef6 <round+0x36>
 80a1f50:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80a1f54:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a1f58:	2600      	movs	r6, #0
 80a1f5a:	e7ca      	b.n	80a1ef2 <round+0x32>
 80a1f5c:	000fffff 	.word	0x000fffff

080a1f60 <__aeabi_drsub>:
 80a1f60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a1f64:	e002      	b.n	80a1f6c <__adddf3>
 80a1f66:	bf00      	nop

080a1f68 <__aeabi_dsub>:
 80a1f68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a1f6c <__adddf3>:
 80a1f6c:	b530      	push	{r4, r5, lr}
 80a1f6e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a1f72:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a1f76:	ea94 0f05 	teq	r4, r5
 80a1f7a:	bf08      	it	eq
 80a1f7c:	ea90 0f02 	teqeq	r0, r2
 80a1f80:	bf1f      	itttt	ne
 80a1f82:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a1f86:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a1f8a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a1f8e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a1f92:	f000 80e2 	beq.w	80a215a <__adddf3+0x1ee>
 80a1f96:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a1f9a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a1f9e:	bfb8      	it	lt
 80a1fa0:	426d      	neglt	r5, r5
 80a1fa2:	dd0c      	ble.n	80a1fbe <__adddf3+0x52>
 80a1fa4:	442c      	add	r4, r5
 80a1fa6:	ea80 0202 	eor.w	r2, r0, r2
 80a1faa:	ea81 0303 	eor.w	r3, r1, r3
 80a1fae:	ea82 0000 	eor.w	r0, r2, r0
 80a1fb2:	ea83 0101 	eor.w	r1, r3, r1
 80a1fb6:	ea80 0202 	eor.w	r2, r0, r2
 80a1fba:	ea81 0303 	eor.w	r3, r1, r3
 80a1fbe:	2d36      	cmp	r5, #54	; 0x36
 80a1fc0:	bf88      	it	hi
 80a1fc2:	bd30      	pophi	{r4, r5, pc}
 80a1fc4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a1fc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a1fcc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a1fd0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a1fd4:	d002      	beq.n	80a1fdc <__adddf3+0x70>
 80a1fd6:	4240      	negs	r0, r0
 80a1fd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1fdc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a1fe0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a1fe4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a1fe8:	d002      	beq.n	80a1ff0 <__adddf3+0x84>
 80a1fea:	4252      	negs	r2, r2
 80a1fec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a1ff0:	ea94 0f05 	teq	r4, r5
 80a1ff4:	f000 80a7 	beq.w	80a2146 <__adddf3+0x1da>
 80a1ff8:	f1a4 0401 	sub.w	r4, r4, #1
 80a1ffc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a2000:	db0d      	blt.n	80a201e <__adddf3+0xb2>
 80a2002:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a2006:	fa22 f205 	lsr.w	r2, r2, r5
 80a200a:	1880      	adds	r0, r0, r2
 80a200c:	f141 0100 	adc.w	r1, r1, #0
 80a2010:	fa03 f20e 	lsl.w	r2, r3, lr
 80a2014:	1880      	adds	r0, r0, r2
 80a2016:	fa43 f305 	asr.w	r3, r3, r5
 80a201a:	4159      	adcs	r1, r3
 80a201c:	e00e      	b.n	80a203c <__adddf3+0xd0>
 80a201e:	f1a5 0520 	sub.w	r5, r5, #32
 80a2022:	f10e 0e20 	add.w	lr, lr, #32
 80a2026:	2a01      	cmp	r2, #1
 80a2028:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a202c:	bf28      	it	cs
 80a202e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a2032:	fa43 f305 	asr.w	r3, r3, r5
 80a2036:	18c0      	adds	r0, r0, r3
 80a2038:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a203c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2040:	d507      	bpl.n	80a2052 <__adddf3+0xe6>
 80a2042:	f04f 0e00 	mov.w	lr, #0
 80a2046:	f1dc 0c00 	rsbs	ip, ip, #0
 80a204a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a204e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a2052:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a2056:	d31b      	bcc.n	80a2090 <__adddf3+0x124>
 80a2058:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a205c:	d30c      	bcc.n	80a2078 <__adddf3+0x10c>
 80a205e:	0849      	lsrs	r1, r1, #1
 80a2060:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2064:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2068:	f104 0401 	add.w	r4, r4, #1
 80a206c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2070:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2074:	f080 809a 	bcs.w	80a21ac <__adddf3+0x240>
 80a2078:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a207c:	bf08      	it	eq
 80a207e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2082:	f150 0000 	adcs.w	r0, r0, #0
 80a2086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a208a:	ea41 0105 	orr.w	r1, r1, r5
 80a208e:	bd30      	pop	{r4, r5, pc}
 80a2090:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2094:	4140      	adcs	r0, r0
 80a2096:	eb41 0101 	adc.w	r1, r1, r1
 80a209a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a209e:	f1a4 0401 	sub.w	r4, r4, #1
 80a20a2:	d1e9      	bne.n	80a2078 <__adddf3+0x10c>
 80a20a4:	f091 0f00 	teq	r1, #0
 80a20a8:	bf04      	itt	eq
 80a20aa:	4601      	moveq	r1, r0
 80a20ac:	2000      	moveq	r0, #0
 80a20ae:	fab1 f381 	clz	r3, r1
 80a20b2:	bf08      	it	eq
 80a20b4:	3320      	addeq	r3, #32
 80a20b6:	f1a3 030b 	sub.w	r3, r3, #11
 80a20ba:	f1b3 0220 	subs.w	r2, r3, #32
 80a20be:	da0c      	bge.n	80a20da <__adddf3+0x16e>
 80a20c0:	320c      	adds	r2, #12
 80a20c2:	dd08      	ble.n	80a20d6 <__adddf3+0x16a>
 80a20c4:	f102 0c14 	add.w	ip, r2, #20
 80a20c8:	f1c2 020c 	rsb	r2, r2, #12
 80a20cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a20d0:	fa21 f102 	lsr.w	r1, r1, r2
 80a20d4:	e00c      	b.n	80a20f0 <__adddf3+0x184>
 80a20d6:	f102 0214 	add.w	r2, r2, #20
 80a20da:	bfd8      	it	le
 80a20dc:	f1c2 0c20 	rsble	ip, r2, #32
 80a20e0:	fa01 f102 	lsl.w	r1, r1, r2
 80a20e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a20e8:	bfdc      	itt	le
 80a20ea:	ea41 010c 	orrle.w	r1, r1, ip
 80a20ee:	4090      	lslle	r0, r2
 80a20f0:	1ae4      	subs	r4, r4, r3
 80a20f2:	bfa2      	ittt	ge
 80a20f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a20f8:	4329      	orrge	r1, r5
 80a20fa:	bd30      	popge	{r4, r5, pc}
 80a20fc:	ea6f 0404 	mvn.w	r4, r4
 80a2100:	3c1f      	subs	r4, #31
 80a2102:	da1c      	bge.n	80a213e <__adddf3+0x1d2>
 80a2104:	340c      	adds	r4, #12
 80a2106:	dc0e      	bgt.n	80a2126 <__adddf3+0x1ba>
 80a2108:	f104 0414 	add.w	r4, r4, #20
 80a210c:	f1c4 0220 	rsb	r2, r4, #32
 80a2110:	fa20 f004 	lsr.w	r0, r0, r4
 80a2114:	fa01 f302 	lsl.w	r3, r1, r2
 80a2118:	ea40 0003 	orr.w	r0, r0, r3
 80a211c:	fa21 f304 	lsr.w	r3, r1, r4
 80a2120:	ea45 0103 	orr.w	r1, r5, r3
 80a2124:	bd30      	pop	{r4, r5, pc}
 80a2126:	f1c4 040c 	rsb	r4, r4, #12
 80a212a:	f1c4 0220 	rsb	r2, r4, #32
 80a212e:	fa20 f002 	lsr.w	r0, r0, r2
 80a2132:	fa01 f304 	lsl.w	r3, r1, r4
 80a2136:	ea40 0003 	orr.w	r0, r0, r3
 80a213a:	4629      	mov	r1, r5
 80a213c:	bd30      	pop	{r4, r5, pc}
 80a213e:	fa21 f004 	lsr.w	r0, r1, r4
 80a2142:	4629      	mov	r1, r5
 80a2144:	bd30      	pop	{r4, r5, pc}
 80a2146:	f094 0f00 	teq	r4, #0
 80a214a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a214e:	bf06      	itte	eq
 80a2150:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2154:	3401      	addeq	r4, #1
 80a2156:	3d01      	subne	r5, #1
 80a2158:	e74e      	b.n	80a1ff8 <__adddf3+0x8c>
 80a215a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a215e:	bf18      	it	ne
 80a2160:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2164:	d029      	beq.n	80a21ba <__adddf3+0x24e>
 80a2166:	ea94 0f05 	teq	r4, r5
 80a216a:	bf08      	it	eq
 80a216c:	ea90 0f02 	teqeq	r0, r2
 80a2170:	d005      	beq.n	80a217e <__adddf3+0x212>
 80a2172:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2176:	bf04      	itt	eq
 80a2178:	4619      	moveq	r1, r3
 80a217a:	4610      	moveq	r0, r2
 80a217c:	bd30      	pop	{r4, r5, pc}
 80a217e:	ea91 0f03 	teq	r1, r3
 80a2182:	bf1e      	ittt	ne
 80a2184:	2100      	movne	r1, #0
 80a2186:	2000      	movne	r0, #0
 80a2188:	bd30      	popne	{r4, r5, pc}
 80a218a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a218e:	d105      	bne.n	80a219c <__adddf3+0x230>
 80a2190:	0040      	lsls	r0, r0, #1
 80a2192:	4149      	adcs	r1, r1
 80a2194:	bf28      	it	cs
 80a2196:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a219a:	bd30      	pop	{r4, r5, pc}
 80a219c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a21a0:	bf3c      	itt	cc
 80a21a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a21a6:	bd30      	popcc	{r4, r5, pc}
 80a21a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a21ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a21b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a21b4:	f04f 0000 	mov.w	r0, #0
 80a21b8:	bd30      	pop	{r4, r5, pc}
 80a21ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a21be:	bf1a      	itte	ne
 80a21c0:	4619      	movne	r1, r3
 80a21c2:	4610      	movne	r0, r2
 80a21c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a21c8:	bf1c      	itt	ne
 80a21ca:	460b      	movne	r3, r1
 80a21cc:	4602      	movne	r2, r0
 80a21ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a21d2:	bf06      	itte	eq
 80a21d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a21d8:	ea91 0f03 	teqeq	r1, r3
 80a21dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a21e0:	bd30      	pop	{r4, r5, pc}
 80a21e2:	bf00      	nop

080a21e4 <__aeabi_ui2d>:
 80a21e4:	f090 0f00 	teq	r0, #0
 80a21e8:	bf04      	itt	eq
 80a21ea:	2100      	moveq	r1, #0
 80a21ec:	4770      	bxeq	lr
 80a21ee:	b530      	push	{r4, r5, lr}
 80a21f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a21f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a21f8:	f04f 0500 	mov.w	r5, #0
 80a21fc:	f04f 0100 	mov.w	r1, #0
 80a2200:	e750      	b.n	80a20a4 <__adddf3+0x138>
 80a2202:	bf00      	nop

080a2204 <__aeabi_i2d>:
 80a2204:	f090 0f00 	teq	r0, #0
 80a2208:	bf04      	itt	eq
 80a220a:	2100      	moveq	r1, #0
 80a220c:	4770      	bxeq	lr
 80a220e:	b530      	push	{r4, r5, lr}
 80a2210:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2214:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2218:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a221c:	bf48      	it	mi
 80a221e:	4240      	negmi	r0, r0
 80a2220:	f04f 0100 	mov.w	r1, #0
 80a2224:	e73e      	b.n	80a20a4 <__adddf3+0x138>
 80a2226:	bf00      	nop

080a2228 <__aeabi_f2d>:
 80a2228:	0042      	lsls	r2, r0, #1
 80a222a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a222e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2232:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2236:	bf1f      	itttt	ne
 80a2238:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a223c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2240:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2244:	4770      	bxne	lr
 80a2246:	f092 0f00 	teq	r2, #0
 80a224a:	bf14      	ite	ne
 80a224c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2250:	4770      	bxeq	lr
 80a2252:	b530      	push	{r4, r5, lr}
 80a2254:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a225c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2260:	e720      	b.n	80a20a4 <__adddf3+0x138>
 80a2262:	bf00      	nop

080a2264 <__aeabi_ul2d>:
 80a2264:	ea50 0201 	orrs.w	r2, r0, r1
 80a2268:	bf08      	it	eq
 80a226a:	4770      	bxeq	lr
 80a226c:	b530      	push	{r4, r5, lr}
 80a226e:	f04f 0500 	mov.w	r5, #0
 80a2272:	e00a      	b.n	80a228a <__aeabi_l2d+0x16>

080a2274 <__aeabi_l2d>:
 80a2274:	ea50 0201 	orrs.w	r2, r0, r1
 80a2278:	bf08      	it	eq
 80a227a:	4770      	bxeq	lr
 80a227c:	b530      	push	{r4, r5, lr}
 80a227e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2282:	d502      	bpl.n	80a228a <__aeabi_l2d+0x16>
 80a2284:	4240      	negs	r0, r0
 80a2286:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a228a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a228e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2292:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2296:	f43f aedc 	beq.w	80a2052 <__adddf3+0xe6>
 80a229a:	f04f 0203 	mov.w	r2, #3
 80a229e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a22a2:	bf18      	it	ne
 80a22a4:	3203      	addne	r2, #3
 80a22a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a22aa:	bf18      	it	ne
 80a22ac:	3203      	addne	r2, #3
 80a22ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a22b2:	f1c2 0320 	rsb	r3, r2, #32
 80a22b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a22ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a22be:	fa01 fe03 	lsl.w	lr, r1, r3
 80a22c2:	ea40 000e 	orr.w	r0, r0, lr
 80a22c6:	fa21 f102 	lsr.w	r1, r1, r2
 80a22ca:	4414      	add	r4, r2
 80a22cc:	e6c1      	b.n	80a2052 <__adddf3+0xe6>
 80a22ce:	bf00      	nop

080a22d0 <__aeabi_dmul>:
 80a22d0:	b570      	push	{r4, r5, r6, lr}
 80a22d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a22d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a22da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a22de:	bf1d      	ittte	ne
 80a22e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a22e4:	ea94 0f0c 	teqne	r4, ip
 80a22e8:	ea95 0f0c 	teqne	r5, ip
 80a22ec:	f000 f8de 	bleq	80a24ac <__aeabi_dmul+0x1dc>
 80a22f0:	442c      	add	r4, r5
 80a22f2:	ea81 0603 	eor.w	r6, r1, r3
 80a22f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a22fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a22fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2302:	bf18      	it	ne
 80a2304:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a230c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2310:	d038      	beq.n	80a2384 <__aeabi_dmul+0xb4>
 80a2312:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2316:	f04f 0500 	mov.w	r5, #0
 80a231a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a231e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2322:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2326:	f04f 0600 	mov.w	r6, #0
 80a232a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a232e:	f09c 0f00 	teq	ip, #0
 80a2332:	bf18      	it	ne
 80a2334:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2338:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a233c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2340:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2344:	d204      	bcs.n	80a2350 <__aeabi_dmul+0x80>
 80a2346:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a234a:	416d      	adcs	r5, r5
 80a234c:	eb46 0606 	adc.w	r6, r6, r6
 80a2350:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2354:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2358:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a235c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2360:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2364:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2368:	bf88      	it	hi
 80a236a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a236e:	d81e      	bhi.n	80a23ae <__aeabi_dmul+0xde>
 80a2370:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2374:	bf08      	it	eq
 80a2376:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a237a:	f150 0000 	adcs.w	r0, r0, #0
 80a237e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2382:	bd70      	pop	{r4, r5, r6, pc}
 80a2384:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2388:	ea46 0101 	orr.w	r1, r6, r1
 80a238c:	ea40 0002 	orr.w	r0, r0, r2
 80a2390:	ea81 0103 	eor.w	r1, r1, r3
 80a2394:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2398:	bfc2      	ittt	gt
 80a239a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a239e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a23a2:	bd70      	popgt	{r4, r5, r6, pc}
 80a23a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23a8:	f04f 0e00 	mov.w	lr, #0
 80a23ac:	3c01      	subs	r4, #1
 80a23ae:	f300 80ab 	bgt.w	80a2508 <__aeabi_dmul+0x238>
 80a23b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a23b6:	bfde      	ittt	le
 80a23b8:	2000      	movle	r0, #0
 80a23ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a23be:	bd70      	pople	{r4, r5, r6, pc}
 80a23c0:	f1c4 0400 	rsb	r4, r4, #0
 80a23c4:	3c20      	subs	r4, #32
 80a23c6:	da35      	bge.n	80a2434 <__aeabi_dmul+0x164>
 80a23c8:	340c      	adds	r4, #12
 80a23ca:	dc1b      	bgt.n	80a2404 <__aeabi_dmul+0x134>
 80a23cc:	f104 0414 	add.w	r4, r4, #20
 80a23d0:	f1c4 0520 	rsb	r5, r4, #32
 80a23d4:	fa00 f305 	lsl.w	r3, r0, r5
 80a23d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a23dc:	fa01 f205 	lsl.w	r2, r1, r5
 80a23e0:	ea40 0002 	orr.w	r0, r0, r2
 80a23e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a23e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a23ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a23f0:	fa21 f604 	lsr.w	r6, r1, r4
 80a23f4:	eb42 0106 	adc.w	r1, r2, r6
 80a23f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a23fc:	bf08      	it	eq
 80a23fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2402:	bd70      	pop	{r4, r5, r6, pc}
 80a2404:	f1c4 040c 	rsb	r4, r4, #12
 80a2408:	f1c4 0520 	rsb	r5, r4, #32
 80a240c:	fa00 f304 	lsl.w	r3, r0, r4
 80a2410:	fa20 f005 	lsr.w	r0, r0, r5
 80a2414:	fa01 f204 	lsl.w	r2, r1, r4
 80a2418:	ea40 0002 	orr.w	r0, r0, r2
 80a241c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2424:	f141 0100 	adc.w	r1, r1, #0
 80a2428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a242c:	bf08      	it	eq
 80a242e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2432:	bd70      	pop	{r4, r5, r6, pc}
 80a2434:	f1c4 0520 	rsb	r5, r4, #32
 80a2438:	fa00 f205 	lsl.w	r2, r0, r5
 80a243c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2440:	fa20 f304 	lsr.w	r3, r0, r4
 80a2444:	fa01 f205 	lsl.w	r2, r1, r5
 80a2448:	ea43 0302 	orr.w	r3, r3, r2
 80a244c:	fa21 f004 	lsr.w	r0, r1, r4
 80a2450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2454:	fa21 f204 	lsr.w	r2, r1, r4
 80a2458:	ea20 0002 	bic.w	r0, r0, r2
 80a245c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2460:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2464:	bf08      	it	eq
 80a2466:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a246a:	bd70      	pop	{r4, r5, r6, pc}
 80a246c:	f094 0f00 	teq	r4, #0
 80a2470:	d10f      	bne.n	80a2492 <__aeabi_dmul+0x1c2>
 80a2472:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2476:	0040      	lsls	r0, r0, #1
 80a2478:	eb41 0101 	adc.w	r1, r1, r1
 80a247c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2480:	bf08      	it	eq
 80a2482:	3c01      	subeq	r4, #1
 80a2484:	d0f7      	beq.n	80a2476 <__aeabi_dmul+0x1a6>
 80a2486:	ea41 0106 	orr.w	r1, r1, r6
 80a248a:	f095 0f00 	teq	r5, #0
 80a248e:	bf18      	it	ne
 80a2490:	4770      	bxne	lr
 80a2492:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2496:	0052      	lsls	r2, r2, #1
 80a2498:	eb43 0303 	adc.w	r3, r3, r3
 80a249c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a24a0:	bf08      	it	eq
 80a24a2:	3d01      	subeq	r5, #1
 80a24a4:	d0f7      	beq.n	80a2496 <__aeabi_dmul+0x1c6>
 80a24a6:	ea43 0306 	orr.w	r3, r3, r6
 80a24aa:	4770      	bx	lr
 80a24ac:	ea94 0f0c 	teq	r4, ip
 80a24b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a24b4:	bf18      	it	ne
 80a24b6:	ea95 0f0c 	teqne	r5, ip
 80a24ba:	d00c      	beq.n	80a24d6 <__aeabi_dmul+0x206>
 80a24bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a24c0:	bf18      	it	ne
 80a24c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a24c6:	d1d1      	bne.n	80a246c <__aeabi_dmul+0x19c>
 80a24c8:	ea81 0103 	eor.w	r1, r1, r3
 80a24cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a24d0:	f04f 0000 	mov.w	r0, #0
 80a24d4:	bd70      	pop	{r4, r5, r6, pc}
 80a24d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a24da:	bf06      	itte	eq
 80a24dc:	4610      	moveq	r0, r2
 80a24de:	4619      	moveq	r1, r3
 80a24e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a24e4:	d019      	beq.n	80a251a <__aeabi_dmul+0x24a>
 80a24e6:	ea94 0f0c 	teq	r4, ip
 80a24ea:	d102      	bne.n	80a24f2 <__aeabi_dmul+0x222>
 80a24ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a24f0:	d113      	bne.n	80a251a <__aeabi_dmul+0x24a>
 80a24f2:	ea95 0f0c 	teq	r5, ip
 80a24f6:	d105      	bne.n	80a2504 <__aeabi_dmul+0x234>
 80a24f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a24fc:	bf1c      	itt	ne
 80a24fe:	4610      	movne	r0, r2
 80a2500:	4619      	movne	r1, r3
 80a2502:	d10a      	bne.n	80a251a <__aeabi_dmul+0x24a>
 80a2504:	ea81 0103 	eor.w	r1, r1, r3
 80a2508:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a250c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2514:	f04f 0000 	mov.w	r0, #0
 80a2518:	bd70      	pop	{r4, r5, r6, pc}
 80a251a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a251e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2522:	bd70      	pop	{r4, r5, r6, pc}

080a2524 <__aeabi_ddiv>:
 80a2524:	b570      	push	{r4, r5, r6, lr}
 80a2526:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a252a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a252e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2532:	bf1d      	ittte	ne
 80a2534:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2538:	ea94 0f0c 	teqne	r4, ip
 80a253c:	ea95 0f0c 	teqne	r5, ip
 80a2540:	f000 f8a7 	bleq	80a2692 <__aeabi_ddiv+0x16e>
 80a2544:	eba4 0405 	sub.w	r4, r4, r5
 80a2548:	ea81 0e03 	eor.w	lr, r1, r3
 80a254c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2554:	f000 8088 	beq.w	80a2668 <__aeabi_ddiv+0x144>
 80a2558:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a255c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2560:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2564:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2568:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a256c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2570:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2574:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2578:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a257c:	429d      	cmp	r5, r3
 80a257e:	bf08      	it	eq
 80a2580:	4296      	cmpeq	r6, r2
 80a2582:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2586:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a258a:	d202      	bcs.n	80a2592 <__aeabi_ddiv+0x6e>
 80a258c:	085b      	lsrs	r3, r3, #1
 80a258e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2592:	1ab6      	subs	r6, r6, r2
 80a2594:	eb65 0503 	sbc.w	r5, r5, r3
 80a2598:	085b      	lsrs	r3, r3, #1
 80a259a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a259e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a25a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a25a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a25ae:	bf22      	ittt	cs
 80a25b0:	1ab6      	subcs	r6, r6, r2
 80a25b2:	4675      	movcs	r5, lr
 80a25b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a25b8:	085b      	lsrs	r3, r3, #1
 80a25ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25be:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a25c6:	bf22      	ittt	cs
 80a25c8:	1ab6      	subcs	r6, r6, r2
 80a25ca:	4675      	movcs	r5, lr
 80a25cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a25d0:	085b      	lsrs	r3, r3, #1
 80a25d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a25de:	bf22      	ittt	cs
 80a25e0:	1ab6      	subcs	r6, r6, r2
 80a25e2:	4675      	movcs	r5, lr
 80a25e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a25e8:	085b      	lsrs	r3, r3, #1
 80a25ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a25ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a25f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a25f6:	bf22      	ittt	cs
 80a25f8:	1ab6      	subcs	r6, r6, r2
 80a25fa:	4675      	movcs	r5, lr
 80a25fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2600:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2604:	d018      	beq.n	80a2638 <__aeabi_ddiv+0x114>
 80a2606:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a260a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a260e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2612:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2616:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a261a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a261e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2622:	d1c0      	bne.n	80a25a6 <__aeabi_ddiv+0x82>
 80a2624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2628:	d10b      	bne.n	80a2642 <__aeabi_ddiv+0x11e>
 80a262a:	ea41 0100 	orr.w	r1, r1, r0
 80a262e:	f04f 0000 	mov.w	r0, #0
 80a2632:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2636:	e7b6      	b.n	80a25a6 <__aeabi_ddiv+0x82>
 80a2638:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a263c:	bf04      	itt	eq
 80a263e:	4301      	orreq	r1, r0
 80a2640:	2000      	moveq	r0, #0
 80a2642:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2646:	bf88      	it	hi
 80a2648:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a264c:	f63f aeaf 	bhi.w	80a23ae <__aeabi_dmul+0xde>
 80a2650:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2654:	bf04      	itt	eq
 80a2656:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a265a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a265e:	f150 0000 	adcs.w	r0, r0, #0
 80a2662:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2666:	bd70      	pop	{r4, r5, r6, pc}
 80a2668:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a266c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a2670:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2674:	bfc2      	ittt	gt
 80a2676:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a267a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a267e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2684:	f04f 0e00 	mov.w	lr, #0
 80a2688:	3c01      	subs	r4, #1
 80a268a:	e690      	b.n	80a23ae <__aeabi_dmul+0xde>
 80a268c:	ea45 0e06 	orr.w	lr, r5, r6
 80a2690:	e68d      	b.n	80a23ae <__aeabi_dmul+0xde>
 80a2692:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2696:	ea94 0f0c 	teq	r4, ip
 80a269a:	bf08      	it	eq
 80a269c:	ea95 0f0c 	teqeq	r5, ip
 80a26a0:	f43f af3b 	beq.w	80a251a <__aeabi_dmul+0x24a>
 80a26a4:	ea94 0f0c 	teq	r4, ip
 80a26a8:	d10a      	bne.n	80a26c0 <__aeabi_ddiv+0x19c>
 80a26aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a26ae:	f47f af34 	bne.w	80a251a <__aeabi_dmul+0x24a>
 80a26b2:	ea95 0f0c 	teq	r5, ip
 80a26b6:	f47f af25 	bne.w	80a2504 <__aeabi_dmul+0x234>
 80a26ba:	4610      	mov	r0, r2
 80a26bc:	4619      	mov	r1, r3
 80a26be:	e72c      	b.n	80a251a <__aeabi_dmul+0x24a>
 80a26c0:	ea95 0f0c 	teq	r5, ip
 80a26c4:	d106      	bne.n	80a26d4 <__aeabi_ddiv+0x1b0>
 80a26c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a26ca:	f43f aefd 	beq.w	80a24c8 <__aeabi_dmul+0x1f8>
 80a26ce:	4610      	mov	r0, r2
 80a26d0:	4619      	mov	r1, r3
 80a26d2:	e722      	b.n	80a251a <__aeabi_dmul+0x24a>
 80a26d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a26d8:	bf18      	it	ne
 80a26da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a26de:	f47f aec5 	bne.w	80a246c <__aeabi_dmul+0x19c>
 80a26e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a26e6:	f47f af0d 	bne.w	80a2504 <__aeabi_dmul+0x234>
 80a26ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a26ee:	f47f aeeb 	bne.w	80a24c8 <__aeabi_dmul+0x1f8>
 80a26f2:	e712      	b.n	80a251a <__aeabi_dmul+0x24a>

080a26f4 <__gedf2>:
 80a26f4:	f04f 3cff 	mov.w	ip, #4294967295
 80a26f8:	e006      	b.n	80a2708 <__cmpdf2+0x4>
 80a26fa:	bf00      	nop

080a26fc <__ledf2>:
 80a26fc:	f04f 0c01 	mov.w	ip, #1
 80a2700:	e002      	b.n	80a2708 <__cmpdf2+0x4>
 80a2702:	bf00      	nop

080a2704 <__cmpdf2>:
 80a2704:	f04f 0c01 	mov.w	ip, #1
 80a2708:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a270c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2710:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2714:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2718:	bf18      	it	ne
 80a271a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a271e:	d01b      	beq.n	80a2758 <__cmpdf2+0x54>
 80a2720:	b001      	add	sp, #4
 80a2722:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a2726:	bf0c      	ite	eq
 80a2728:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a272c:	ea91 0f03 	teqne	r1, r3
 80a2730:	bf02      	ittt	eq
 80a2732:	ea90 0f02 	teqeq	r0, r2
 80a2736:	2000      	moveq	r0, #0
 80a2738:	4770      	bxeq	lr
 80a273a:	f110 0f00 	cmn.w	r0, #0
 80a273e:	ea91 0f03 	teq	r1, r3
 80a2742:	bf58      	it	pl
 80a2744:	4299      	cmppl	r1, r3
 80a2746:	bf08      	it	eq
 80a2748:	4290      	cmpeq	r0, r2
 80a274a:	bf2c      	ite	cs
 80a274c:	17d8      	asrcs	r0, r3, #31
 80a274e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a2752:	f040 0001 	orr.w	r0, r0, #1
 80a2756:	4770      	bx	lr
 80a2758:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a275c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2760:	d102      	bne.n	80a2768 <__cmpdf2+0x64>
 80a2762:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2766:	d107      	bne.n	80a2778 <__cmpdf2+0x74>
 80a2768:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a276c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a2770:	d1d6      	bne.n	80a2720 <__cmpdf2+0x1c>
 80a2772:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2776:	d0d3      	beq.n	80a2720 <__cmpdf2+0x1c>
 80a2778:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a277c:	4770      	bx	lr
 80a277e:	bf00      	nop

080a2780 <__aeabi_cdrcmple>:
 80a2780:	4684      	mov	ip, r0
 80a2782:	4610      	mov	r0, r2
 80a2784:	4662      	mov	r2, ip
 80a2786:	468c      	mov	ip, r1
 80a2788:	4619      	mov	r1, r3
 80a278a:	4663      	mov	r3, ip
 80a278c:	e000      	b.n	80a2790 <__aeabi_cdcmpeq>
 80a278e:	bf00      	nop

080a2790 <__aeabi_cdcmpeq>:
 80a2790:	b501      	push	{r0, lr}
 80a2792:	f7ff ffb7 	bl	80a2704 <__cmpdf2>
 80a2796:	2800      	cmp	r0, #0
 80a2798:	bf48      	it	mi
 80a279a:	f110 0f00 	cmnmi.w	r0, #0
 80a279e:	bd01      	pop	{r0, pc}

080a27a0 <__aeabi_dcmpeq>:
 80a27a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27a4:	f7ff fff4 	bl	80a2790 <__aeabi_cdcmpeq>
 80a27a8:	bf0c      	ite	eq
 80a27aa:	2001      	moveq	r0, #1
 80a27ac:	2000      	movne	r0, #0
 80a27ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27b2:	bf00      	nop

080a27b4 <__aeabi_dcmplt>:
 80a27b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27b8:	f7ff ffea 	bl	80a2790 <__aeabi_cdcmpeq>
 80a27bc:	bf34      	ite	cc
 80a27be:	2001      	movcc	r0, #1
 80a27c0:	2000      	movcs	r0, #0
 80a27c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27c6:	bf00      	nop

080a27c8 <__aeabi_dcmple>:
 80a27c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27cc:	f7ff ffe0 	bl	80a2790 <__aeabi_cdcmpeq>
 80a27d0:	bf94      	ite	ls
 80a27d2:	2001      	movls	r0, #1
 80a27d4:	2000      	movhi	r0, #0
 80a27d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27da:	bf00      	nop

080a27dc <__aeabi_dcmpge>:
 80a27dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27e0:	f7ff ffce 	bl	80a2780 <__aeabi_cdrcmple>
 80a27e4:	bf94      	ite	ls
 80a27e6:	2001      	movls	r0, #1
 80a27e8:	2000      	movhi	r0, #0
 80a27ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a27ee:	bf00      	nop

080a27f0 <__aeabi_dcmpgt>:
 80a27f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a27f4:	f7ff ffc4 	bl	80a2780 <__aeabi_cdrcmple>
 80a27f8:	bf34      	ite	cc
 80a27fa:	2001      	movcc	r0, #1
 80a27fc:	2000      	movcs	r0, #0
 80a27fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2802:	bf00      	nop

080a2804 <__aeabi_dcmpun>:
 80a2804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a2808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a280c:	d102      	bne.n	80a2814 <__aeabi_dcmpun+0x10>
 80a280e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2812:	d10a      	bne.n	80a282a <__aeabi_dcmpun+0x26>
 80a2814:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a281c:	d102      	bne.n	80a2824 <__aeabi_dcmpun+0x20>
 80a281e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2822:	d102      	bne.n	80a282a <__aeabi_dcmpun+0x26>
 80a2824:	f04f 0000 	mov.w	r0, #0
 80a2828:	4770      	bx	lr
 80a282a:	f04f 0001 	mov.w	r0, #1
 80a282e:	4770      	bx	lr

080a2830 <__aeabi_d2iz>:
 80a2830:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a2834:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2838:	d215      	bcs.n	80a2866 <__aeabi_d2iz+0x36>
 80a283a:	d511      	bpl.n	80a2860 <__aeabi_d2iz+0x30>
 80a283c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2840:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2844:	d912      	bls.n	80a286c <__aeabi_d2iz+0x3c>
 80a2846:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a284a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a284e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a2852:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2856:	fa23 f002 	lsr.w	r0, r3, r2
 80a285a:	bf18      	it	ne
 80a285c:	4240      	negne	r0, r0
 80a285e:	4770      	bx	lr
 80a2860:	f04f 0000 	mov.w	r0, #0
 80a2864:	4770      	bx	lr
 80a2866:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a286a:	d105      	bne.n	80a2878 <__aeabi_d2iz+0x48>
 80a286c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a2870:	bf08      	it	eq
 80a2872:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a2876:	4770      	bx	lr
 80a2878:	f04f 0000 	mov.w	r0, #0
 80a287c:	4770      	bx	lr
 80a287e:	bf00      	nop

080a2880 <__aeabi_d2uiz>:
 80a2880:	004a      	lsls	r2, r1, #1
 80a2882:	d211      	bcs.n	80a28a8 <__aeabi_d2uiz+0x28>
 80a2884:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a2888:	d211      	bcs.n	80a28ae <__aeabi_d2uiz+0x2e>
 80a288a:	d50d      	bpl.n	80a28a8 <__aeabi_d2uiz+0x28>
 80a288c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a2890:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a2894:	d40e      	bmi.n	80a28b4 <__aeabi_d2uiz+0x34>
 80a2896:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a289a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a289e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a28a2:	fa23 f002 	lsr.w	r0, r3, r2
 80a28a6:	4770      	bx	lr
 80a28a8:	f04f 0000 	mov.w	r0, #0
 80a28ac:	4770      	bx	lr
 80a28ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a28b2:	d102      	bne.n	80a28ba <__aeabi_d2uiz+0x3a>
 80a28b4:	f04f 30ff 	mov.w	r0, #4294967295
 80a28b8:	4770      	bx	lr
 80a28ba:	f04f 0000 	mov.w	r0, #0
 80a28be:	4770      	bx	lr

080a28c0 <__aeabi_frsub>:
 80a28c0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a28c4:	e002      	b.n	80a28cc <__addsf3>
 80a28c6:	bf00      	nop

080a28c8 <__aeabi_fsub>:
 80a28c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a28cc <__addsf3>:
 80a28cc:	0042      	lsls	r2, r0, #1
 80a28ce:	bf1f      	itttt	ne
 80a28d0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a28d4:	ea92 0f03 	teqne	r2, r3
 80a28d8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a28dc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a28e0:	d06a      	beq.n	80a29b8 <__addsf3+0xec>
 80a28e2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a28e6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a28ea:	bfc1      	itttt	gt
 80a28ec:	18d2      	addgt	r2, r2, r3
 80a28ee:	4041      	eorgt	r1, r0
 80a28f0:	4048      	eorgt	r0, r1
 80a28f2:	4041      	eorgt	r1, r0
 80a28f4:	bfb8      	it	lt
 80a28f6:	425b      	neglt	r3, r3
 80a28f8:	2b19      	cmp	r3, #25
 80a28fa:	bf88      	it	hi
 80a28fc:	4770      	bxhi	lr
 80a28fe:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a2902:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2906:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a290a:	bf18      	it	ne
 80a290c:	4240      	negne	r0, r0
 80a290e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2912:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a2916:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a291a:	bf18      	it	ne
 80a291c:	4249      	negne	r1, r1
 80a291e:	ea92 0f03 	teq	r2, r3
 80a2922:	d03f      	beq.n	80a29a4 <__addsf3+0xd8>
 80a2924:	f1a2 0201 	sub.w	r2, r2, #1
 80a2928:	fa41 fc03 	asr.w	ip, r1, r3
 80a292c:	eb10 000c 	adds.w	r0, r0, ip
 80a2930:	f1c3 0320 	rsb	r3, r3, #32
 80a2934:	fa01 f103 	lsl.w	r1, r1, r3
 80a2938:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a293c:	d502      	bpl.n	80a2944 <__addsf3+0x78>
 80a293e:	4249      	negs	r1, r1
 80a2940:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2944:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2948:	d313      	bcc.n	80a2972 <__addsf3+0xa6>
 80a294a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a294e:	d306      	bcc.n	80a295e <__addsf3+0x92>
 80a2950:	0840      	lsrs	r0, r0, #1
 80a2952:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2956:	f102 0201 	add.w	r2, r2, #1
 80a295a:	2afe      	cmp	r2, #254	; 0xfe
 80a295c:	d251      	bcs.n	80a2a02 <__addsf3+0x136>
 80a295e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2962:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2966:	bf08      	it	eq
 80a2968:	f020 0001 	biceq.w	r0, r0, #1
 80a296c:	ea40 0003 	orr.w	r0, r0, r3
 80a2970:	4770      	bx	lr
 80a2972:	0049      	lsls	r1, r1, #1
 80a2974:	eb40 0000 	adc.w	r0, r0, r0
 80a2978:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a297c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2980:	d1ed      	bne.n	80a295e <__addsf3+0x92>
 80a2982:	fab0 fc80 	clz	ip, r0
 80a2986:	f1ac 0c08 	sub.w	ip, ip, #8
 80a298a:	ebb2 020c 	subs.w	r2, r2, ip
 80a298e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2992:	bfaa      	itet	ge
 80a2994:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2998:	4252      	neglt	r2, r2
 80a299a:	4318      	orrge	r0, r3
 80a299c:	bfbc      	itt	lt
 80a299e:	40d0      	lsrlt	r0, r2
 80a29a0:	4318      	orrlt	r0, r3
 80a29a2:	4770      	bx	lr
 80a29a4:	f092 0f00 	teq	r2, #0
 80a29a8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a29ac:	bf06      	itte	eq
 80a29ae:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a29b2:	3201      	addeq	r2, #1
 80a29b4:	3b01      	subne	r3, #1
 80a29b6:	e7b5      	b.n	80a2924 <__addsf3+0x58>
 80a29b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a29bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a29c0:	bf18      	it	ne
 80a29c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a29c6:	d021      	beq.n	80a2a0c <__addsf3+0x140>
 80a29c8:	ea92 0f03 	teq	r2, r3
 80a29cc:	d004      	beq.n	80a29d8 <__addsf3+0x10c>
 80a29ce:	f092 0f00 	teq	r2, #0
 80a29d2:	bf08      	it	eq
 80a29d4:	4608      	moveq	r0, r1
 80a29d6:	4770      	bx	lr
 80a29d8:	ea90 0f01 	teq	r0, r1
 80a29dc:	bf1c      	itt	ne
 80a29de:	2000      	movne	r0, #0
 80a29e0:	4770      	bxne	lr
 80a29e2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a29e6:	d104      	bne.n	80a29f2 <__addsf3+0x126>
 80a29e8:	0040      	lsls	r0, r0, #1
 80a29ea:	bf28      	it	cs
 80a29ec:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a29f0:	4770      	bx	lr
 80a29f2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a29f6:	bf3c      	itt	cc
 80a29f8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a29fc:	4770      	bxcc	lr
 80a29fe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2a02:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2a06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2a0a:	4770      	bx	lr
 80a2a0c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2a10:	bf16      	itet	ne
 80a2a12:	4608      	movne	r0, r1
 80a2a14:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2a18:	4601      	movne	r1, r0
 80a2a1a:	0242      	lsls	r2, r0, #9
 80a2a1c:	bf06      	itte	eq
 80a2a1e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2a22:	ea90 0f01 	teqeq	r0, r1
 80a2a26:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2a2a:	4770      	bx	lr

080a2a2c <__aeabi_ui2f>:
 80a2a2c:	f04f 0300 	mov.w	r3, #0
 80a2a30:	e004      	b.n	80a2a3c <__aeabi_i2f+0x8>
 80a2a32:	bf00      	nop

080a2a34 <__aeabi_i2f>:
 80a2a34:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2a38:	bf48      	it	mi
 80a2a3a:	4240      	negmi	r0, r0
 80a2a3c:	ea5f 0c00 	movs.w	ip, r0
 80a2a40:	bf08      	it	eq
 80a2a42:	4770      	bxeq	lr
 80a2a44:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2a48:	4601      	mov	r1, r0
 80a2a4a:	f04f 0000 	mov.w	r0, #0
 80a2a4e:	e01c      	b.n	80a2a8a <__aeabi_l2f+0x2a>

080a2a50 <__aeabi_ul2f>:
 80a2a50:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a54:	bf08      	it	eq
 80a2a56:	4770      	bxeq	lr
 80a2a58:	f04f 0300 	mov.w	r3, #0
 80a2a5c:	e00a      	b.n	80a2a74 <__aeabi_l2f+0x14>
 80a2a5e:	bf00      	nop

080a2a60 <__aeabi_l2f>:
 80a2a60:	ea50 0201 	orrs.w	r2, r0, r1
 80a2a64:	bf08      	it	eq
 80a2a66:	4770      	bxeq	lr
 80a2a68:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2a6c:	d502      	bpl.n	80a2a74 <__aeabi_l2f+0x14>
 80a2a6e:	4240      	negs	r0, r0
 80a2a70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2a74:	ea5f 0c01 	movs.w	ip, r1
 80a2a78:	bf02      	ittt	eq
 80a2a7a:	4684      	moveq	ip, r0
 80a2a7c:	4601      	moveq	r1, r0
 80a2a7e:	2000      	moveq	r0, #0
 80a2a80:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2a84:	bf08      	it	eq
 80a2a86:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2a8a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2a8e:	fabc f28c 	clz	r2, ip
 80a2a92:	3a08      	subs	r2, #8
 80a2a94:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2a98:	db10      	blt.n	80a2abc <__aeabi_l2f+0x5c>
 80a2a9a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2a9e:	4463      	add	r3, ip
 80a2aa0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2aa4:	f1c2 0220 	rsb	r2, r2, #32
 80a2aa8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2aac:	fa20 f202 	lsr.w	r2, r0, r2
 80a2ab0:	eb43 0002 	adc.w	r0, r3, r2
 80a2ab4:	bf08      	it	eq
 80a2ab6:	f020 0001 	biceq.w	r0, r0, #1
 80a2aba:	4770      	bx	lr
 80a2abc:	f102 0220 	add.w	r2, r2, #32
 80a2ac0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2ac4:	f1c2 0220 	rsb	r2, r2, #32
 80a2ac8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2acc:	fa21 f202 	lsr.w	r2, r1, r2
 80a2ad0:	eb43 0002 	adc.w	r0, r3, r2
 80a2ad4:	bf08      	it	eq
 80a2ad6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2ada:	4770      	bx	lr

080a2adc <__aeabi_fmul>:
 80a2adc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ae0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2ae4:	bf1e      	ittt	ne
 80a2ae6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2aea:	ea92 0f0c 	teqne	r2, ip
 80a2aee:	ea93 0f0c 	teqne	r3, ip
 80a2af2:	d06f      	beq.n	80a2bd4 <__aeabi_fmul+0xf8>
 80a2af4:	441a      	add	r2, r3
 80a2af6:	ea80 0c01 	eor.w	ip, r0, r1
 80a2afa:	0240      	lsls	r0, r0, #9
 80a2afc:	bf18      	it	ne
 80a2afe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2b02:	d01e      	beq.n	80a2b42 <__aeabi_fmul+0x66>
 80a2b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2b08:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2b0c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2b10:	fba0 3101 	umull	r3, r1, r0, r1
 80a2b14:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2b18:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2b1c:	bf3e      	ittt	cc
 80a2b1e:	0049      	lslcc	r1, r1, #1
 80a2b20:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2b24:	005b      	lslcc	r3, r3, #1
 80a2b26:	ea40 0001 	orr.w	r0, r0, r1
 80a2b2a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2b2e:	2afd      	cmp	r2, #253	; 0xfd
 80a2b30:	d81d      	bhi.n	80a2b6e <__aeabi_fmul+0x92>
 80a2b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2b36:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2b3a:	bf08      	it	eq
 80a2b3c:	f020 0001 	biceq.w	r0, r0, #1
 80a2b40:	4770      	bx	lr
 80a2b42:	f090 0f00 	teq	r0, #0
 80a2b46:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2b4a:	bf08      	it	eq
 80a2b4c:	0249      	lsleq	r1, r1, #9
 80a2b4e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2b52:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2b56:	3a7f      	subs	r2, #127	; 0x7f
 80a2b58:	bfc2      	ittt	gt
 80a2b5a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2b5e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2b62:	4770      	bxgt	lr
 80a2b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2b68:	f04f 0300 	mov.w	r3, #0
 80a2b6c:	3a01      	subs	r2, #1
 80a2b6e:	dc5d      	bgt.n	80a2c2c <__aeabi_fmul+0x150>
 80a2b70:	f112 0f19 	cmn.w	r2, #25
 80a2b74:	bfdc      	itt	le
 80a2b76:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2b7a:	4770      	bxle	lr
 80a2b7c:	f1c2 0200 	rsb	r2, r2, #0
 80a2b80:	0041      	lsls	r1, r0, #1
 80a2b82:	fa21 f102 	lsr.w	r1, r1, r2
 80a2b86:	f1c2 0220 	rsb	r2, r2, #32
 80a2b8a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2b8e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2b92:	f140 0000 	adc.w	r0, r0, #0
 80a2b96:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2b9a:	bf08      	it	eq
 80a2b9c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2ba0:	4770      	bx	lr
 80a2ba2:	f092 0f00 	teq	r2, #0
 80a2ba6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2baa:	bf02      	ittt	eq
 80a2bac:	0040      	lsleq	r0, r0, #1
 80a2bae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2bb2:	3a01      	subeq	r2, #1
 80a2bb4:	d0f9      	beq.n	80a2baa <__aeabi_fmul+0xce>
 80a2bb6:	ea40 000c 	orr.w	r0, r0, ip
 80a2bba:	f093 0f00 	teq	r3, #0
 80a2bbe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2bc2:	bf02      	ittt	eq
 80a2bc4:	0049      	lsleq	r1, r1, #1
 80a2bc6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2bca:	3b01      	subeq	r3, #1
 80a2bcc:	d0f9      	beq.n	80a2bc2 <__aeabi_fmul+0xe6>
 80a2bce:	ea41 010c 	orr.w	r1, r1, ip
 80a2bd2:	e78f      	b.n	80a2af4 <__aeabi_fmul+0x18>
 80a2bd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2bd8:	ea92 0f0c 	teq	r2, ip
 80a2bdc:	bf18      	it	ne
 80a2bde:	ea93 0f0c 	teqne	r3, ip
 80a2be2:	d00a      	beq.n	80a2bfa <__aeabi_fmul+0x11e>
 80a2be4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2be8:	bf18      	it	ne
 80a2bea:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2bee:	d1d8      	bne.n	80a2ba2 <__aeabi_fmul+0xc6>
 80a2bf0:	ea80 0001 	eor.w	r0, r0, r1
 80a2bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2bf8:	4770      	bx	lr
 80a2bfa:	f090 0f00 	teq	r0, #0
 80a2bfe:	bf17      	itett	ne
 80a2c00:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2c04:	4608      	moveq	r0, r1
 80a2c06:	f091 0f00 	teqne	r1, #0
 80a2c0a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2c0e:	d014      	beq.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2c10:	ea92 0f0c 	teq	r2, ip
 80a2c14:	d101      	bne.n	80a2c1a <__aeabi_fmul+0x13e>
 80a2c16:	0242      	lsls	r2, r0, #9
 80a2c18:	d10f      	bne.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2c1a:	ea93 0f0c 	teq	r3, ip
 80a2c1e:	d103      	bne.n	80a2c28 <__aeabi_fmul+0x14c>
 80a2c20:	024b      	lsls	r3, r1, #9
 80a2c22:	bf18      	it	ne
 80a2c24:	4608      	movne	r0, r1
 80a2c26:	d108      	bne.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2c28:	ea80 0001 	eor.w	r0, r0, r1
 80a2c2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c38:	4770      	bx	lr
 80a2c3a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2c3e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2c42:	4770      	bx	lr

080a2c44 <__aeabi_fdiv>:
 80a2c44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2c4c:	bf1e      	ittt	ne
 80a2c4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2c52:	ea92 0f0c 	teqne	r2, ip
 80a2c56:	ea93 0f0c 	teqne	r3, ip
 80a2c5a:	d069      	beq.n	80a2d30 <__aeabi_fdiv+0xec>
 80a2c5c:	eba2 0203 	sub.w	r2, r2, r3
 80a2c60:	ea80 0c01 	eor.w	ip, r0, r1
 80a2c64:	0249      	lsls	r1, r1, #9
 80a2c66:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2c6a:	d037      	beq.n	80a2cdc <__aeabi_fdiv+0x98>
 80a2c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2c70:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2c74:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2c78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2c7c:	428b      	cmp	r3, r1
 80a2c7e:	bf38      	it	cc
 80a2c80:	005b      	lslcc	r3, r3, #1
 80a2c82:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2c86:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2c8a:	428b      	cmp	r3, r1
 80a2c8c:	bf24      	itt	cs
 80a2c8e:	1a5b      	subcs	r3, r3, r1
 80a2c90:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2c94:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2c98:	bf24      	itt	cs
 80a2c9a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2c9e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2ca2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2ca6:	bf24      	itt	cs
 80a2ca8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2cac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2cb0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2cb4:	bf24      	itt	cs
 80a2cb6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2cba:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2cbe:	011b      	lsls	r3, r3, #4
 80a2cc0:	bf18      	it	ne
 80a2cc2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2cc6:	d1e0      	bne.n	80a2c8a <__aeabi_fdiv+0x46>
 80a2cc8:	2afd      	cmp	r2, #253	; 0xfd
 80a2cca:	f63f af50 	bhi.w	80a2b6e <__aeabi_fmul+0x92>
 80a2cce:	428b      	cmp	r3, r1
 80a2cd0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2cd4:	bf08      	it	eq
 80a2cd6:	f020 0001 	biceq.w	r0, r0, #1
 80a2cda:	4770      	bx	lr
 80a2cdc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2ce0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2ce4:	327f      	adds	r2, #127	; 0x7f
 80a2ce6:	bfc2      	ittt	gt
 80a2ce8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2cec:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2cf0:	4770      	bxgt	lr
 80a2cf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cf6:	f04f 0300 	mov.w	r3, #0
 80a2cfa:	3a01      	subs	r2, #1
 80a2cfc:	e737      	b.n	80a2b6e <__aeabi_fmul+0x92>
 80a2cfe:	f092 0f00 	teq	r2, #0
 80a2d02:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2d06:	bf02      	ittt	eq
 80a2d08:	0040      	lsleq	r0, r0, #1
 80a2d0a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2d0e:	3a01      	subeq	r2, #1
 80a2d10:	d0f9      	beq.n	80a2d06 <__aeabi_fdiv+0xc2>
 80a2d12:	ea40 000c 	orr.w	r0, r0, ip
 80a2d16:	f093 0f00 	teq	r3, #0
 80a2d1a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2d1e:	bf02      	ittt	eq
 80a2d20:	0049      	lsleq	r1, r1, #1
 80a2d22:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2d26:	3b01      	subeq	r3, #1
 80a2d28:	d0f9      	beq.n	80a2d1e <__aeabi_fdiv+0xda>
 80a2d2a:	ea41 010c 	orr.w	r1, r1, ip
 80a2d2e:	e795      	b.n	80a2c5c <__aeabi_fdiv+0x18>
 80a2d30:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2d34:	ea92 0f0c 	teq	r2, ip
 80a2d38:	d108      	bne.n	80a2d4c <__aeabi_fdiv+0x108>
 80a2d3a:	0242      	lsls	r2, r0, #9
 80a2d3c:	f47f af7d 	bne.w	80a2c3a <__aeabi_fmul+0x15e>
 80a2d40:	ea93 0f0c 	teq	r3, ip
 80a2d44:	f47f af70 	bne.w	80a2c28 <__aeabi_fmul+0x14c>
 80a2d48:	4608      	mov	r0, r1
 80a2d4a:	e776      	b.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2d4c:	ea93 0f0c 	teq	r3, ip
 80a2d50:	d104      	bne.n	80a2d5c <__aeabi_fdiv+0x118>
 80a2d52:	024b      	lsls	r3, r1, #9
 80a2d54:	f43f af4c 	beq.w	80a2bf0 <__aeabi_fmul+0x114>
 80a2d58:	4608      	mov	r0, r1
 80a2d5a:	e76e      	b.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2d5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2d60:	bf18      	it	ne
 80a2d62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2d66:	d1ca      	bne.n	80a2cfe <__aeabi_fdiv+0xba>
 80a2d68:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2d6c:	f47f af5c 	bne.w	80a2c28 <__aeabi_fmul+0x14c>
 80a2d70:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2d74:	f47f af3c 	bne.w	80a2bf0 <__aeabi_fmul+0x114>
 80a2d78:	e75f      	b.n	80a2c3a <__aeabi_fmul+0x15e>
 80a2d7a:	bf00      	nop

080a2d7c <__cxa_atexit>:
 80a2d7c:	b510      	push	{r4, lr}
 80a2d7e:	4c05      	ldr	r4, [pc, #20]	; (80a2d94 <__cxa_atexit+0x18>)
 80a2d80:	4613      	mov	r3, r2
 80a2d82:	b12c      	cbz	r4, 80a2d90 <__cxa_atexit+0x14>
 80a2d84:	460a      	mov	r2, r1
 80a2d86:	4601      	mov	r1, r0
 80a2d88:	2002      	movs	r0, #2
 80a2d8a:	f3af 8000 	nop.w
 80a2d8e:	bd10      	pop	{r4, pc}
 80a2d90:	4620      	mov	r0, r4
 80a2d92:	bd10      	pop	{r4, pc}
 80a2d94:	00000000 	.word	0x00000000

080a2d98 <memcpy>:
 80a2d98:	b510      	push	{r4, lr}
 80a2d9a:	1e43      	subs	r3, r0, #1
 80a2d9c:	440a      	add	r2, r1
 80a2d9e:	4291      	cmp	r1, r2
 80a2da0:	d004      	beq.n	80a2dac <memcpy+0x14>
 80a2da2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2da6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2daa:	e7f8      	b.n	80a2d9e <memcpy+0x6>
 80a2dac:	bd10      	pop	{r4, pc}

080a2dae <memset>:
 80a2dae:	4603      	mov	r3, r0
 80a2db0:	4402      	add	r2, r0
 80a2db2:	4293      	cmp	r3, r2
 80a2db4:	d002      	beq.n	80a2dbc <memset+0xe>
 80a2db6:	f803 1b01 	strb.w	r1, [r3], #1
 80a2dba:	e7fa      	b.n	80a2db2 <memset+0x4>
 80a2dbc:	4770      	bx	lr
	...

080a2dc0 <srand>:
 80a2dc0:	b538      	push	{r3, r4, r5, lr}
 80a2dc2:	4b12      	ldr	r3, [pc, #72]	; (80a2e0c <srand+0x4c>)
 80a2dc4:	4605      	mov	r5, r0
 80a2dc6:	681c      	ldr	r4, [r3, #0]
 80a2dc8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2dca:	b9d3      	cbnz	r3, 80a2e02 <srand+0x42>
 80a2dcc:	2018      	movs	r0, #24
 80a2dce:	f7fe f88b 	bl	80a0ee8 <malloc>
 80a2dd2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2dd6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2dd8:	8003      	strh	r3, [r0, #0]
 80a2dda:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2dde:	8043      	strh	r3, [r0, #2]
 80a2de0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2de4:	8083      	strh	r3, [r0, #4]
 80a2de6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2dea:	80c3      	strh	r3, [r0, #6]
 80a2dec:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2df0:	8103      	strh	r3, [r0, #8]
 80a2df2:	2305      	movs	r3, #5
 80a2df4:	8143      	strh	r3, [r0, #10]
 80a2df6:	230b      	movs	r3, #11
 80a2df8:	8183      	strh	r3, [r0, #12]
 80a2dfa:	2201      	movs	r2, #1
 80a2dfc:	2300      	movs	r3, #0
 80a2dfe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2e04:	2200      	movs	r2, #0
 80a2e06:	611d      	str	r5, [r3, #16]
 80a2e08:	615a      	str	r2, [r3, #20]
 80a2e0a:	bd38      	pop	{r3, r4, r5, pc}
 80a2e0c:	20000068 	.word	0x20000068

080a2e10 <strlen>:
 80a2e10:	4603      	mov	r3, r0
 80a2e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e16:	2a00      	cmp	r2, #0
 80a2e18:	d1fb      	bne.n	80a2e12 <strlen+0x2>
 80a2e1a:	1a18      	subs	r0, r3, r0
 80a2e1c:	3801      	subs	r0, #1
 80a2e1e:	4770      	bx	lr

080a2e20 <dynalib_user>:
 80a2e20:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a2e30:	0000 0000                                   ....

080a2e34 <_ZTV5Hx711>:
	...
 80a2e3c:	00bb 080a 00bd 080a                         ........

080a2e44 <_ZTV9LagTustin>:
	...
 80a2e4c:	01e3 080a 0327 080a 030d 080a 0233 080a     ....'.......3...
 80a2e5c:	01e1 080a 01db 080a 0287 080a 020f 080a     ................
 80a2e6c:	0291 080a 01e5 080a 2020 2020 2020 2020     ........        
 80a2e7c:	2020 2020 2020 0067 2020 2020 2020 2020           g.        
 80a2e8c:	2020 2020 2020 7a6f 2000 2d2d 2d2d 2d2d           oz. ------
 80a2e9c:	2d2d 2d2d 2d2d 252d 2e34 6631 0a67 2d00     -------%4.1fg..-
 80a2eac:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 2520     -------------. %
 80a2ebc:	2e34 6631 2c67 2520 2e34 6631 2c67 2520     4.1fg, %4.1fg, %
 80a2ecc:	2e34 6631 2c67 2520 2e34 6632 7a6f 202c     4.1fg, %4.2foz, 
 80a2edc:	3625 332e 7366 000a                         %6.3fs..

080a2ee4 <_ZTV17LiquidCrystal_I2C>:
	...
 80a2eec:	0979 080a 097b 080a 0a35 080a 0f91 080a     y...{...5.......
 80a2efc:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...
 80a2f0c:	616e 006e 766f 0066 002e 6e69 0066 6162     nan.ovf...inf.ba
 80a2f1c:	6475 5300 7265 6169 006c 5355 5342 7265     ud.Serial.USBSer
 80a2f2c:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
 80a2f3c:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
 80a2f4c:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
 80a2f5c:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
 80a2f6c:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
 80a2f7c:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 80a2f8c:	656c 0072 7061 0070 3025 3031 2075 5d00     ler.app.%010u .]
 80a2f9c:	0020 6425 2c00 0020 2928 203a 2000 005b      .%d., .(): . [.
 80a2fac:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80a2fbc:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
 80a2fcc:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a2fdc:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a2fec:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80a2ffc:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
 80a300c:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a301c:	6100 6373 6974 656d 0000 0000               .asctime....

080a3028 <_ZTV9IPAddress>:
	...
 80a3030:	13ed 080a 13dd 080a 13df 080a               ............

080a303c <_ZTV9USBSerial>:
	...
 80a3044:	14a9 080a 14f9 080a 1507 080a 0f91 080a     ................
 80a3054:	14e5 080a 14ab 080a 14c1 080a 14f3 080a     ................
 80a3064:	14d7 080a 14a5 080a                         ........

080a306c <_ZTV11USARTSerial>:
	...
 80a3074:	1611 080a 1661 080a 166f 080a 0f91 080a     ....a...o.......
 80a3084:	1625 080a 1647 080a 1633 080a 165b 080a     %...G...3...[...
 80a3094:	1613 080a 1617 080a                         ........

080a309c <_ZTV7TwoWire>:
	...
 80a30a4:	1749 080a 1793 080a 176b 080a 174b 080a     I.......k...K...
 80a30b4:	1773 080a 177b 080a 1783 080a 178b 080a     s...{...........

080a30c4 <_ZTVN5spark9WiFiClassE>:
	...
 80a30cc:	1885 080a 187b 080a 1871 080a 17ef 080a     ....{...q.......
 80a30dc:	1233 080a 1865 080a 1859 080a 1851 080a     3...e...Y...Q...
 80a30ec:	1847 080a 183d 080a 17f9 080a               G...=.......

080a30f8 <_ZTVN5spark12NetworkClassE>:
	...
 80a3100:	18a5 080a 18af 080a 18b9 080a 18c3 080a     ................
 80a3110:	18cd 080a 18d9 080a 18e5 080a 18f1 080a     ................
 80a3120:	18f9 080a 1903 080a 190d 080a               ............

080a312c <_ZSt7nothrow>:
 80a312c:	0000 0000                                   ....

080a3130 <__sf_fake_stdin>:
	...

080a3150 <__sf_fake_stdout>:
	...

080a3170 <__sf_fake_stderr>:
	...
 80a3190:	0043                                        C.

080a3192 <link_const_variable_data_end>:
	...

080a3194 <link_constructors_location>:
 80a3194:	080a01d7 	.word	0x080a01d7
 80a3198:	080a04f9 	.word	0x080a04f9
 80a319c:	080a094d 	.word	0x080a094d
 80a31a0:	080a0b87 	.word	0x080a0b87
 80a31a4:	080a0f5d 	.word	0x080a0f5d
 80a31a8:	080a1241 	.word	0x080a1241
 80a31ac:	080a1251 	.word	0x080a1251
 80a31b0:	080a1289 	.word	0x080a1289
 80a31b4:	080a1891 	.word	0x080a1891
 80a31b8:	080a195d 	.word	0x080a195d
 80a31bc:	080a1a79 	.word	0x080a1a79
 80a31c0:	080a1b6d 	.word	0x080a1b6d
 80a31c4:	080a1bf1 	.word	0x080a1bf1
 80a31c8:	080a1cb5 	.word	0x080a1cb5
 80a31cc:	080a1d79 	.word	0x080a1d79
